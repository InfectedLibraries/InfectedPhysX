// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct PxConstraintVisualizer
{
    public unsafe void Destructor()
    {
        fixed (PxConstraintVisualizer* @this = &this)
        { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
    }

    public unsafe void visualizeJointFrames(PxTransform* parent, PxTransform* child)
    {
        fixed (PxConstraintVisualizer* @this = &this)
        { VirtualMethodTablePointer->visualizeJointFrames(@this, parent, child); }
    }

    public unsafe void visualizeLinearLimit(PxTransform* t0, PxTransform* t1, float value, bool active)
    {
        fixed (PxConstraintVisualizer* @this = &this)
        { VirtualMethodTablePointer->visualizeLinearLimit(@this, t0, t1, value, active); }
    }

    public unsafe void visualizeAngularLimit(PxTransform* t0, float lower, float upper, bool active)
    {
        fixed (PxConstraintVisualizer* @this = &this)
        { VirtualMethodTablePointer->visualizeAngularLimit(@this, t0, lower, upper, active); }
    }

    public unsafe void visualizeLimitCone(PxTransform* t, float tanQSwingY, float tanQSwingZ, bool active)
    {
        fixed (PxConstraintVisualizer* @this = &this)
        { VirtualMethodTablePointer->visualizeLimitCone(@this, t, tanQSwingY, tanQSwingZ, active); }
    }

    public unsafe void visualizeDoubleCone(PxTransform* t, float angle, bool active)
    {
        fixed (PxConstraintVisualizer* @this = &this)
        { VirtualMethodTablePointer->visualizeDoubleCone(@this, t, angle, active); }
    }

    public unsafe void visualizeLine(PxVec3* p0, PxVec3* p1, uint color)
    {
        fixed (PxConstraintVisualizer* @this = &this)
        { VirtualMethodTablePointer->visualizeLine(@this, p0, p1, color); }
    }


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `~PxConstraintVisualizer`</summary>
        public delegate* unmanaged[Cdecl]<PxConstraintVisualizer*, void> __DeletingDestructorPointer;
        /// <summary>Virtual method pointer for `visualizeJointFrames`</summary>
        public delegate* unmanaged[Cdecl]<PxConstraintVisualizer*, PxTransform*, PxTransform*, void> visualizeJointFrames;
        /// <summary>Virtual method pointer for `visualizeLinearLimit`</summary>
        public delegate* unmanaged[Cdecl]<PxConstraintVisualizer*, PxTransform*, PxTransform*, float, NativeBoolean, void> visualizeLinearLimit;
        /// <summary>Virtual method pointer for `visualizeAngularLimit`</summary>
        public delegate* unmanaged[Cdecl]<PxConstraintVisualizer*, PxTransform*, float, float, NativeBoolean, void> visualizeAngularLimit;
        /// <summary>Virtual method pointer for `visualizeLimitCone`</summary>
        public delegate* unmanaged[Cdecl]<PxConstraintVisualizer*, PxTransform*, float, float, NativeBoolean, void> visualizeLimitCone;
        /// <summary>Virtual method pointer for `visualizeDoubleCone`</summary>
        public delegate* unmanaged[Cdecl]<PxConstraintVisualizer*, PxTransform*, float, NativeBoolean, void> visualizeDoubleCone;
        /// <summary>Virtual method pointer for `visualizeLine`</summary>
        public delegate* unmanaged[Cdecl]<PxConstraintVisualizer*, PxVec3*, PxVec3*, uint, void> visualizeLine;
    }
}
