// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public unsafe partial struct PxBVHStructure
    {
        [FieldOffset(0)] public PxBase Base;

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe uint raycast(PxVec3* origin, PxVec3* unitDir, float maxDist, uint maxHits, uint* rayHits)
        {
            fixed (PxBVHStructure* @this = &this)
            { return VirtualMethodTablePointer->raycast(@this, origin, unitDir, maxDist, maxHits, rayHits); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe uint sweep(PxBounds3* aabb, PxVec3* unitDir, float maxDist, uint maxHits, uint* sweepHits)
        {
            fixed (PxBVHStructure* @this = &this)
            { return VirtualMethodTablePointer->sweep(@this, aabb, unitDir, maxDist, maxHits, sweepHits); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe uint overlap(PxBounds3* aabb, uint maxHits, uint* overlapHits)
        {
            fixed (PxBVHStructure* @this = &this)
            { return VirtualMethodTablePointer->overlap(@this, aabb, maxHits, overlapHits); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe PxBounds3* getBounds()
        {
            fixed (PxBVHStructure* @this = &this)
            { return VirtualMethodTablePointer->getBounds(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe uint getNbBounds()
        {
            fixed (PxBVHStructure* @this = &this)
            { return VirtualMethodTablePointer->getNbBounds(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe byte* getConcreteTypeName()
        {
            fixed (PxBVHStructure* @this = &this)
            { return VirtualMethodTablePointer->getConcreteTypeName(@this); }
        }

        [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxBVHStructure@physx@@IEAA@GV?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(PxBVHStructure* @this, ushort concreteType, PxBaseFlags baseFlags);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void Constructor(ushort concreteType, PxBaseFlags baseFlags)
        {
            fixed (PxBVHStructure* @this = &this)
            { Constructor_PInvoke(@this, concreteType, baseFlags); }
        }

        [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxBVHStructure@physx@@IEAA@V?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(PxBVHStructure* @this, PxBaseFlags baseFlags);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void Constructor(PxBaseFlags baseFlags)
        {
            fixed (PxBVHStructure* @this = &this)
            { Constructor_PInvoke(@this, baseFlags); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void Destructor()
        {
            fixed (PxBVHStructure* @this = &this)
            { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe bool isKindOf(byte* name)
        {
            fixed (PxBVHStructure* @this = &this)
            { return VirtualMethodTablePointer->isKindOf(@this, name); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxBase*, void> release;
            /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
            public delegate* unmanaged[Cdecl]<PxBVHStructure*, byte*> getConcreteTypeName;
            /// <summary>Virtual method pointer for `isReleasable`</summary>
            public delegate* unmanaged[Cdecl]<PxBase*, NativeBoolean> isReleasable;
            /// <summary>Virtual method pointer for `~PxBVHStructure`</summary>
            public delegate* unmanaged[Cdecl]<PxBVHStructure*, void> __DeletingDestructorPointer;
            /// <summary>Virtual method pointer for `isKindOf`</summary>
            public delegate* unmanaged[Cdecl]<PxBVHStructure*, byte*, NativeBoolean> isKindOf;
            /// <summary>Virtual method pointer for `raycast`</summary>
            public delegate* unmanaged[Cdecl]<PxBVHStructure*, PxVec3*, PxVec3*, float, uint, uint*, uint> raycast;
            /// <summary>Virtual method pointer for `sweep`</summary>
            public delegate* unmanaged[Cdecl]<PxBVHStructure*, PxBounds3*, PxVec3*, float, uint, uint*, uint> sweep;
            /// <summary>Virtual method pointer for `overlap`</summary>
            public delegate* unmanaged[Cdecl]<PxBVHStructure*, PxBounds3*, uint, uint*, uint> overlap;
            /// <summary>Virtual method pointer for `getBounds`</summary>
            public delegate* unmanaged[Cdecl]<PxBVHStructure*, PxBounds3*> getBounds;
            /// <summary>Virtual method pointer for `getNbBounds`</summary>
            public delegate* unmanaged[Cdecl]<PxBVHStructure*, uint> getNbBounds;
        }
    }
}
