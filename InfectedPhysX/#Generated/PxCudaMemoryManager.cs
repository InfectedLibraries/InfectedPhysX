// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct PxCudaMemoryManager
{
    public unsafe PxCudaBuffer* alloc(PxCudaBufferType* type, ulong size, byte* file = null, int line = 0, byte* allocName = null, PxAllocId allocId = PxAllocId.UNASSIGNED)
    {
        fixed (PxCudaMemoryManager* @this = &this)
        { return VirtualMethodTablePointer->alloc_1(@this, type, size, file, line, allocName, allocId); }
    }

    public unsafe ulong alloc(PxCudaBufferMemorySpace memorySpace, ulong size, byte* file = null, int line = 0, byte* allocName = null, PxAllocId allocId = PxAllocId.UNASSIGNED)
    {
        fixed (PxCudaMemoryManager* @this = &this)
        { return VirtualMethodTablePointer->alloc_0(@this, memorySpace, size, file, line, allocName, allocId); }
    }

    public unsafe bool free(PxCudaBufferMemorySpace memorySpace, ulong addr)
    {
        fixed (PxCudaMemoryManager* @this = &this)
        { return VirtualMethodTablePointer->free(@this, memorySpace, addr); }
    }

    public unsafe bool realloc(PxCudaBufferMemorySpace memorySpace, ulong addr, ulong size, byte* file = null, int line = 0, byte* allocName = null, PxAllocId allocId = PxAllocId.UNASSIGNED)
    {
        fixed (PxCudaMemoryManager* @this = &this)
        { return VirtualMethodTablePointer->realloc(@this, memorySpace, addr, size, file, line, allocName, allocId); }
    }

    public unsafe void getStats(PxCudaBufferType* type, PxCudaMemoryManagerStats* outStats)
    {
        fixed (PxCudaMemoryManager* @this = &this)
        { VirtualMethodTablePointer->getStats(@this, type, outStats); }
    }

    public unsafe bool reserve(PxCudaBufferType* type, ulong size)
    {
        fixed (PxCudaMemoryManager* @this = &this)
        { return VirtualMethodTablePointer->reserve(@this, type, size); }
    }

    public unsafe bool setPageSize(PxCudaBufferType* type, ulong size)
    {
        fixed (PxCudaMemoryManager* @this = &this)
        { return VirtualMethodTablePointer->setPageSize(@this, type, size); }
    }

    public unsafe bool setMaxMemorySize(PxCudaBufferType* type, ulong size)
    {
        fixed (PxCudaMemoryManager* @this = &this)
        { return VirtualMethodTablePointer->setMaxMemorySize(@this, type, size); }
    }

    public unsafe ulong getBaseSize(PxCudaBufferType* type)
    {
        fixed (PxCudaMemoryManager* @this = &this)
        { return VirtualMethodTablePointer->getBaseSize(@this, type); }
    }

    public unsafe ulong getPageSize(PxCudaBufferType* type)
    {
        fixed (PxCudaMemoryManager* @this = &this)
        { return VirtualMethodTablePointer->getPageSize(@this, type); }
    }

    public unsafe ulong getMaxMemorySize(PxCudaBufferType* type)
    {
        fixed (PxCudaMemoryManager* @this = &this)
        { return VirtualMethodTablePointer->getMaxMemorySize(@this, type); }
    }

    public unsafe ulong getMappedPinnedPtr(ulong hostPtr)
    {
        fixed (PxCudaMemoryManager* @this = &this)
        { return VirtualMethodTablePointer->getMappedPinnedPtr(@this, hostPtr); }
    }

    public unsafe void Destructor()
    {
        fixed (PxCudaMemoryManager* @this = &this)
        { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
    }


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `alloc`</summary>
        public delegate* unmanaged[Cdecl]<PxCudaMemoryManager*, PxCudaBufferMemorySpace, ulong, byte*, int, byte*, PxAllocId, ulong> alloc_0;
        /// <summary>Virtual method pointer for `alloc`</summary>
        public delegate* unmanaged[Cdecl]<PxCudaMemoryManager*, PxCudaBufferType*, ulong, byte*, int, byte*, PxAllocId, PxCudaBuffer*> alloc_1;
        /// <summary>Virtual method pointer for `free`</summary>
        public delegate* unmanaged[Cdecl]<PxCudaMemoryManager*, PxCudaBufferMemorySpace, ulong, bool> free;
        /// <summary>Virtual method pointer for `realloc`</summary>
        public delegate* unmanaged[Cdecl]<PxCudaMemoryManager*, PxCudaBufferMemorySpace, ulong, ulong, byte*, int, byte*, PxAllocId, bool> realloc;
        /// <summary>Virtual method pointer for `getStats`</summary>
        public delegate* unmanaged[Cdecl]<PxCudaMemoryManager*, PxCudaBufferType*, PxCudaMemoryManagerStats*, void> getStats;
        /// <summary>Virtual method pointer for `reserve`</summary>
        public delegate* unmanaged[Cdecl]<PxCudaMemoryManager*, PxCudaBufferType*, ulong, bool> reserve;
        /// <summary>Virtual method pointer for `setPageSize`</summary>
        public delegate* unmanaged[Cdecl]<PxCudaMemoryManager*, PxCudaBufferType*, ulong, bool> setPageSize;
        /// <summary>Virtual method pointer for `setMaxMemorySize`</summary>
        public delegate* unmanaged[Cdecl]<PxCudaMemoryManager*, PxCudaBufferType*, ulong, bool> setMaxMemorySize;
        /// <summary>Virtual method pointer for `getBaseSize`</summary>
        public delegate* unmanaged[Cdecl]<PxCudaMemoryManager*, PxCudaBufferType*, ulong> getBaseSize;
        /// <summary>Virtual method pointer for `getPageSize`</summary>
        public delegate* unmanaged[Cdecl]<PxCudaMemoryManager*, PxCudaBufferType*, ulong> getPageSize;
        /// <summary>Virtual method pointer for `getMaxMemorySize`</summary>
        public delegate* unmanaged[Cdecl]<PxCudaMemoryManager*, PxCudaBufferType*, ulong> getMaxMemorySize;
        /// <summary>Virtual method pointer for `getMappedPinnedPtr`</summary>
        public delegate* unmanaged[Cdecl]<PxCudaMemoryManager*, ulong, ulong> getMappedPinnedPtr;
        /// <summary>Virtual method pointer for `~PxCudaMemoryManager`</summary>
        public delegate* unmanaged[Cdecl]<PxCudaMemoryManager*, void> __DeletingDestructorPointer;
    }
}
