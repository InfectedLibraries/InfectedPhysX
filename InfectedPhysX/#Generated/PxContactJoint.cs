// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 24)]
public unsafe partial struct PxContactJoint
{
    [FieldOffset(0)] public PxJoint Base;

    public unsafe void setContact(PxVec3* contact)
    {
        fixed (PxContactJoint* @this = &this)
        { VirtualMethodTablePointer->setContact(@this, contact); }
    }

    public unsafe void setContactNormal(PxVec3* contactNormal)
    {
        fixed (PxContactJoint* @this = &this)
        { VirtualMethodTablePointer->setContactNormal(@this, contactNormal); }
    }

    public unsafe void setPenetration(float penetration)
    {
        fixed (PxContactJoint* @this = &this)
        { VirtualMethodTablePointer->setPenetration(@this, penetration); }
    }

    public unsafe PxVec3 getContact()
    {
        fixed (PxContactJoint* @this = &this)
        {
            PxVec3 __returnBuffer;
            VirtualMethodTablePointer->getContact(@this, out __returnBuffer);
            return __returnBuffer;
        }
    }

    public unsafe PxVec3 getContactNormal()
    {
        fixed (PxContactJoint* @this = &this)
        {
            PxVec3 __returnBuffer;
            VirtualMethodTablePointer->getContactNormal(@this, out __returnBuffer);
            return __returnBuffer;
        }
    }

    public unsafe float getPenetration()
    {
        fixed (PxContactJoint* @this = &this)
        { return VirtualMethodTablePointer->getPenetration(@this); }
    }

    public unsafe float getResititution()
    {
        fixed (PxContactJoint* @this = &this)
        { return VirtualMethodTablePointer->getResititution(@this); }
    }

    public unsafe void setResititution(float resititution)
    {
        fixed (PxContactJoint* @this = &this)
        { VirtualMethodTablePointer->setResititution(@this, resititution); }
    }

    public unsafe float getBounceThreshold()
    {
        fixed (PxContactJoint* @this = &this)
        { return VirtualMethodTablePointer->getBounceThreshold(@this); }
    }

    public unsafe void setBounceThreshold(float bounceThreshold)
    {
        fixed (PxContactJoint* @this = &this)
        { VirtualMethodTablePointer->setBounceThreshold(@this, bounceThreshold); }
    }

    public unsafe byte* getConcreteTypeName()
    {
        fixed (PxContactJoint* @this = &this)
        { return VirtualMethodTablePointer->getConcreteTypeName(@this); }
    }

    public unsafe void computeJacobians(PxJacobianRow* jacobian)
    {
        fixed (PxContactJoint* @this = &this)
        { VirtualMethodTablePointer->computeJacobians(@this, jacobian); }
    }

    public unsafe uint getNbJacobianRows()
    {
        fixed (PxContactJoint* @this = &this)
        { return VirtualMethodTablePointer->getNbJacobianRows(@this); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxContactJoint@physx@@IEAA@GV?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxContactJoint* @this, ushort concreteType, PxBaseFlags baseFlags);

    public unsafe void Constructor(ushort concreteType, PxBaseFlags baseFlags)
    {
        fixed (PxContactJoint* @this = &this)
        { Constructor_PInvoke(@this, concreteType, baseFlags); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxContactJoint@physx@@IEAA@V?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxContactJoint* @this, PxBaseFlags baseFlags);

    public unsafe void Constructor(PxBaseFlags baseFlags)
    {
        fixed (PxContactJoint* @this = &this)
        { Constructor_PInvoke(@this, baseFlags); }
    }

    public unsafe bool isKindOf(byte* name)
    {
        fixed (PxContactJoint* @this = &this)
        { return VirtualMethodTablePointer->isKindOf(@this, name); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PxContactJointCreate@physx@@YAPEAVPxContactJoint@1@AEAVPxPhysics@1@PEAVPxRigidActor@1@AEBVPxTransform@1@12@Z", ExactSpelling = true)]
    public static extern PxContactJoint* PxContactJointCreate(PxPhysics* physics, PxRigidActor* actor0, PxTransform* localFrame0, PxRigidActor* actor1, PxTransform* localFrame1);


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `release`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, void> release;
        /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, byte*> getConcreteTypeName;
        /// <summary>Virtual method pointer for `isReleasable`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, NativeBoolean> isReleasable;
        /// <summary>Virtual method pointer for `~PxContactJoint`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, void> __DeletingDestructorPointer;
        /// <summary>Virtual method pointer for `isKindOf`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, byte*, NativeBoolean> isKindOf;
        /// <summary>Virtual method pointer for `setActors`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxRigidActor*, PxRigidActor*, void> setActors;
        /// <summary>Virtual method pointer for `getActors`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxRigidActor**, PxRigidActor**, void> getActors;
        /// <summary>Virtual method pointer for `setLocalPose`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxJointActorIndex, PxTransform*, void> setLocalPose;
        /// <summary>Virtual method pointer for `getLocalPose`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, out PxTransform, PxJointActorIndex, void> getLocalPose;
        /// <summary>Virtual method pointer for `getRelativeTransform`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, out PxTransform, void> getRelativeTransform;
        /// <summary>Virtual method pointer for `getRelativeLinearVelocity`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, out PxVec3, void> getRelativeLinearVelocity;
        /// <summary>Virtual method pointer for `getRelativeAngularVelocity`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, out PxVec3, void> getRelativeAngularVelocity;
        /// <summary>Virtual method pointer for `setBreakForce`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float, float, void> setBreakForce;
        /// <summary>Virtual method pointer for `getBreakForce`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float*, float*, void> getBreakForce;
        /// <summary>Virtual method pointer for `setConstraintFlags`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxConstraintFlags, void> setConstraintFlags;
        /// <summary>Virtual method pointer for `setConstraintFlag`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxConstraintFlags, NativeBoolean, void> setConstraintFlag;
        /// <summary>Virtual method pointer for `getConstraintFlags`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxConstraintFlags> getConstraintFlags;
        /// <summary>Virtual method pointer for `setInvMassScale0`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float, void> setInvMassScale0;
        /// <summary>Virtual method pointer for `getInvMassScale0`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float> getInvMassScale0;
        /// <summary>Virtual method pointer for `setInvInertiaScale0`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float, void> setInvInertiaScale0;
        /// <summary>Virtual method pointer for `getInvInertiaScale0`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float> getInvInertiaScale0;
        /// <summary>Virtual method pointer for `setInvMassScale1`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float, void> setInvMassScale1;
        /// <summary>Virtual method pointer for `getInvMassScale1`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float> getInvMassScale1;
        /// <summary>Virtual method pointer for `setInvInertiaScale1`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float, void> setInvInertiaScale1;
        /// <summary>Virtual method pointer for `getInvInertiaScale1`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float> getInvInertiaScale1;
        /// <summary>Virtual method pointer for `getConstraint`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxConstraint*> getConstraint;
        /// <summary>Virtual method pointer for `setName`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, byte*, void> setName;
        /// <summary>Virtual method pointer for `getName`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, byte*> getName;
        /// <summary>Virtual method pointer for `getScene`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxScene*> getScene;
        /// <summary>Virtual method pointer for `setContact`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, PxVec3*, void> setContact;
        /// <summary>Virtual method pointer for `setContactNormal`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, PxVec3*, void> setContactNormal;
        /// <summary>Virtual method pointer for `setPenetration`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, float, void> setPenetration;
        /// <summary>Virtual method pointer for `getContact`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, out PxVec3, void> getContact;
        /// <summary>Virtual method pointer for `getContactNormal`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, out PxVec3, void> getContactNormal;
        /// <summary>Virtual method pointer for `getPenetration`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, float> getPenetration;
        /// <summary>Virtual method pointer for `getResititution`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, float> getResititution;
        /// <summary>Virtual method pointer for `setResititution`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, float, void> setResititution;
        /// <summary>Virtual method pointer for `getBounceThreshold`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, float> getBounceThreshold;
        /// <summary>Virtual method pointer for `setBounceThreshold`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, float, void> setBounceThreshold;
        /// <summary>Virtual method pointer for `computeJacobians`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, PxJacobianRow*, void> computeJacobians;
        /// <summary>Virtual method pointer for `getNbJacobianRows`</summary>
        public delegate* unmanaged[Cdecl]<PxContactJoint*, uint> getNbJacobianRows;
    }
}
