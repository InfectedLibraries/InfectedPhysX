// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 24)]
public unsafe partial struct PxArticulation
{
    [FieldOffset(0)] public PxArticulationBase Base;

    public unsafe void release()
    {
        fixed (PxArticulation* @this = &this)
        { VirtualMethodTablePointer->release(@this); }
    }

    public unsafe void setMaxProjectionIterations(uint iterations)
    {
        fixed (PxArticulation* @this = &this)
        { VirtualMethodTablePointer->setMaxProjectionIterations(@this, iterations); }
    }

    public unsafe uint getMaxProjectionIterations()
    {
        fixed (PxArticulation* @this = &this)
        { return VirtualMethodTablePointer->getMaxProjectionIterations(@this); }
    }

    public unsafe void setSeparationTolerance(float tolerance)
    {
        fixed (PxArticulation* @this = &this)
        { VirtualMethodTablePointer->setSeparationTolerance(@this, tolerance); }
    }

    public unsafe float getSeparationTolerance()
    {
        fixed (PxArticulation* @this = &this)
        { return VirtualMethodTablePointer->getSeparationTolerance(@this); }
    }

    public unsafe void setInternalDriveIterations(uint iterations)
    {
        fixed (PxArticulation* @this = &this)
        { VirtualMethodTablePointer->setInternalDriveIterations(@this, iterations); }
    }

    public unsafe uint getInternalDriveIterations()
    {
        fixed (PxArticulation* @this = &this)
        { return VirtualMethodTablePointer->getInternalDriveIterations(@this); }
    }

    public unsafe void setExternalDriveIterations(uint iterations)
    {
        fixed (PxArticulation* @this = &this)
        { VirtualMethodTablePointer->setExternalDriveIterations(@this, iterations); }
    }

    public unsafe uint getExternalDriveIterations()
    {
        fixed (PxArticulation* @this = &this)
        { return VirtualMethodTablePointer->getExternalDriveIterations(@this); }
    }

    public unsafe PxArticulationDriveCache* createDriveCache(float compliance, uint driveIterations)
    {
        fixed (PxArticulation* @this = &this)
        { return VirtualMethodTablePointer->createDriveCache(@this, compliance, driveIterations); }
    }

    public unsafe void updateDriveCache(PxArticulationDriveCache* driveCache, float compliance, uint driveIterations)
    {
        fixed (PxArticulation* @this = &this)
        { VirtualMethodTablePointer->updateDriveCache(@this, driveCache, compliance, driveIterations); }
    }

    public unsafe void releaseDriveCache(PxArticulationDriveCache* driveCache)
    {
        fixed (PxArticulation* @this = &this)
        { VirtualMethodTablePointer->releaseDriveCache(@this, driveCache); }
    }

    public unsafe void applyImpulse(PxArticulationLink* link, PxArticulationDriveCache* driveCache, PxVec3* linearImpulse, PxVec3* angularImpulse)
    {
        fixed (PxArticulation* @this = &this)
        { VirtualMethodTablePointer->applyImpulse(@this, link, driveCache, linearImpulse, angularImpulse); }
    }

    public unsafe void computeImpulseResponse(PxArticulationLink* link, PxVec3* linearResponse, PxVec3* angularResponse, PxArticulationDriveCache* driveCache, PxVec3* linearImpulse, PxVec3* angularImpulse)
    {
        fixed (PxArticulation* @this = &this)
        { VirtualMethodTablePointer->computeImpulseResponse(@this, link, linearResponse, angularResponse, driveCache, linearImpulse, angularImpulse); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxArticulation@physx@@IEAA@GV?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxArticulation* @this, ushort concreteType, PxBaseFlags baseFlags);

    public unsafe void Constructor(ushort concreteType, PxBaseFlags baseFlags)
    {
        fixed (PxArticulation* @this = &this)
        { Constructor_PInvoke(@this, concreteType, baseFlags); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxArticulation@physx@@IEAA@V?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxArticulation* @this, PxBaseFlags baseFlags);

    public unsafe void Constructor(PxBaseFlags baseFlags)
    {
        fixed (PxArticulation* @this = &this)
        { Constructor_PInvoke(@this, baseFlags); }
    }

    public unsafe void Destructor()
    {
        fixed (PxArticulation* @this = &this)
        { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
    }


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `release`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, void> release;
        /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, byte*> getConcreteTypeName;
        /// <summary>Virtual method pointer for `isReleasable`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, NativeBoolean> isReleasable;
        /// <summary>Virtual method pointer for `~PxArticulation`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, void> __DeletingDestructorPointer;
        /// <summary>Virtual method pointer for `isKindOf`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, byte*, NativeBoolean> isKindOf;
        /// <summary>Virtual method pointer for `getScene`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxScene*> getScene;
        /// <summary>Virtual method pointer for `setSolverIterationCounts`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, uint, uint, void> setSolverIterationCounts;
        /// <summary>Virtual method pointer for `getSolverIterationCounts`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, uint*, uint*, void> getSolverIterationCounts;
        /// <summary>Virtual method pointer for `isSleeping`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, NativeBoolean> isSleeping;
        /// <summary>Virtual method pointer for `setSleepThreshold`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, float, void> setSleepThreshold;
        /// <summary>Virtual method pointer for `getSleepThreshold`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, float> getSleepThreshold;
        /// <summary>Virtual method pointer for `setStabilizationThreshold`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, float, void> setStabilizationThreshold;
        /// <summary>Virtual method pointer for `getStabilizationThreshold`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, float> getStabilizationThreshold;
        /// <summary>Virtual method pointer for `setWakeCounter`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, float, void> setWakeCounter;
        /// <summary>Virtual method pointer for `getWakeCounter`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, float> getWakeCounter;
        /// <summary>Virtual method pointer for `wakeUp`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, void> wakeUp;
        /// <summary>Virtual method pointer for `putToSleep`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, void> putToSleep;
        /// <summary>Virtual method pointer for `createLink`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxArticulationLink*, PxTransform*, PxArticulationLink*> createLink;
        /// <summary>Virtual method pointer for `getNbLinks`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, uint> getNbLinks;
        /// <summary>Virtual method pointer for `getLinks`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxArticulationLink**, uint, uint, uint> getLinks;
        /// <summary>Virtual method pointer for `setName`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, byte*, void> setName;
        /// <summary>Virtual method pointer for `getName`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, byte*> getName;
        /// <summary>Virtual method pointer for `getWorldBounds`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, out PxBounds3, float, void> getWorldBounds;
        /// <summary>Virtual method pointer for `getAggregate`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxAggregate*> getAggregate;
        /// <summary>Virtual method pointer for `getImpl`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxArticulationImpl*> getImpl_0;
        /// <summary>Virtual method pointer for `getImpl`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxArticulationImpl*> getImpl_1;
        /// <summary>Virtual method pointer for `createArticulationJoint`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxArticulationLink*, PxTransform*, PxArticulationLink*, PxTransform*, PxArticulationJointBase*> createArticulationJoint;
        /// <summary>Virtual method pointer for `releaseArticulationJoint`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxArticulationJointBase*, void> releaseArticulationJoint;
        /// <summary>Virtual method pointer for `setMaxProjectionIterations`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, uint, void> setMaxProjectionIterations;
        /// <summary>Virtual method pointer for `getMaxProjectionIterations`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, uint> getMaxProjectionIterations;
        /// <summary>Virtual method pointer for `setSeparationTolerance`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, float, void> setSeparationTolerance;
        /// <summary>Virtual method pointer for `getSeparationTolerance`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, float> getSeparationTolerance;
        /// <summary>Virtual method pointer for `setInternalDriveIterations`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, uint, void> setInternalDriveIterations;
        /// <summary>Virtual method pointer for `getInternalDriveIterations`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, uint> getInternalDriveIterations;
        /// <summary>Virtual method pointer for `setExternalDriveIterations`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, uint, void> setExternalDriveIterations;
        /// <summary>Virtual method pointer for `getExternalDriveIterations`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, uint> getExternalDriveIterations;
        /// <summary>Virtual method pointer for `createDriveCache`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, float, uint, PxArticulationDriveCache*> createDriveCache;
        /// <summary>Virtual method pointer for `updateDriveCache`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, PxArticulationDriveCache*, float, uint, void> updateDriveCache;
        /// <summary>Virtual method pointer for `releaseDriveCache`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, PxArticulationDriveCache*, void> releaseDriveCache;
        /// <summary>Virtual method pointer for `applyImpulse`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, PxArticulationLink*, PxArticulationDriveCache*, PxVec3*, PxVec3*, void> applyImpulse;
        /// <summary>Virtual method pointer for `computeImpulseResponse`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulation*, PxArticulationLink*, PxVec3*, PxVec3*, PxArticulationDriveCache*, PxVec3*, PxVec3*, void> computeImpulseResponse;
    }
}
