// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct PxBatchQuery
{
    public unsafe void execute()
    {
        fixed (PxBatchQuery* @this = &this)
        { VirtualMethodTablePointer->execute(@this); }
    }

    public unsafe /* Failed to emit TranslatedFunction getPreFilterShader: Failed to resolve `Ref resolved by PxFlags` during emit time. */
    delegate* unmanaged[Cdecl]<PxFilterData, PxFilterData, void*, uint, int*, PxQueryHitType>* getPreFilterShader()
    {
        fixed (PxBatchQuery* @this = &this)
        { return VirtualMethodTablePointer->getPreFilterShader(@this); }
    }

    public unsafe delegate* unmanaged[Cdecl]<PxFilterData, PxFilterData, void*, uint, PxQueryHit*, PxQueryHitType>* getPostFilterShader()
    {
        fixed (PxBatchQuery* @this = &this)
        { return VirtualMethodTablePointer->getPostFilterShader(@this); }
    }

    public unsafe void* getFilterShaderData()
    {
        fixed (PxBatchQuery* @this = &this)
        { return VirtualMethodTablePointer->getFilterShaderData(@this); }
    }

    public unsafe uint getFilterShaderDataSize()
    {
        fixed (PxBatchQuery* @this = &this)
        { return VirtualMethodTablePointer->getFilterShaderDataSize(@this); }
    }

    public unsafe void setUserMemory(PxBatchQueryMemory* __UNICODE_003C____UNICODE_003E__UnnamedTranslatedParameter)
    {
        fixed (PxBatchQuery* @this = &this)
        { VirtualMethodTablePointer->setUserMemory(@this, __UNICODE_003C____UNICODE_003E__UnnamedTranslatedParameter); }
    }

    public unsafe PxBatchQueryMemory* getUserMemory()
    {
        fixed (PxBatchQuery* @this = &this)
        { return VirtualMethodTablePointer->getUserMemory(@this); }
    }

    public unsafe void release()
    {
        fixed (PxBatchQuery* @this = &this)
        { VirtualMethodTablePointer->release(@this); }
    }

    public unsafe void raycast(PxVec3* origin, PxVec3* unitDir, float distance, ushort maxTouchHits, PxHitFlags hitFlags, PxQueryFilterData* filterData, void* userData = null, PxQueryCache* cache = null)
    {
        fixed (PxBatchQuery* @this = &this)
        { VirtualMethodTablePointer->raycast(@this, origin, unitDir, distance, maxTouchHits, hitFlags, filterData, userData, cache); }
    }

    public unsafe void overlap(PxGeometry* geometry, PxTransform* pose, ushort maxTouchHits, PxQueryFilterData* filterData, void* userData = null, PxQueryCache* cache = null)
    {
        fixed (PxBatchQuery* @this = &this)
        { VirtualMethodTablePointer->overlap(@this, geometry, pose, maxTouchHits, filterData, userData, cache); }
    }

    public unsafe void sweep(PxGeometry* geometry, PxTransform* pose, PxVec3* unitDir, float distance, ushort maxTouchHits, PxHitFlags hitFlags, PxQueryFilterData* filterData, void* userData = null, PxQueryCache* cache = null, float inflation = 0f)
    {
        fixed (PxBatchQuery* @this = &this)
        { VirtualMethodTablePointer->sweep(@this, geometry, pose, unitDir, distance, maxTouchHits, hitFlags, filterData, userData, cache, inflation); }
    }

    public unsafe void Destructor()
    {
        fixed (PxBatchQuery* @this = &this)
        { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
    }


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `execute`</summary>
        public delegate* unmanaged[Cdecl]<PxBatchQuery*, void> execute;
        /// <summary>Virtual method pointer for `getPreFilterShader`</summary>
        public /* Failed to emit TranslatedVTableEntry getPreFilterShader: Failed to resolve `Ref resolved by PxFlags` during emit time. */
        delegate* unmanaged[Cdecl]<PxBatchQuery*, delegate* unmanaged[Cdecl]<PxFilterData, PxFilterData, void*, uint, int*, PxQueryHitType>*> getPreFilterShader;
        /// <summary>Virtual method pointer for `getPostFilterShader`</summary>
        public delegate* unmanaged[Cdecl]<PxBatchQuery*, delegate* unmanaged[Cdecl]<PxFilterData, PxFilterData, void*, uint, PxQueryHit*, PxQueryHitType>*> getPostFilterShader;
        /// <summary>Virtual method pointer for `getFilterShaderData`</summary>
        public delegate* unmanaged[Cdecl]<PxBatchQuery*, void*> getFilterShaderData;
        /// <summary>Virtual method pointer for `getFilterShaderDataSize`</summary>
        public delegate* unmanaged[Cdecl]<PxBatchQuery*, uint> getFilterShaderDataSize;
        /// <summary>Virtual method pointer for `setUserMemory`</summary>
        public delegate* unmanaged[Cdecl]<PxBatchQuery*, PxBatchQueryMemory*, void> setUserMemory;
        /// <summary>Virtual method pointer for `getUserMemory`</summary>
        public delegate* unmanaged[Cdecl]<PxBatchQuery*, PxBatchQueryMemory*> getUserMemory;
        /// <summary>Virtual method pointer for `release`</summary>
        public delegate* unmanaged[Cdecl]<PxBatchQuery*, void> release;
        /// <summary>Virtual method pointer for `raycast`</summary>
        public delegate* unmanaged[Cdecl]<PxBatchQuery*, PxVec3*, PxVec3*, float, ushort, PxHitFlags, PxQueryFilterData*, void*, PxQueryCache*, void> raycast;
        /// <summary>Virtual method pointer for `overlap`</summary>
        public delegate* unmanaged[Cdecl]<PxBatchQuery*, PxGeometry*, PxTransform*, ushort, PxQueryFilterData*, void*, PxQueryCache*, void> overlap;
        /// <summary>Virtual method pointer for `sweep`</summary>
        public delegate* unmanaged[Cdecl]<PxBatchQuery*, PxGeometry*, PxTransform*, PxVec3*, float, ushort, PxHitFlags, PxQueryFilterData*, void*, PxQueryCache*, float, void> sweep;
        /// <summary>Virtual method pointer for `~PxBatchQuery`</summary>
        public delegate* unmanaged[Cdecl]<PxBatchQuery*, void> __DeletingDestructorPointer;
    }
}
