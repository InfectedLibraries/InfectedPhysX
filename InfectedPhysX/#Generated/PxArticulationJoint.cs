// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public unsafe partial struct PxArticulationJoint
    {
        [FieldOffset(0)] public PxArticulationJointBase Base;

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setTargetOrientation(PxQuat* orientation)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setTargetOrientation(@this, orientation); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe PxQuat getTargetOrientation()
        {
            fixed (PxArticulationJoint* @this = &this)
            {
                PxQuat __returnBuffer;
                VirtualMethodTablePointer->getTargetOrientation(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setTargetVelocity(PxVec3* velocity)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setTargetVelocity(@this, velocity); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe PxVec3 getTargetVelocity()
        {
            fixed (PxArticulationJoint* @this = &this)
            {
                PxVec3 __returnBuffer;
                VirtualMethodTablePointer->getTargetVelocity(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setDriveType(PxArticulationJointDriveType driveType)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setDriveType(@this, driveType); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe PxArticulationJointDriveType getDriveType()
        {
            fixed (PxArticulationJoint* @this = &this)
            { return VirtualMethodTablePointer->getDriveType(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setStiffness(float spring)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setStiffness(@this, spring); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe float getStiffness()
        {
            fixed (PxArticulationJoint* @this = &this)
            { return VirtualMethodTablePointer->getStiffness(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setDamping(float damping)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setDamping(@this, damping); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe float getDamping()
        {
            fixed (PxArticulationJoint* @this = &this)
            { return VirtualMethodTablePointer->getDamping(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setInternalCompliance(float compliance)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setInternalCompliance(@this, compliance); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe float getInternalCompliance()
        {
            fixed (PxArticulationJoint* @this = &this)
            { return VirtualMethodTablePointer->getInternalCompliance(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setExternalCompliance(float compliance)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setExternalCompliance(@this, compliance); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe float getExternalCompliance()
        {
            fixed (PxArticulationJoint* @this = &this)
            { return VirtualMethodTablePointer->getExternalCompliance(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setSwingLimit(float zLimit, float yLimit)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setSwingLimit(@this, zLimit, yLimit); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void getSwingLimit(float* zLimit, float* yLimit)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->getSwingLimit(@this, zLimit, yLimit); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setTangentialStiffness(float spring)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setTangentialStiffness(@this, spring); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe float getTangentialStiffness()
        {
            fixed (PxArticulationJoint* @this = &this)
            { return VirtualMethodTablePointer->getTangentialStiffness(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setTangentialDamping(float damping)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setTangentialDamping(@this, damping); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe float getTangentialDamping()
        {
            fixed (PxArticulationJoint* @this = &this)
            { return VirtualMethodTablePointer->getTangentialDamping(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setSwingLimitContactDistance(float contactDistance)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setSwingLimitContactDistance(@this, contactDistance); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe float getSwingLimitContactDistance()
        {
            fixed (PxArticulationJoint* @this = &this)
            { return VirtualMethodTablePointer->getSwingLimitContactDistance(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setSwingLimitEnabled(bool enabled)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setSwingLimitEnabled(@this, enabled); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe bool getSwingLimitEnabled()
        {
            fixed (PxArticulationJoint* @this = &this)
            { return VirtualMethodTablePointer->getSwingLimitEnabled(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setTwistLimit(float lower, float upper)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setTwistLimit(@this, lower, upper); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void getTwistLimit(float* lower, float* upper)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->getTwistLimit(@this, lower, upper); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setTwistLimitEnabled(bool enabled)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setTwistLimitEnabled(@this, enabled); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe bool getTwistLimitEnabled()
        {
            fixed (PxArticulationJoint* @this = &this)
            { return VirtualMethodTablePointer->getTwistLimitEnabled(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void setTwistLimitContactDistance(float contactDistance)
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->setTwistLimitContactDistance(@this, contactDistance); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe float getTwistLimitContactDistance()
        {
            fixed (PxArticulationJoint* @this = &this)
            { return VirtualMethodTablePointer->getTwistLimitContactDistance(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe byte* getConcreteTypeName()
        {
            fixed (PxArticulationJoint* @this = &this)
            { return VirtualMethodTablePointer->getConcreteTypeName(@this); }
        }

        [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxArticulationJoint@physx@@IEAA@GV?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(PxArticulationJoint* @this, ushort concreteType, PxBaseFlags baseFlags);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void Constructor(ushort concreteType, PxBaseFlags baseFlags)
        {
            fixed (PxArticulationJoint* @this = &this)
            { Constructor_PInvoke(@this, concreteType, baseFlags); }
        }

        [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxArticulationJoint@physx@@IEAA@V?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(PxArticulationJoint* @this, PxBaseFlags baseFlags);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void Constructor(PxBaseFlags baseFlags)
        {
            fixed (PxArticulationJoint* @this = &this)
            { Constructor_PInvoke(@this, baseFlags); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void Destructor()
        {
            fixed (PxArticulationJoint* @this = &this)
            { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe bool isKindOf(byte* name)
        {
            fixed (PxArticulationJoint* @this = &this)
            { return VirtualMethodTablePointer->isKindOf(@this, name); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxBase*, void> release;
            /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, byte*> getConcreteTypeName;
            /// <summary>Virtual method pointer for `isReleasable`</summary>
            public delegate* unmanaged[Cdecl]<PxBase*, NativeBoolean> isReleasable;
            /// <summary>Virtual method pointer for `~PxArticulationJoint`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, void> __DeletingDestructorPointer;
            /// <summary>Virtual method pointer for `isKindOf`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, byte*, NativeBoolean> isKindOf;
            /// <summary>Virtual method pointer for `getParentArticulationLink`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, PxArticulationLink*> getParentArticulationLink;
            /// <summary>Virtual method pointer for `setParentPose`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, PxTransform*, void> setParentPose;
            /// <summary>Virtual method pointer for `getParentPose`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, PxTransform*, PxTransform*> getParentPose;
            /// <summary>Virtual method pointer for `getChildArticulationLink`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, PxArticulationLink*> getChildArticulationLink;
            /// <summary>Virtual method pointer for `setChildPose`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, PxTransform*, void> setChildPose;
            /// <summary>Virtual method pointer for `getChildPose`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, PxTransform*, PxTransform*> getChildPose;
            /// <summary>Virtual method pointer for `getImpl`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, PxArticulationJointImpl*> getImpl_0;
            /// <summary>Virtual method pointer for `getImpl`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, PxArticulationJointImpl*> getImpl_1;
            /// <summary>Virtual method pointer for `setTargetOrientation`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, PxQuat*, void> setTargetOrientation;
            /// <summary>Virtual method pointer for `getTargetOrientation`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, PxQuat*, PxQuat*> getTargetOrientation;
            /// <summary>Virtual method pointer for `setTargetVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, PxVec3*, void> setTargetVelocity;
            /// <summary>Virtual method pointer for `getTargetVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, PxVec3*, PxVec3*> getTargetVelocity;
            /// <summary>Virtual method pointer for `setDriveType`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, PxArticulationJointDriveType, void> setDriveType;
            /// <summary>Virtual method pointer for `getDriveType`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, PxArticulationJointDriveType> getDriveType;
            /// <summary>Virtual method pointer for `setStiffness`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float, void> setStiffness;
            /// <summary>Virtual method pointer for `getStiffness`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float> getStiffness;
            /// <summary>Virtual method pointer for `setDamping`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float, void> setDamping;
            /// <summary>Virtual method pointer for `getDamping`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float> getDamping;
            /// <summary>Virtual method pointer for `setInternalCompliance`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float, void> setInternalCompliance;
            /// <summary>Virtual method pointer for `getInternalCompliance`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float> getInternalCompliance;
            /// <summary>Virtual method pointer for `setExternalCompliance`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float, void> setExternalCompliance;
            /// <summary>Virtual method pointer for `getExternalCompliance`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float> getExternalCompliance;
            /// <summary>Virtual method pointer for `setSwingLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float, float, void> setSwingLimit;
            /// <summary>Virtual method pointer for `getSwingLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float*, float*, void> getSwingLimit;
            /// <summary>Virtual method pointer for `setTangentialStiffness`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float, void> setTangentialStiffness;
            /// <summary>Virtual method pointer for `getTangentialStiffness`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float> getTangentialStiffness;
            /// <summary>Virtual method pointer for `setTangentialDamping`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float, void> setTangentialDamping;
            /// <summary>Virtual method pointer for `getTangentialDamping`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float> getTangentialDamping;
            /// <summary>Virtual method pointer for `setSwingLimitContactDistance`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float, void> setSwingLimitContactDistance;
            /// <summary>Virtual method pointer for `getSwingLimitContactDistance`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float> getSwingLimitContactDistance;
            /// <summary>Virtual method pointer for `setSwingLimitEnabled`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, NativeBoolean, void> setSwingLimitEnabled;
            /// <summary>Virtual method pointer for `getSwingLimitEnabled`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, NativeBoolean> getSwingLimitEnabled;
            /// <summary>Virtual method pointer for `setTwistLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float, float, void> setTwistLimit;
            /// <summary>Virtual method pointer for `getTwistLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float*, float*, void> getTwistLimit;
            /// <summary>Virtual method pointer for `setTwistLimitEnabled`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, NativeBoolean, void> setTwistLimitEnabled;
            /// <summary>Virtual method pointer for `getTwistLimitEnabled`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, NativeBoolean> getTwistLimitEnabled;
            /// <summary>Virtual method pointer for `setTwistLimitContactDistance`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float, void> setTwistLimitContactDistance;
            /// <summary>Virtual method pointer for `getTwistLimitContactDistance`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulationJoint*, float> getTwistLimitContactDistance;
        }
    }
}
