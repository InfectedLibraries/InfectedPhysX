// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 16)]
public unsafe partial struct PxBVH33TriangleMesh
{
    [FieldOffset(0)] public PxTriangleMesh Base;

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxBVH33TriangleMesh@physx@@IEAA@GV?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxBVH33TriangleMesh* @this, ushort concreteType, PxBaseFlags baseFlags);

    public unsafe void Constructor(ushort concreteType, PxBaseFlags baseFlags)
    {
        fixed (PxBVH33TriangleMesh* @this = &this)
        { Constructor_PInvoke(@this, concreteType, baseFlags); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxBVH33TriangleMesh@physx@@IEAA@V?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxBVH33TriangleMesh* @this, PxBaseFlags baseFlags);

    public unsafe void Constructor(PxBaseFlags baseFlags)
    {
        fixed (PxBVH33TriangleMesh* @this = &this)
        { Constructor_PInvoke(@this, baseFlags); }
    }

    public unsafe void Destructor()
    {
        fixed (PxBVH33TriangleMesh* @this = &this)
        { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
    }

    public unsafe bool isKindOf(byte* name)
    {
        fixed (PxBVH33TriangleMesh* @this = &this)
        { return VirtualMethodTablePointer->isKindOf(@this, name); }
    }


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `release`</summary>
        public delegate* unmanaged[Cdecl]<PxTriangleMesh*, void> release;
        /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, byte*> getConcreteTypeName;
        /// <summary>Virtual method pointer for `isReleasable`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, bool> isReleasable;
        /// <summary>Virtual method pointer for `~PxBVH33TriangleMesh`</summary>
        public delegate* unmanaged[Cdecl]<PxBVH33TriangleMesh*, void> __DeletingDestructorPointer;
        /// <summary>Virtual method pointer for `isKindOf`</summary>
        public delegate* unmanaged[Cdecl]<PxBVH33TriangleMesh*, byte*, bool> isKindOf;
        /// <summary>Virtual method pointer for `getNbVertices`</summary>
        public delegate* unmanaged[Cdecl]<PxTriangleMesh*, uint> getNbVertices;
        /// <summary>Virtual method pointer for `getVertices`</summary>
        public delegate* unmanaged[Cdecl]<PxTriangleMesh*, PxVec3*> getVertices;
        /// <summary>Virtual method pointer for `getVerticesForModification`</summary>
        public delegate* unmanaged[Cdecl]<PxTriangleMesh*, PxVec3*> getVerticesForModification;
        /// <summary>Virtual method pointer for `refitBVH`</summary>
        public delegate* unmanaged[Cdecl]<PxTriangleMesh*, out PxBounds3, void> refitBVH;
        /// <summary>Virtual method pointer for `getNbTriangles`</summary>
        public delegate* unmanaged[Cdecl]<PxTriangleMesh*, uint> getNbTriangles;
        /// <summary>Virtual method pointer for `getTriangles`</summary>
        public delegate* unmanaged[Cdecl]<PxTriangleMesh*, void*> getTriangles;
        /// <summary>Virtual method pointer for `getTriangleMeshFlags`</summary>
        public delegate* unmanaged[Cdecl]<PxTriangleMesh*, PxTriangleMeshFlags> getTriangleMeshFlags;
        /// <summary>Virtual method pointer for `getTrianglesRemap`</summary>
        public delegate* unmanaged[Cdecl]<PxTriangleMesh*, uint*> getTrianglesRemap;
        /// <summary>Virtual method pointer for `getTriangleMaterialIndex`</summary>
        public delegate* unmanaged[Cdecl]<PxTriangleMesh*, uint, ushort> getTriangleMaterialIndex;
        /// <summary>Virtual method pointer for `getLocalBounds`</summary>
        public delegate* unmanaged[Cdecl]<PxTriangleMesh*, out PxBounds3, void> getLocalBounds;
        /// <summary>Virtual method pointer for `getReferenceCount`</summary>
        public delegate* unmanaged[Cdecl]<PxTriangleMesh*, uint> getReferenceCount;
        /// <summary>Virtual method pointer for `acquireReference`</summary>
        public delegate* unmanaged[Cdecl]<PxTriangleMesh*, void> acquireReference;
    }
}
