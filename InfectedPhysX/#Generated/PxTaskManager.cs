// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct PxTaskManager
{
    public unsafe void setCpuDispatcher(PxCpuDispatcher* @ref)
    {
        fixed (PxTaskManager* @this = &this)
        { VirtualMethodTablePointer->setCpuDispatcher(@this, @ref); }
    }

    public unsafe PxCpuDispatcher* getCpuDispatcher()
    {
        fixed (PxTaskManager* @this = &this)
        { return VirtualMethodTablePointer->getCpuDispatcher(@this); }
    }

    public unsafe void resetDependencies()
    {
        fixed (PxTaskManager* @this = &this)
        { VirtualMethodTablePointer->resetDependencies(@this); }
    }

    public unsafe void startSimulation()
    {
        fixed (PxTaskManager* @this = &this)
        { VirtualMethodTablePointer->startSimulation(@this); }
    }

    public unsafe void stopSimulation()
    {
        fixed (PxTaskManager* @this = &this)
        { VirtualMethodTablePointer->stopSimulation(@this); }
    }

    public unsafe void taskCompleted(PxTask* task)
    {
        fixed (PxTaskManager* @this = &this)
        { VirtualMethodTablePointer->taskCompleted(@this, task); }
    }

    public unsafe uint getNamedTask(byte* name)
    {
        fixed (PxTaskManager* @this = &this)
        { return VirtualMethodTablePointer->getNamedTask(@this, name); }
    }

    public unsafe uint submitNamedTask(PxTask* task, byte* name, PxTaskType type = PxTaskType.TT_CPU)
    {
        fixed (PxTaskManager* @this = &this)
        { return VirtualMethodTablePointer->submitNamedTask(@this, task, name, type); }
    }

    public unsafe uint submitUnnamedTask(PxTask* task, PxTaskType type = PxTaskType.TT_CPU)
    {
        fixed (PxTaskManager* @this = &this)
        { return VirtualMethodTablePointer->submitUnnamedTask(@this, task, type); }
    }

    public unsafe PxTask* getTaskFromID(uint id)
    {
        fixed (PxTaskManager* @this = &this)
        { return VirtualMethodTablePointer->getTaskFromID(@this, id); }
    }

    public unsafe void release()
    {
        fixed (PxTaskManager* @this = &this)
        { VirtualMethodTablePointer->release(@this); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?createTaskManager@PxTaskManager@physx@@SAPEAV12@AEAVPxErrorCallback@2@PEAVPxCpuDispatcher@2@@Z", ExactSpelling = true)]
    public static extern PxTaskManager* createTaskManager(PxErrorCallback* errorCallback, PxCpuDispatcher* __UNICODE_003C____UNICODE_003E__UnnamedTranslatedParameter = null);

    public unsafe void Destructor()
    {
        fixed (PxTaskManager* @this = &this)
        { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
    }

    public unsafe void finishBefore(PxTask* task, uint taskID)
    {
        fixed (PxTaskManager* @this = &this)
        { VirtualMethodTablePointer->finishBefore(@this, task, taskID); }
    }

    public unsafe void startAfter(PxTask* task, uint taskID)
    {
        fixed (PxTaskManager* @this = &this)
        { VirtualMethodTablePointer->startAfter(@this, task, taskID); }
    }

    public unsafe void addReference(uint taskID)
    {
        fixed (PxTaskManager* @this = &this)
        { VirtualMethodTablePointer->addReference_1(@this, taskID); }
    }

    public unsafe void decrReference(uint taskID)
    {
        fixed (PxTaskManager* @this = &this)
        { VirtualMethodTablePointer->decrReference_1(@this, taskID); }
    }

    public unsafe int getReference(uint taskID)
    {
        fixed (PxTaskManager* @this = &this)
        { return VirtualMethodTablePointer->getReference(@this, taskID); }
    }

    public unsafe void decrReference(PxLightCpuTask* __UNICODE_003C____UNICODE_003E__UnnamedTranslatedParameter)
    {
        fixed (PxTaskManager* @this = &this)
        { VirtualMethodTablePointer->decrReference_0(@this, __UNICODE_003C____UNICODE_003E__UnnamedTranslatedParameter); }
    }

    public unsafe void addReference(PxLightCpuTask* __UNICODE_003C____UNICODE_003E__UnnamedTranslatedParameter)
    {
        fixed (PxTaskManager* @this = &this)
        { VirtualMethodTablePointer->addReference_0(@this, __UNICODE_003C____UNICODE_003E__UnnamedTranslatedParameter); }
    }


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `setCpuDispatcher`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, PxCpuDispatcher*, void> setCpuDispatcher;
        /// <summary>Virtual method pointer for `getCpuDispatcher`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, PxCpuDispatcher*> getCpuDispatcher;
        /// <summary>Virtual method pointer for `resetDependencies`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, void> resetDependencies;
        /// <summary>Virtual method pointer for `startSimulation`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, void> startSimulation;
        /// <summary>Virtual method pointer for `stopSimulation`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, void> stopSimulation;
        /// <summary>Virtual method pointer for `taskCompleted`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, PxTask*, void> taskCompleted;
        /// <summary>Virtual method pointer for `getNamedTask`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, byte*, uint> getNamedTask;
        /// <summary>Virtual method pointer for `submitNamedTask`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, PxTask*, byte*, PxTaskType, uint> submitNamedTask;
        /// <summary>Virtual method pointer for `submitUnnamedTask`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, PxTask*, PxTaskType, uint> submitUnnamedTask;
        /// <summary>Virtual method pointer for `getTaskFromID`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, uint, PxTask*> getTaskFromID;
        /// <summary>Virtual method pointer for `release`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, void> release;
        /// <summary>Virtual method pointer for `~PxTaskManager`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, void> __DeletingDestructorPointer;
        /// <summary>Virtual method pointer for `finishBefore`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, PxTask*, uint, void> finishBefore;
        /// <summary>Virtual method pointer for `startAfter`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, PxTask*, uint, void> startAfter;
        /// <summary>Virtual method pointer for `addReference`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, PxLightCpuTask*, void> addReference_0;
        /// <summary>Virtual method pointer for `addReference`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, uint, void> addReference_1;
        /// <summary>Virtual method pointer for `decrReference`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, PxLightCpuTask*, void> decrReference_0;
        /// <summary>Virtual method pointer for `decrReference`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, uint, void> decrReference_1;
        /// <summary>Virtual method pointer for `getReference`</summary>
        public delegate* unmanaged[Cdecl]<PxTaskManager*, uint, int> getReference;
    }
}
