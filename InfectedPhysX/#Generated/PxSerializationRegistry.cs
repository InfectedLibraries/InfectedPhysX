// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct PxSerializationRegistry
{
    public unsafe void registerSerializer(ushort type, PxSerializer* serializer)
    {
        fixed (PxSerializationRegistry* @this = &this)
        { VirtualMethodTablePointer->registerSerializer(@this, type, serializer); }
    }

    public unsafe PxSerializer* unregisterSerializer(ushort type)
    {
        fixed (PxSerializationRegistry* @this = &this)
        { return VirtualMethodTablePointer->unregisterSerializer(@this, type); }
    }

    public unsafe void registerBinaryMetaDataCallback(delegate* unmanaged[Cdecl]<PxOutputStream*, void>* callback)
    {
        fixed (PxSerializationRegistry* @this = &this)
        { VirtualMethodTablePointer->registerBinaryMetaDataCallback(@this, callback); }
    }

    public unsafe PxSerializer* getSerializer(ushort type)
    {
        fixed (PxSerializationRegistry* @this = &this)
        { return VirtualMethodTablePointer->getSerializer(@this, type); }
    }

    public unsafe void registerRepXSerializer(ushort type, PxRepXSerializer* serializer)
    {
        fixed (PxSerializationRegistry* @this = &this)
        { VirtualMethodTablePointer->registerRepXSerializer(@this, type, serializer); }
    }

    public unsafe PxRepXSerializer* unregisterRepXSerializer(ushort type)
    {
        fixed (PxSerializationRegistry* @this = &this)
        { return VirtualMethodTablePointer->unregisterRepXSerializer(@this, type); }
    }

    public unsafe PxRepXSerializer* getRepXSerializer(byte* typeName)
    {
        fixed (PxSerializationRegistry* @this = &this)
        { return VirtualMethodTablePointer->getRepXSerializer(@this, typeName); }
    }

    public unsafe void release()
    {
        fixed (PxSerializationRegistry* @this = &this)
        { VirtualMethodTablePointer->release(@this); }
    }

    public unsafe void Destructor()
    {
        fixed (PxSerializationRegistry* @this = &this)
        { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
    }


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `registerSerializer`</summary>
        public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, ushort, PxSerializer*, void> registerSerializer;
        /// <summary>Virtual method pointer for `unregisterSerializer`</summary>
        public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, ushort, PxSerializer*> unregisterSerializer;
        /// <summary>Virtual method pointer for `registerBinaryMetaDataCallback`</summary>
        public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, delegate* unmanaged[Cdecl]<PxOutputStream*, void>*, void> registerBinaryMetaDataCallback;
        /// <summary>Virtual method pointer for `getSerializer`</summary>
        public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, ushort, PxSerializer*> getSerializer;
        /// <summary>Virtual method pointer for `registerRepXSerializer`</summary>
        public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, ushort, PxRepXSerializer*, void> registerRepXSerializer;
        /// <summary>Virtual method pointer for `unregisterRepXSerializer`</summary>
        public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, ushort, PxRepXSerializer*> unregisterRepXSerializer;
        /// <summary>Virtual method pointer for `getRepXSerializer`</summary>
        public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, byte*, PxRepXSerializer*> getRepXSerializer;
        /// <summary>Virtual method pointer for `release`</summary>
        public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, void> release;
        /// <summary>Virtual method pointer for `~PxSerializationRegistry`</summary>
        public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, void> __DeletingDestructorPointer;
    }
}
