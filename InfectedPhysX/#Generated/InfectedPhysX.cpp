// This file was automatically generated by Biohazrd and should not be modified by hand!
#include "../../external/PhysX/physx/include/characterkinematic/PxBoxController.h"
#include "../../external/PhysX/physx/include/characterkinematic/PxCapsuleController.h"
#include "../../external/PhysX/physx/include/characterkinematic/PxController.h"
#include "../../external/PhysX/physx/include/characterkinematic/PxControllerManager.h"
#include "../../external/PhysX/physx/include/characterkinematic/PxControllerObstacles.h"
#include "../../external/PhysX/physx/include/characterkinematic/PxExtended.h"
#include "../../external/PhysX/physx/include/collision/PxCollisionDefs.h"
#include "../../external/PhysX/physx/include/common/PxBase.h"
#include "../../external/PhysX/physx/include/common/PxCollection.h"
#include "../../external/PhysX/physx/include/common/PxCoreUtilityTypes.h"
#include "../../external/PhysX/physx/include/common/PxRenderBuffer.h"
#include "../../external/PhysX/physx/include/common/PxSerialFramework.h"
#include "../../external/PhysX/physx/include/common/PxTolerancesScale.h"
#include "../../external/PhysX/physx/include/common/windows/PxWindowsDelayLoadHook.h"
#include "../../external/PhysX/physx/include/cooking/PxBVH33MidphaseDesc.h"
#include "../../external/PhysX/physx/include/cooking/PxBVH34MidphaseDesc.h"
#include "../../external/PhysX/physx/include/cooking/PxBVHStructureDesc.h"
#include "../../external/PhysX/physx/include/cooking/PxConvexMeshDesc.h"
#include "../../external/PhysX/physx/include/cooking/PxCooking.h"
#include "../../external/PhysX/physx/include/cooking/PxMidphaseDesc.h"
#include "../../external/PhysX/physx/include/cooking/PxTriangleMeshDesc.h"
#include "../../external/PhysX/physx/include/cudamanager/PxCudaContextManager.h"
#include "../../external/PhysX/physx/include/cudamanager/PxCudaMemoryManager.h"
#include "../../external/PhysX/physx/include/extensions/PxBroadPhaseExt.h"
#include "../../external/PhysX/physx/include/extensions/PxCollectionExt.h"
#include "../../external/PhysX/physx/include/extensions/PxContactJoint.h"
#include "../../external/PhysX/physx/include/extensions/PxConvexMeshExt.h"
#include "../../external/PhysX/physx/include/extensions/PxD6Joint.h"
#include "../../external/PhysX/physx/include/extensions/PxD6JointCreate.h"
#include "../../external/PhysX/physx/include/extensions/PxDefaultAllocator.h"
#include "../../external/PhysX/physx/include/extensions/PxDefaultCpuDispatcher.h"
#include "../../external/PhysX/physx/include/extensions/PxDefaultErrorCallback.h"
#include "../../external/PhysX/physx/include/extensions/PxDefaultSimulationFilterShader.h"
#include "../../external/PhysX/physx/include/extensions/PxDefaultStreams.h"
#include "../../external/PhysX/physx/include/extensions/PxDistanceJoint.h"
#include "../../external/PhysX/physx/include/extensions/PxExtensionsAPI.h"
#include "../../external/PhysX/physx/include/extensions/PxFixedJoint.h"
#include "../../external/PhysX/physx/include/extensions/PxJoint.h"
#include "../../external/PhysX/physx/include/extensions/PxJointLimit.h"
#include "../../external/PhysX/physx/include/extensions/PxMassProperties.h"
#include "../../external/PhysX/physx/include/extensions/PxPrismaticJoint.h"
#include "../../external/PhysX/physx/include/extensions/PxRaycastCCD.h"
#include "../../external/PhysX/physx/include/extensions/PxRepXSerializer.h"
#include "../../external/PhysX/physx/include/extensions/PxRepXSimpleType.h"
#include "../../external/PhysX/physx/include/extensions/PxRevoluteJoint.h"
#include "../../external/PhysX/physx/include/extensions/PxRigidActorExt.h"
#include "../../external/PhysX/physx/include/extensions/PxRigidBodyExt.h"
#include "../../external/PhysX/physx/include/extensions/PxSceneQueryExt.h"
#include "../../external/PhysX/physx/include/extensions/PxSerialization.h"
#include "../../external/PhysX/physx/include/extensions/PxShapeExt.h"
#include "../../external/PhysX/physx/include/extensions/PxSimpleFactory.h"
#include "../../external/PhysX/physx/include/extensions/PxSmoothNormals.h"
#include "../../external/PhysX/physx/include/extensions/PxSphericalJoint.h"
#include "../../external/PhysX/physx/include/extensions/PxStringTableExt.h"
#include "../../external/PhysX/physx/include/extensions/PxTriangleMeshExt.h"
#include "../../external/PhysX/physx/include/filebuf/PxFileBuf.h"
#include "../../external/PhysX/physx/include/foundation/PxAssert.h"
#include "../../external/PhysX/physx/include/foundation/PxMathUtils.h"
#include "../../external/PhysX/physx/include/geometry/PxBoxGeometry.h"
#include "../../external/PhysX/physx/include/geometry/PxCapsuleGeometry.h"
#include "../../external/PhysX/physx/include/geometry/PxConvexMeshGeometry.h"
#include "../../external/PhysX/physx/include/geometry/PxGeometry.h"
#include "../../external/PhysX/physx/include/geometry/PxGeometryHelpers.h"
#include "../../external/PhysX/physx/include/geometry/PxGeometryQuery.h"
#include "../../external/PhysX/physx/include/geometry/PxHeightFieldDesc.h"
#include "../../external/PhysX/physx/include/geometry/PxHeightFieldGeometry.h"
#include "../../external/PhysX/physx/include/geometry/PxHeightFieldSample.h"
#include "../../external/PhysX/physx/include/geometry/PxMeshQuery.h"
#include "../../external/PhysX/physx/include/geometry/PxMeshScale.h"
#include "../../external/PhysX/physx/include/geometry/PxPlaneGeometry.h"
#include "../../external/PhysX/physx/include/geometry/PxSimpleTriangleMesh.h"
#include "../../external/PhysX/physx/include/geometry/PxSphereGeometry.h"
#include "../../external/PhysX/physx/include/geometry/PxTriangle.h"
#include "../../external/PhysX/physx/include/geometry/PxTriangleMeshGeometry.h"
#include "../../external/PhysX/physx/include/geomutils/GuContactBuffer.h"
#include "../../external/PhysX/physx/include/gpu/PxGpu.h"
#include "../../external/PhysX/physx/include/pvd/PxPvd.h"
#include "../../external/PhysX/physx/include/pvd/PxPvdTransport.h"
#include "../../external/PhysX/physx/include/PxArticulationReducedCoordinate.h"
#include "../../external/PhysX/physx/include/PxBatchQueryDesc.h"
#include "../../external/PhysX/physx/include/PxConstraintDesc.h"
#include "../../external/PhysX/physx/include/PxContact.h"
#include "../../external/PhysX/physx/include/PxContactModifyCallback.h"
#include "../../external/PhysX/physx/include/PxFiltering.h"
#include "../../external/PhysX/physx/include/PxFoundation.h"
#include "../../external/PhysX/physx/include/PxImmediateMode.h"
#include "../../external/PhysX/physx/include/PxPhysics.h"
#include "../../external/PhysX/physx/include/PxPhysicsSerialization.h"
#include "../../external/PhysX/physx/include/PxQueryFiltering.h"
#include "../../external/PhysX/physx/include/PxQueryReport.h"
#include "../../external/PhysX/physx/include/PxScene.h"
#include "../../external/PhysX/physx/include/PxSceneDesc.h"
#include "../../external/PhysX/physx/include/PxSceneLock.h"
#include "../../external/PhysX/physx/include/PxSimulationEventCallback.h"
#include "../../external/PhysX/physx/include/PxSimulationStatistics.h"
#include "../../external/PhysX/physx/include/solver/PxSolverDefs.h"
#include "../../external/PhysX/physx/include/task/PxTask.h"
#include "../../external/PhysX/physx/include/task/PxTaskManager.h"
#include "../../external/PhysX/physx/include/vehicle/PxVehicleComponents.h"
#include "../../external/PhysX/physx/include/vehicle/PxVehicleDrive.h"
#include "../../external/PhysX/physx/include/vehicle/PxVehicleDrive4W.h"
#include "../../external/PhysX/physx/include/vehicle/PxVehicleDriveNW.h"
#include "../../external/PhysX/physx/include/vehicle/PxVehicleDriveTank.h"
#include "../../external/PhysX/physx/include/vehicle/PxVehicleNoDrive.h"
#include "../../external/PhysX/physx/include/vehicle/PxVehicleSDK.h"
#include "../../external/PhysX/physx/include/vehicle/PxVehicleTireFriction.h"
#include "../../external/PhysX/physx/include/vehicle/PxVehicleUpdate.h"
#include "../../external/PhysX/physx/include/vehicle/PxVehicleUtil.h"
#include "../../external/PhysX/physx/include/vehicle/PxVehicleUtilControl.h"
#include "../../external/PhysX/physx/include/vehicle/PxVehicleUtilSetup.h"
#include "../../external/PhysX/physx/include/vehicle/PxVehicleUtilTelemetry.h"
#include "../../external/PhysX/physx/include/vehicle/PxVehicleWheels.h"
#include "../../external/PhysX/pxshared/include/foundation/PxBounds3.h"
#include "../../external/PhysX/pxshared/include/foundation/PxMat33.h"
#include "../../external/PhysX/pxshared/include/foundation/PxMat44.h"
#include "../../external/PhysX/pxshared/include/foundation/PxMath.h"
#include "../../external/PhysX/pxshared/include/foundation/PxMemory.h"
#include "../../external/PhysX/pxshared/include/foundation/PxPlane.h"
#include "../../external/PhysX/pxshared/include/foundation/PxProfiler.h"
#include "../../external/PhysX/pxshared/include/foundation/PxQuat.h"
#include "../../external/PhysX/pxshared/include/foundation/PxTransform.h"
#include "../../external/PhysX/pxshared/include/foundation/PxVec2.h"
#include "../../external/PhysX/pxshared/include/foundation/PxVec3.h"
#include "../../external/PhysX/pxshared/include/foundation/PxVec4.h"
#include "../../external/PhysX/pxshared/include/foundation/windows/PxWindowsIntrinsics.h"

void __PxVec3__ctor(void* _this) { new (_this) physx::PxVec3(); }
void __PxVec3__ctor(void* _this, physx::PxZERO _0) { new (_this) physx::PxVec3(_0); }
void __PxVec3__ctor(void* _this, float _0) { new (_this) physx::PxVec3(_0); }
void __PxVec3__ctor(void* _this, float _0, float _1, float _2) { new (_this) physx::PxVec3(_0, _1, _2); }
void __PxVec3__ctor(void* _this, const physx::PxVec3 & _0) { new (_this) physx::PxVec3(_0); }
physx::PxVec3 & (physx::PxVec3::* unused0)(const physx::PxVec3 &) = &physx::PxVec3::operator=;
float & (physx::PxVec3::* unused1)(unsigned int) = &physx::PxVec3::operator[];
const float & (physx::PxVec3::* unused2)(unsigned int) const = &physx::PxVec3::operator[];
bool (physx::PxVec3::* unused3)(const physx::PxVec3 &) const = &physx::PxVec3::operator==;
bool (physx::PxVec3::* unused4)(const physx::PxVec3 &) const = &physx::PxVec3::operator!=;
bool (physx::PxVec3::* unused5)() const = &physx::PxVec3::isZero;
bool (physx::PxVec3::* unused6)() const = &physx::PxVec3::isFinite;
bool (physx::PxVec3::* unused7)() const = &physx::PxVec3::isNormalized;
float (physx::PxVec3::* unused8)() const = &physx::PxVec3::magnitudeSquared;
float (physx::PxVec3::* unused9)() const = &physx::PxVec3::magnitude;
physx::PxVec3 (physx::PxVec3::* unused10)() const = &physx::PxVec3::operator-;
physx::PxVec3 (physx::PxVec3::* unused11)(const physx::PxVec3 &) const = &physx::PxVec3::operator+;
physx::PxVec3 (physx::PxVec3::* unused12)(const physx::PxVec3 &) const = &physx::PxVec3::operator-;
physx::PxVec3 (physx::PxVec3::* unused13)(float) const = &physx::PxVec3::operator*;
physx::PxVec3 (physx::PxVec3::* unused14)(float) const = &physx::PxVec3::operator/;
physx::PxVec3 & (physx::PxVec3::* unused15)(const physx::PxVec3 &) = &physx::PxVec3::operator+=;
physx::PxVec3 & (physx::PxVec3::* unused16)(const physx::PxVec3 &) = &physx::PxVec3::operator-=;
physx::PxVec3 & (physx::PxVec3::* unused17)(float) = &physx::PxVec3::operator*=;
physx::PxVec3 & (physx::PxVec3::* unused18)(float) = &physx::PxVec3::operator/=;
float (physx::PxVec3::* unused19)(const physx::PxVec3 &) const = &physx::PxVec3::dot;
physx::PxVec3 (physx::PxVec3::* unused20)(const physx::PxVec3 &) const = &physx::PxVec3::cross;
physx::PxVec3 (physx::PxVec3::* unused21)() const = &physx::PxVec3::getNormalized;
float (physx::PxVec3::* unused22)() = &physx::PxVec3::normalize;
float (physx::PxVec3::* unused23)() = &physx::PxVec3::normalizeSafe;
float (physx::PxVec3::* unused24)() = &physx::PxVec3::normalizeFast;
physx::PxVec3 (physx::PxVec3::* unused25)(const physx::PxVec3 &) const = &physx::PxVec3::multiply;
physx::PxVec3 (physx::PxVec3::* unused26)(const physx::PxVec3 &) const = &physx::PxVec3::minimum;
float (physx::PxVec3::* unused27)() const = &physx::PxVec3::minElement;
physx::PxVec3 (physx::PxVec3::* unused28)(const physx::PxVec3 &) const = &physx::PxVec3::maximum;
float (physx::PxVec3::* unused29)() const = &physx::PxVec3::maxElement;
physx::PxVec3 (physx::PxVec3::* unused30)() const = &physx::PxVec3::abs;
void __PxQuat__ctor(void* _this) { new (_this) physx::PxQuat(); }
void __PxQuat__ctor(void* _this, physx::PxIDENTITY _0) { new (_this) physx::PxQuat(_0); }
void __PxQuat__ctor(void* _this, float _0) { new (_this) physx::PxQuat(_0); }
void __PxQuat__ctor(void* _this, float _0, float _1, float _2, float _3) { new (_this) physx::PxQuat(_0, _1, _2, _3); }
void __PxQuat__ctor(void* _this, float _0, const physx::PxVec3 & _1) { new (_this) physx::PxQuat(_0, _1); }
void __PxQuat__ctor(void* _this, const physx::PxQuat & _0) { new (_this) physx::PxQuat(_0); }
void __PxQuat__ctor(void* _this, const physx::PxMat33 & _0) { new (_this) physx::PxQuat(_0); }
bool (physx::PxQuat::* unused31)() const = &physx::PxQuat::isIdentity;
bool (physx::PxQuat::* unused32)() const = &physx::PxQuat::isFinite;
bool (physx::PxQuat::* unused33)() const = &physx::PxQuat::isUnit;
bool (physx::PxQuat::* unused34)() const = &physx::PxQuat::isSane;
bool (physx::PxQuat::* unused35)(const physx::PxQuat &) const = &physx::PxQuat::operator==;
void (physx::PxQuat::* unused36)(float &, physx::PxVec3 &) const = &physx::PxQuat::toRadiansAndUnitAxis;
float (physx::PxQuat::* unused37)() const = &physx::PxQuat::getAngle;
float (physx::PxQuat::* unused38)(const physx::PxQuat &) const = &physx::PxQuat::getAngle;
float (physx::PxQuat::* unused39)() const = &physx::PxQuat::magnitudeSquared;
float (physx::PxQuat::* unused40)(const physx::PxQuat &) const = &physx::PxQuat::dot;
physx::PxQuat (physx::PxQuat::* unused41)() const = &physx::PxQuat::getNormalized;
float (physx::PxQuat::* unused42)() const = &physx::PxQuat::magnitude;
float (physx::PxQuat::* unused43)() = &physx::PxQuat::normalize;
physx::PxQuat (physx::PxQuat::* unused44)() const = &physx::PxQuat::getConjugate;
physx::PxVec3 (physx::PxQuat::* unused45)() const = &physx::PxQuat::getImaginaryPart;
physx::PxVec3 (physx::PxQuat::* unused46)() const = &physx::PxQuat::getBasisVector0;
physx::PxVec3 (physx::PxQuat::* unused47)() const = &physx::PxQuat::getBasisVector1;
physx::PxVec3 (physx::PxQuat::* unused48)() const = &physx::PxQuat::getBasisVector2;
const physx::PxVec3 (physx::PxQuat::* unused49)(const physx::PxVec3 &) const = &physx::PxQuat::rotate;
const physx::PxVec3 (physx::PxQuat::* unused50)(const physx::PxVec3 &) const = &physx::PxQuat::rotateInv;
physx::PxQuat & (physx::PxQuat::* unused51)(const physx::PxQuat &) = &physx::PxQuat::operator=;
physx::PxQuat & (physx::PxQuat::* unused52)(const physx::PxQuat &) = &physx::PxQuat::operator*=;
physx::PxQuat & (physx::PxQuat::* unused53)(const physx::PxQuat &) = &physx::PxQuat::operator+=;
physx::PxQuat & (physx::PxQuat::* unused54)(const physx::PxQuat &) = &physx::PxQuat::operator-=;
physx::PxQuat & (physx::PxQuat::* unused55)(const float) = &physx::PxQuat::operator*=;
physx::PxQuat (physx::PxQuat::* unused56)(const physx::PxQuat &) const = &physx::PxQuat::operator*;
physx::PxQuat (physx::PxQuat::* unused57)(const physx::PxQuat &) const = &physx::PxQuat::operator+;
physx::PxQuat (physx::PxQuat::* unused58)() const = &physx::PxQuat::operator-;
physx::PxQuat (physx::PxQuat::* unused59)(const physx::PxQuat &) const = &physx::PxQuat::operator-;
physx::PxQuat (physx::PxQuat::* unused60)(float) const = &physx::PxQuat::operator*;
void __PxPlane__ctor(void* _this) { new (_this) physx::PxPlane(); }
void __PxPlane__ctor(void* _this, float _0, float _1, float _2, float _3) { new (_this) physx::PxPlane(_0, _1, _2, _3); }
void __PxPlane__ctor(void* _this, const physx::PxVec3 & _0, float _1) { new (_this) physx::PxPlane(_0, _1); }
void __PxPlane__ctor(void* _this, const physx::PxVec3 & _0, const physx::PxVec3 & _1) { new (_this) physx::PxPlane(_0, _1); }
void __PxPlane__ctor(void* _this, const physx::PxVec3 & _0, const physx::PxVec3 & _1, const physx::PxVec3 & _2) { new (_this) physx::PxPlane(_0, _1, _2); }
bool (physx::PxPlane::* unused61)(const physx::PxPlane &) const = &physx::PxPlane::operator==;
float (physx::PxPlane::* unused62)(const physx::PxVec3 &) const = &physx::PxPlane::distance;
bool (physx::PxPlane::* unused63)(const physx::PxVec3 &) const = &physx::PxPlane::contains;
physx::PxVec3 (physx::PxPlane::* unused64)(const physx::PxVec3 &) const = &physx::PxPlane::project;
physx::PxVec3 (physx::PxPlane::* unused65)() const = &physx::PxPlane::pointInPlane;
void (physx::PxPlane::* unused66)() = &physx::PxPlane::normalize;
void __PxTransform__ctor(void* _this) { new (_this) physx::PxTransform(); }
void __PxTransform__ctor(void* _this, const physx::PxVec3 & _0) { new (_this) physx::PxTransform(_0); }
void __PxTransform__ctor(void* _this, physx::PxIDENTITY _0) { new (_this) physx::PxTransform(_0); }
void __PxTransform__ctor(void* _this, const physx::PxQuat & _0) { new (_this) physx::PxTransform(_0); }
void __PxTransform__ctor(void* _this, float _0, float _1, float _2, physx::PxQuat _3) { new (_this) physx::PxTransform(_0, _1, _2, _3); }
void __PxTransform__ctor(void* _this, const physx::PxVec3 & _0, const physx::PxQuat & _1) { new (_this) physx::PxTransform(_0, _1); }
void __PxTransform__ctor(void* _this, const physx::PxMat44 & _0) { new (_this) physx::PxTransform(_0); }
bool (physx::PxTransform::* unused67)(const physx::PxTransform &) const = &physx::PxTransform::operator==;
physx::PxTransform (physx::PxTransform::* unused68)(const physx::PxTransform &) const = &physx::PxTransform::operator*;
physx::PxTransform & (physx::PxTransform::* unused69)(physx::PxTransform &) = &physx::PxTransform::operator*=;
physx::PxTransform (physx::PxTransform::* unused70)() const = &physx::PxTransform::getInverse;
physx::PxVec3 (physx::PxTransform::* unused71)(const physx::PxVec3 &) const = &physx::PxTransform::transform;
physx::PxVec3 (physx::PxTransform::* unused72)(const physx::PxVec3 &) const = &physx::PxTransform::transformInv;
physx::PxVec3 (physx::PxTransform::* unused73)(const physx::PxVec3 &) const = &physx::PxTransform::rotate;
physx::PxVec3 (physx::PxTransform::* unused74)(const physx::PxVec3 &) const = &physx::PxTransform::rotateInv;
physx::PxTransform (physx::PxTransform::* unused75)(const physx::PxTransform &) const = &physx::PxTransform::transform;
bool (physx::PxTransform::* unused76)() const = &physx::PxTransform::isValid;
bool (physx::PxTransform::* unused77)() const = &physx::PxTransform::isSane;
bool (physx::PxTransform::* unused78)() const = &physx::PxTransform::isFinite;
physx::PxTransform (physx::PxTransform::* unused79)(const physx::PxTransform &) const = &physx::PxTransform::transformInv;
physx::PxPlane (physx::PxTransform::* unused80)(const physx::PxPlane &) const = &physx::PxTransform::transform;
physx::PxPlane (physx::PxTransform::* unused81)(const physx::PxPlane &) const = &physx::PxTransform::inverseTransform;
physx::PxTransform (physx::PxTransform::* unused82)() const = &physx::PxTransform::getNormalized;
void __PxMat33__ctor(void* _this) { new (_this) physx::PxMat33(); }
void __PxMat33__ctor(void* _this, physx::PxIDENTITY _0) { new (_this) physx::PxMat33(_0); }
void __PxMat33__ctor(void* _this, physx::PxZERO _0) { new (_this) physx::PxMat33(_0); }
void __PxMat33__ctor(void* _this, const physx::PxVec3 & _0, const physx::PxVec3 & _1, const physx::PxVec3 & _2) { new (_this) physx::PxMat33(_0, _1, _2); }
void __PxMat33__ctor(void* _this, float _0) { new (_this) physx::PxMat33(_0); }
void __PxMat33__ctor(void* _this, float  _0[]) { new (_this) physx::PxMat33(_0); }
void __PxMat33__ctor(void* _this, const physx::PxQuat & _0) { new (_this) physx::PxMat33(_0); }
void __PxMat33__ctor(void* _this, const physx::PxMat33 & _0) { new (_this) physx::PxMat33(_0); }
physx::PxMat33 & (physx::PxMat33::* unused83)(const physx::PxMat33 &) = &physx::PxMat33::operator=;
const physx::PxMat33 (*unused84)(const physx::PxVec3 &) = &physx::PxMat33::createDiagonal;
bool (physx::PxMat33::* unused85)(const physx::PxMat33 &) const = &physx::PxMat33::operator==;
const physx::PxMat33 (physx::PxMat33::* unused86)() const = &physx::PxMat33::getTranspose;
const physx::PxMat33 (physx::PxMat33::* unused87)() const = &physx::PxMat33::getInverse;
float (physx::PxMat33::* unused88)() const = &physx::PxMat33::getDeterminant;
const physx::PxMat33 (physx::PxMat33::* unused89)() const = &physx::PxMat33::operator-;
const physx::PxMat33 (physx::PxMat33::* unused90)(const physx::PxMat33 &) const = &physx::PxMat33::operator+;
const physx::PxMat33 (physx::PxMat33::* unused91)(const physx::PxMat33 &) const = &physx::PxMat33::operator-;
const physx::PxMat33 (physx::PxMat33::* unused92)(float) const = &physx::PxMat33::operator*;
const physx::PxVec3 (physx::PxMat33::* unused93)(const physx::PxVec3 &) const = &physx::PxMat33::operator*;
const physx::PxMat33 (physx::PxMat33::* unused94)(const physx::PxMat33 &) const = &physx::PxMat33::operator*;
physx::PxMat33 & (physx::PxMat33::* unused95)(const physx::PxMat33 &) = &physx::PxMat33::operator+=;
physx::PxMat33 & (physx::PxMat33::* unused96)(const physx::PxMat33 &) = &physx::PxMat33::operator-=;
physx::PxMat33 & (physx::PxMat33::* unused97)(float) = &physx::PxMat33::operator*=;
physx::PxMat33 & (physx::PxMat33::* unused98)(const physx::PxMat33 &) = &physx::PxMat33::operator*=;
float (physx::PxMat33::* unused99)(unsigned int, unsigned int) const = &physx::PxMat33::operator();
float & (physx::PxMat33::* unused100)(unsigned int, unsigned int) = &physx::PxMat33::operator();
const physx::PxVec3 (physx::PxMat33::* unused101)(const physx::PxVec3 &) const = &physx::PxMat33::transform;
const physx::PxVec3 (physx::PxMat33::* unused102)(const physx::PxVec3 &) const = &physx::PxMat33::transformTranspose;
const float * (physx::PxMat33::* unused103)() const = &physx::PxMat33::front;
physx::PxVec3 & (physx::PxMat33::* unused104)(unsigned int) = &physx::PxMat33::operator[];
const physx::PxVec3 & (physx::PxMat33::* unused105)(unsigned int) const = &physx::PxMat33::operator[];
void __PxBounds3__ctor(void* _this) { new (_this) physx::PxBounds3(); }
void __PxBounds3__ctor(void* _this, const physx::PxVec3 & _0, const physx::PxVec3 & _1) { new (_this) physx::PxBounds3(_0, _1); }
physx::PxBounds3 (*unused106)() = &physx::PxBounds3::empty;
physx::PxBounds3 (*unused107)(const physx::PxVec3 &, const physx::PxVec3 &) = &physx::PxBounds3::boundsOfPoints;
physx::PxBounds3 (*unused108)(const physx::PxVec3 &, const physx::PxVec3 &) = &physx::PxBounds3::centerExtents;
physx::PxBounds3 (*unused109)(const physx::PxVec3 &, const physx::PxMat33 &, const physx::PxVec3 &) = &physx::PxBounds3::basisExtent;
physx::PxBounds3 (*unused110)(const physx::PxTransform &, const physx::PxVec3 &) = &physx::PxBounds3::poseExtent;
physx::PxBounds3 (*unused111)(const physx::PxMat33 &, const physx::PxBounds3 &) = &physx::PxBounds3::transformSafe;
physx::PxBounds3 (*unused112)(const physx::PxMat33 &, const physx::PxBounds3 &) = &physx::PxBounds3::transformFast;
physx::PxBounds3 (*unused113)(const physx::PxTransform &, const physx::PxBounds3 &) = &physx::PxBounds3::transformSafe;
physx::PxBounds3 (*unused114)(const physx::PxTransform &, const physx::PxBounds3 &) = &physx::PxBounds3::transformFast;
void (physx::PxBounds3::* unused115)() = &physx::PxBounds3::setEmpty;
void (physx::PxBounds3::* unused116)() = &physx::PxBounds3::setMaximal;
void (physx::PxBounds3::* unused117)(const physx::PxVec3 &) = &physx::PxBounds3::include;
void (physx::PxBounds3::* unused118)(const physx::PxBounds3 &) = &physx::PxBounds3::include;
bool (physx::PxBounds3::* unused119)() const = &physx::PxBounds3::isEmpty;
bool (physx::PxBounds3::* unused120)(const physx::PxBounds3 &) const = &physx::PxBounds3::intersects;
bool (physx::PxBounds3::* unused121)(const physx::PxBounds3 &, unsigned int) const = &physx::PxBounds3::intersects1D;
bool (physx::PxBounds3::* unused122)(const physx::PxVec3 &) const = &physx::PxBounds3::contains;
bool (physx::PxBounds3::* unused123)(const physx::PxBounds3 &) const = &physx::PxBounds3::isInside;
physx::PxVec3 (physx::PxBounds3::* unused124)() const = &physx::PxBounds3::getCenter;
float (physx::PxBounds3::* unused125)(unsigned int) const = &physx::PxBounds3::getCenter;
float (physx::PxBounds3::* unused126)(unsigned int) const = &physx::PxBounds3::getExtents;
physx::PxVec3 (physx::PxBounds3::* unused127)() const = &physx::PxBounds3::getDimensions;
physx::PxVec3 (physx::PxBounds3::* unused128)() const = &physx::PxBounds3::getExtents;
void (physx::PxBounds3::* unused129)(float) = &physx::PxBounds3::scaleSafe;
void (physx::PxBounds3::* unused130)(float) = &physx::PxBounds3::scaleFast;
void (physx::PxBounds3::* unused131)(float) = &physx::PxBounds3::fattenSafe;
void (physx::PxBounds3::* unused132)(float) = &physx::PxBounds3::fattenFast;
bool (physx::PxBounds3::* unused133)() const = &physx::PxBounds3::isFinite;
bool (physx::PxBounds3::* unused134)() const = &physx::PxBounds3::isValid;
void (physx::PxDeserializationContext::* unused135)(const char *&) = &physx::PxDeserializationContext::readName;
void (physx::PxDeserializationContext::* unused136)(unsigned int) = &physx::PxDeserializationContext::alignExtraData;
unsigned short (physx::PxBase::* unused137)() const = &physx::PxBase::getConcreteType;
void (physx::PxBase::* unused138)(physx::PxBaseFlag::Enum, bool) = &physx::PxBase::setBaseFlag;
void (physx::PxBase::* unused139)(physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short>) = &physx::PxBase::setBaseFlags;
physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> (physx::PxBase::* unused140)() const = &physx::PxBase::getBaseFlags;
void __Px1DConstraintFlag__ctor(void* _this) { new (_this) physx::Px1DConstraintFlag(); }
void __PxConstraintInvMassScale__ctor(void* _this) { new (_this) physx::PxConstraintInvMassScale(); }
void __PxConstraintInvMassScale__ctor(void* _this, float _0, float _1, float _2, float _3) { new (_this) physx::PxConstraintInvMassScale(_0, _1, _2, _3); }
void __PxSolverBody__ctor(void* _this) { new (_this) physx::PxSolverBody(); }
float (physx::PxSolverBodyData::* unused141)(const physx::PxVec3 &, const physx::PxVec3 &) const = &physx::PxSolverBodyData::projectVelocity;
float (physx::PxTGSSolverBodyVel::* unused142)(const physx::PxVec3 &, const physx::PxVec3 &) const = &physx::PxTGSSolverBodyVel::projectVelocity;
float (physx::PxTGSSolverBodyData::* unused143)(const physx::PxVec3 &, const physx::PxVec3 &) const = &physx::PxTGSSolverBodyData::projectVelocity;
physx::PxGeometryType::Enum (physx::PxGeometry::* unused144)() const = &physx::PxGeometry::getType;
void __PxBoxGeometry__ctor(void* _this) { new (_this) physx::PxBoxGeometry(); }
void __PxBoxGeometry__ctor(void* _this, float _0, float _1, float _2) { new (_this) physx::PxBoxGeometry(_0, _1, _2); }
void __PxBoxGeometry__ctor(void* _this, physx::PxVec3 _0) { new (_this) physx::PxBoxGeometry(_0); }
bool (physx::PxBoxGeometry::* unused145)() const = &physx::PxBoxGeometry::isValid;
void __PxSphereGeometry__ctor(void* _this) { new (_this) physx::PxSphereGeometry(); }
void __PxSphereGeometry__ctor(void* _this, float _0) { new (_this) physx::PxSphereGeometry(_0); }
bool (physx::PxSphereGeometry::* unused146)() const = &physx::PxSphereGeometry::isValid;
void __PxCapsuleGeometry__ctor(void* _this) { new (_this) physx::PxCapsuleGeometry(); }
void __PxCapsuleGeometry__ctor(void* _this, float _0, float _1) { new (_this) physx::PxCapsuleGeometry(_0, _1); }
bool (physx::PxCapsuleGeometry::* unused147)() const = &physx::PxCapsuleGeometry::isValid;
void __PxPlaneGeometry__ctor(void* _this) { new (_this) physx::PxPlaneGeometry(); }
bool (physx::PxPlaneGeometry::* unused148)() const = &physx::PxPlaneGeometry::isValid;
void __PxMeshScale__ctor(void* _this) { new (_this) physx::PxMeshScale(); }
void __PxMeshScale__ctor(void* _this, float _0) { new (_this) physx::PxMeshScale(_0); }
void __PxMeshScale__ctor(void* _this, const physx::PxVec3 & _0) { new (_this) physx::PxMeshScale(_0); }
void __PxMeshScale__ctor(void* _this, const physx::PxVec3 & _0, const physx::PxQuat & _1) { new (_this) physx::PxMeshScale(_0, _1); }
bool (physx::PxMeshScale::* unused149)() const = &physx::PxMeshScale::isIdentity;
physx::PxMeshScale (physx::PxMeshScale::* unused150)() const = &physx::PxMeshScale::getInverse;
physx::PxMat33 (physx::PxMeshScale::* unused151)() const = &physx::PxMeshScale::toMat33;
bool (physx::PxMeshScale::* unused152)() const = &physx::PxMeshScale::hasNegativeDeterminant;
physx::PxVec3 (physx::PxMeshScale::* unused153)(const physx::PxVec3 &) const = &physx::PxMeshScale::transform;
bool (physx::PxMeshScale::* unused154)() const = &physx::PxMeshScale::isValidForTriangleMesh;
bool (physx::PxMeshScale::* unused155)() const = &physx::PxMeshScale::isValidForConvexMesh;
void __PxStridedData__ctor(void* _this) { new (_this) physx::PxStridedData(); }
void __PxBoundedData__ctor(void* _this) { new (_this) physx::PxBoundedData(); }
void __PxConvexMeshGeometry__ctor(void* _this) { new (_this) physx::PxConvexMeshGeometry(); }
void __PxConvexMeshGeometry__ctor(void* _this, physx::PxConvexMesh * _0, const physx::PxMeshScale & _1, physx::PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char> _2) { new (_this) physx::PxConvexMeshGeometry(_0, _1, _2); }
bool (physx::PxConvexMeshGeometry::* unused156)() const = &physx::PxConvexMeshGeometry::isValid;
void __PxTriangleMeshGeometry__ctor(void* _this) { new (_this) physx::PxTriangleMeshGeometry(); }
void __PxTriangleMeshGeometry__ctor(void* _this, physx::PxTriangleMesh * _0, const physx::PxMeshScale & _1, physx::PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char> _2) { new (_this) physx::PxTriangleMeshGeometry(_0, _1, _2); }
bool (physx::PxTriangleMeshGeometry::* unused157)() const = &physx::PxTriangleMeshGeometry::isValid;
void __PxHeightFieldGeometry__ctor(void* _this) { new (_this) physx::PxHeightFieldGeometry(); }
void __PxHeightFieldGeometry__ctor(void* _this, physx::PxHeightField * _0, physx::PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char> _1, float _2, float _3, float _4) { new (_this) physx::PxHeightFieldGeometry(_0, _1, _2, _3, _4); }
bool (physx::PxHeightFieldGeometry::* unused158)() const = &physx::PxHeightFieldGeometry::isValid;
physx::PxGeometryType::Enum (physx::PxGeometryHolder::* unused159)() const = &physx::PxGeometryHolder::getType;
physx::PxGeometry & (physx::PxGeometryHolder::* unused160)() = &physx::PxGeometryHolder::any;
const physx::PxGeometry & (physx::PxGeometryHolder::* unused161)() const = &physx::PxGeometryHolder::any;
physx::PxSphereGeometry & (physx::PxGeometryHolder::* unused162)() = &physx::PxGeometryHolder::sphere;
const physx::PxSphereGeometry & (physx::PxGeometryHolder::* unused163)() const = &physx::PxGeometryHolder::sphere;
physx::PxPlaneGeometry & (physx::PxGeometryHolder::* unused164)() = &physx::PxGeometryHolder::plane;
const physx::PxPlaneGeometry & (physx::PxGeometryHolder::* unused165)() const = &physx::PxGeometryHolder::plane;
physx::PxCapsuleGeometry & (physx::PxGeometryHolder::* unused166)() = &physx::PxGeometryHolder::capsule;
const physx::PxCapsuleGeometry & (physx::PxGeometryHolder::* unused167)() const = &physx::PxGeometryHolder::capsule;
physx::PxBoxGeometry & (physx::PxGeometryHolder::* unused168)() = &physx::PxGeometryHolder::box;
const physx::PxBoxGeometry & (physx::PxGeometryHolder::* unused169)() const = &physx::PxGeometryHolder::box;
physx::PxConvexMeshGeometry & (physx::PxGeometryHolder::* unused170)() = &physx::PxGeometryHolder::convexMesh;
const physx::PxConvexMeshGeometry & (physx::PxGeometryHolder::* unused171)() const = &physx::PxGeometryHolder::convexMesh;
physx::PxTriangleMeshGeometry & (physx::PxGeometryHolder::* unused172)() = &physx::PxGeometryHolder::triangleMesh;
const physx::PxTriangleMeshGeometry & (physx::PxGeometryHolder::* unused173)() const = &physx::PxGeometryHolder::triangleMesh;
physx::PxHeightFieldGeometry & (physx::PxGeometryHolder::* unused174)() = &physx::PxGeometryHolder::heightField;
const physx::PxHeightFieldGeometry & (physx::PxGeometryHolder::* unused175)() const = &physx::PxGeometryHolder::heightField;
void (physx::PxGeometryHolder::* unused176)(const physx::PxGeometry &) = &physx::PxGeometryHolder::storeAny;
void __PxGeometryHolder__ctor(void* _this) { new (_this) physx::PxGeometryHolder(); }
void __PxGeometryHolder__ctor(void* _this, const physx::PxGeometry & _0) { new (_this) physx::PxGeometryHolder(_0); }
void __PxArticulationCache__ctor(void* _this) { new (_this) physx::PxArticulationCache(); }
void __PxFilterData__ctor(void* _this, const physx::PxEMPTY _0) { new (_this) physx::PxFilterData(_0); }
void __PxFilterData__ctor(void* _this) { new (_this) physx::PxFilterData(); }
void __PxFilterData__ctor(void* _this, const physx::PxFilterData & _0) { new (_this) physx::PxFilterData(_0); }
void __PxFilterData__ctor(void* _this, unsigned int _0, unsigned int _1, unsigned int _2, unsigned int _3) { new (_this) physx::PxFilterData(_0, _1, _2, _3); }
void (physx::PxFilterData::* unused177)() = &physx::PxFilterData::setToDefault;
void (physx::PxFilterData::* unused178)(const physx::PxFilterData &) = &physx::PxFilterData::operator=;
bool (physx::PxFilterData::* unused179)(const physx::PxFilterData &) const = &physx::PxFilterData::operator==;
bool (physx::PxFilterData::* unused180)(const physx::PxFilterData &) const = &physx::PxFilterData::operator!=;
void __PxActorShape__ctor(void* _this) { new (_this) physx::PxActorShape(); }
void __PxActorShape__ctor(void* _this, physx::PxRigidActor * _0, physx::PxShape * _1) { new (_this) physx::PxActorShape(_0, _1); }
void __PxQueryHit__ctor(void* _this) { new (_this) physx::PxQueryHit(); }
void __PxLocationHit__ctor(void* _this) { new (_this) physx::PxLocationHit(); }
bool (physx::PxLocationHit::* unused181)() const = &physx::PxLocationHit::hadInitialOverlap;
void __PxRaycastHit__ctor(void* _this) { new (_this) physx::PxRaycastHit(); }
void __PxSweepHit__ctor(void* _this) { new (_this) physx::PxSweepHit(); }
void __PxQueryFilterData__ctor(void* _this) { new (_this) physx::PxQueryFilterData(); }
void __PxQueryFilterData__ctor(void* _this, const physx::PxFilterData & _0, physx::PxFlags<physx::PxQueryFlag::Enum, unsigned short> _1) { new (_this) physx::PxQueryFilterData(_0, _1); }
void __PxQueryFilterData__ctor(void* _this, physx::PxFlags<physx::PxQueryFlag::Enum, unsigned short> _0) { new (_this) physx::PxQueryFilterData(_0); }
unsigned int (physx::PxBatchQueryMemory::* unused182)() const = &physx::PxBatchQueryMemory::getMaxRaycastsPerExecute;
unsigned int (physx::PxBatchQueryMemory::* unused183)() const = &physx::PxBatchQueryMemory::getMaxSweepsPerExecute;
unsigned int (physx::PxBatchQueryMemory::* unused184)() const = &physx::PxBatchQueryMemory::getMaxOverlapsPerExecute;
void __PxBatchQueryMemory__ctor(void* _this, unsigned int _0, unsigned int _1, unsigned int _2) { new (_this) physx::PxBatchQueryMemory(_0, _1, _2); }
void __PxBatchQueryDesc__ctor(void* _this, unsigned int _0, unsigned int _1, unsigned int _2) { new (_this) physx::PxBatchQueryDesc(_0, _1, _2); }
bool (physx::PxBatchQueryDesc::* unused185)() const = &physx::PxBatchQueryDesc::isValid;
void __PxContactStreamIterator__ctor(void* _this, const unsigned char * _0, const unsigned char * _1, const unsigned int * _2, unsigned int _3, unsigned int _4) { new (_this) physx::PxContactStreamIterator(_0, _1, _2, _3, _4); }
bool (physx::PxContactStreamIterator::* unused186)() const = &physx::PxContactStreamIterator::hasNextPatch;
unsigned int (physx::PxContactStreamIterator::* unused187)() const = &physx::PxContactStreamIterator::getTotalContactCount;
unsigned int (physx::PxContactStreamIterator::* unused188)() const = &physx::PxContactStreamIterator::getTotalPatchCount;
void (physx::PxContactStreamIterator::* unused189)() = &physx::PxContactStreamIterator::nextPatch;
bool (physx::PxContactStreamIterator::* unused190)() const = &physx::PxContactStreamIterator::hasNextContact;
void (physx::PxContactStreamIterator::* unused191)() = &physx::PxContactStreamIterator::nextContact;
const physx::PxVec3 & (physx::PxContactStreamIterator::* unused192)() const = &physx::PxContactStreamIterator::getContactNormal;
float (physx::PxContactStreamIterator::* unused193)() const = &physx::PxContactStreamIterator::getInvMassScale0;
float (physx::PxContactStreamIterator::* unused194)() const = &physx::PxContactStreamIterator::getInvMassScale1;
float (physx::PxContactStreamIterator::* unused195)() const = &physx::PxContactStreamIterator::getInvInertiaScale0;
float (physx::PxContactStreamIterator::* unused196)() const = &physx::PxContactStreamIterator::getInvInertiaScale1;
float (physx::PxContactStreamIterator::* unused197)() const = &physx::PxContactStreamIterator::getMaxImpulse;
const physx::PxVec3 & (physx::PxContactStreamIterator::* unused198)() const = &physx::PxContactStreamIterator::getTargetVel;
const physx::PxVec3 & (physx::PxContactStreamIterator::* unused199)() const = &physx::PxContactStreamIterator::getContactPoint;
float (physx::PxContactStreamIterator::* unused200)() const = &physx::PxContactStreamIterator::getSeparation;
unsigned int (physx::PxContactStreamIterator::* unused201)() const = &physx::PxContactStreamIterator::getFaceIndex0;
unsigned int (physx::PxContactStreamIterator::* unused202)() const = &physx::PxContactStreamIterator::getFaceIndex1;
float (physx::PxContactStreamIterator::* unused203)() const = &physx::PxContactStreamIterator::getStaticFriction;
float (physx::PxContactStreamIterator::* unused204)() const = &physx::PxContactStreamIterator::getDynamicFriction;
float (physx::PxContactStreamIterator::* unused205)() const = &physx::PxContactStreamIterator::getRestitution;
unsigned int (physx::PxContactStreamIterator::* unused206)() const = &physx::PxContactStreamIterator::getMaterialFlags;
unsigned short (physx::PxContactStreamIterator::* unused207)() const = &physx::PxContactStreamIterator::getMaterialIndex0;
unsigned short (physx::PxContactStreamIterator::* unused208)() const = &physx::PxContactStreamIterator::getMaterialIndex1;
bool (physx::PxContactStreamIterator::* unused209)(const unsigned int) = &physx::PxContactStreamIterator::advanceToIndex;
const physx::PxVec3 & (physx::PxContactSet::* unused210)(unsigned int) const = &physx::PxContactSet::getPoint;
void (physx::PxContactSet::* unused211)(unsigned int, const physx::PxVec3 &) = &physx::PxContactSet::setPoint;
const physx::PxVec3 & (physx::PxContactSet::* unused212)(unsigned int) const = &physx::PxContactSet::getNormal;
void (physx::PxContactSet::* unused213)(unsigned int, const physx::PxVec3 &) = &physx::PxContactSet::setNormal;
float (physx::PxContactSet::* unused214)(unsigned int) const = &physx::PxContactSet::getSeparation;
void (physx::PxContactSet::* unused215)(unsigned int, float) = &physx::PxContactSet::setSeparation;
const physx::PxVec3 & (physx::PxContactSet::* unused216)(unsigned int) const = &physx::PxContactSet::getTargetVelocity;
void (physx::PxContactSet::* unused217)(unsigned int, const physx::PxVec3 &) = &physx::PxContactSet::setTargetVelocity;
unsigned int (physx::PxContactSet::* unused218)(unsigned int) = &physx::PxContactSet::getInternalFaceIndex0;
unsigned int (physx::PxContactSet::* unused219)(unsigned int) = &physx::PxContactSet::getInternalFaceIndex1;
float (physx::PxContactSet::* unused220)(unsigned int) const = &physx::PxContactSet::getMaxImpulse;
void (physx::PxContactSet::* unused221)(unsigned int, float) = &physx::PxContactSet::setMaxImpulse;
float (physx::PxContactSet::* unused222)(unsigned int) const = &physx::PxContactSet::getRestitution;
void (physx::PxContactSet::* unused223)(unsigned int, float) = &physx::PxContactSet::setRestitution;
float (physx::PxContactSet::* unused224)(unsigned int) const = &physx::PxContactSet::getStaticFriction;
void (physx::PxContactSet::* unused225)(unsigned int, float) = &physx::PxContactSet::setStaticFriction;
float (physx::PxContactSet::* unused226)(unsigned int) const = &physx::PxContactSet::getDynamicFriction;
void (physx::PxContactSet::* unused227)(unsigned int, float) = &physx::PxContactSet::setDynamicFriction;
void (physx::PxContactSet::* unused228)(unsigned int) = &physx::PxContactSet::ignore;
unsigned int (physx::PxContactSet::* unused229)() const = &physx::PxContactSet::size;
float (physx::PxContactSet::* unused230)() const = &physx::PxContactSet::getInvMassScale0;
float (physx::PxContactSet::* unused231)() const = &physx::PxContactSet::getInvMassScale1;
float (physx::PxContactSet::* unused232)() const = &physx::PxContactSet::getInvInertiaScale0;
float (physx::PxContactSet::* unused233)() const = &physx::PxContactSet::getInvInertiaScale1;
void (physx::PxContactSet::* unused234)(const float) = &physx::PxContactSet::setInvMassScale0;
void (physx::PxContactSet::* unused235)(const float) = &physx::PxContactSet::setInvMassScale1;
void (physx::PxContactSet::* unused236)(const float) = &physx::PxContactSet::setInvInertiaScale0;
void (physx::PxContactSet::* unused237)(const float) = &physx::PxContactSet::setInvInertiaScale1;
void __NarrowPhaseParams__ctor(void* _this, float _0, float _1, float _2) { new (_this) physx::Gu::NarrowPhaseParams(_0, _1, _2); }
void (physx::Gu::ContactBuffer::* unused238)() = &physx::Gu::ContactBuffer::reset;
bool (physx::Gu::ContactBuffer::* unused239)(const physx::PxVec3 &, const physx::PxVec3 &, float, unsigned int) = &physx::Gu::ContactBuffer::contact;
bool (physx::Gu::ContactBuffer::* unused240)(const physx::PxVec3 &, const physx::PxVec3 &, float, unsigned short, unsigned int) = &physx::Gu::ContactBuffer::contact;
bool (physx::Gu::ContactBuffer::* unused241)(const physx::Gu::ContactPoint &) = &physx::Gu::ContactBuffer::contact;
physx::Gu::ContactPoint * (physx::Gu::ContactBuffer::* unused242)() = &physx::Gu::ContactBuffer::contact;
void __PxCache__ctor(void* _this) { new (_this) physx::PxCache(); }
void (physx::PxCache::* unused243)() = &physx::PxCache::reset;
void __PxFeatherstoneArticulationLinkData__ctor(void* _this) { new (_this) physx::immediate::PxFeatherstoneArticulationLinkData(); }
void (physx::immediate::PxFeatherstoneArticulationLinkData::* unused244)() = &physx::immediate::PxFeatherstoneArticulationLinkData::initData;
physx::PxShape * (physx::PxPhysics::* unused245)(const physx::PxGeometry &, const physx::PxMaterial &, bool, physx::PxFlags<physx::PxShapeFlag::Enum, unsigned char>) = &physx::PxPhysics::createShape;
void __PxVec4__ctor(void* _this) { new (_this) physx::PxVec4(); }
void __PxVec4__ctor(void* _this, physx::PxZERO _0) { new (_this) physx::PxVec4(_0); }
void __PxVec4__ctor(void* _this, float _0) { new (_this) physx::PxVec4(_0); }
void __PxVec4__ctor(void* _this, float _0, float _1, float _2, float _3) { new (_this) physx::PxVec4(_0, _1, _2, _3); }
void __PxVec4__ctor(void* _this, const physx::PxVec3 & _0, float _1) { new (_this) physx::PxVec4(_0, _1); }
void __PxVec4__ctor(void* _this, float const _0[]) { new (_this) physx::PxVec4(_0); }
void __PxVec4__ctor(void* _this, const physx::PxVec4 & _0) { new (_this) physx::PxVec4(_0); }
physx::PxVec4 & (physx::PxVec4::* unused246)(const physx::PxVec4 &) = &physx::PxVec4::operator=;
float & (physx::PxVec4::* unused247)(unsigned int) = &physx::PxVec4::operator[];
const float & (physx::PxVec4::* unused248)(unsigned int) const = &physx::PxVec4::operator[];
bool (physx::PxVec4::* unused249)(const physx::PxVec4 &) const = &physx::PxVec4::operator==;
bool (physx::PxVec4::* unused250)(const physx::PxVec4 &) const = &physx::PxVec4::operator!=;
bool (physx::PxVec4::* unused251)() const = &physx::PxVec4::isZero;
bool (physx::PxVec4::* unused252)() const = &physx::PxVec4::isFinite;
bool (physx::PxVec4::* unused253)() const = &physx::PxVec4::isNormalized;
float (physx::PxVec4::* unused254)() const = &physx::PxVec4::magnitudeSquared;
float (physx::PxVec4::* unused255)() const = &physx::PxVec4::magnitude;
physx::PxVec4 (physx::PxVec4::* unused256)() const = &physx::PxVec4::operator-;
physx::PxVec4 (physx::PxVec4::* unused257)(const physx::PxVec4 &) const = &physx::PxVec4::operator+;
physx::PxVec4 (physx::PxVec4::* unused258)(const physx::PxVec4 &) const = &physx::PxVec4::operator-;
physx::PxVec4 (physx::PxVec4::* unused259)(float) const = &physx::PxVec4::operator*;
physx::PxVec4 (physx::PxVec4::* unused260)(float) const = &physx::PxVec4::operator/;
physx::PxVec4 & (physx::PxVec4::* unused261)(const physx::PxVec4 &) = &physx::PxVec4::operator+=;
physx::PxVec4 & (physx::PxVec4::* unused262)(const physx::PxVec4 &) = &physx::PxVec4::operator-=;
physx::PxVec4 & (physx::PxVec4::* unused263)(float) = &physx::PxVec4::operator*=;
physx::PxVec4 & (physx::PxVec4::* unused264)(float) = &physx::PxVec4::operator/=;
float (physx::PxVec4::* unused265)(const physx::PxVec4 &) const = &physx::PxVec4::dot;
physx::PxVec4 (physx::PxVec4::* unused266)() const = &physx::PxVec4::getNormalized;
float (physx::PxVec4::* unused267)() = &physx::PxVec4::normalize;
physx::PxVec4 (physx::PxVec4::* unused268)(const physx::PxVec4 &) const = &physx::PxVec4::multiply;
physx::PxVec4 (physx::PxVec4::* unused269)(const physx::PxVec4 &) const = &physx::PxVec4::minimum;
physx::PxVec4 (physx::PxVec4::* unused270)(const physx::PxVec4 &) const = &physx::PxVec4::maximum;
physx::PxVec3 (physx::PxVec4::* unused271)() const = &physx::PxVec4::getXYZ;
void (physx::PxVec4::* unused272)() = &physx::PxVec4::setZero;
void __PxMat44__ctor(void* _this) { new (_this) physx::PxMat44(); }
void __PxMat44__ctor(void* _this, physx::PxIDENTITY _0) { new (_this) physx::PxMat44(_0); }
void __PxMat44__ctor(void* _this, physx::PxZERO _0) { new (_this) physx::PxMat44(_0); }
void __PxMat44__ctor(void* _this, const physx::PxVec4 & _0, const physx::PxVec4 & _1, const physx::PxVec4 & _2, const physx::PxVec4 & _3) { new (_this) physx::PxMat44(_0, _1, _2, _3); }
void __PxMat44__ctor(void* _this, float _0) { new (_this) physx::PxMat44(_0); }
void __PxMat44__ctor(void* _this, const physx::PxVec3 & _0, const physx::PxVec3 & _1, const physx::PxVec3 & _2, const physx::PxVec3 & _3) { new (_this) physx::PxMat44(_0, _1, _2, _3); }
void __PxMat44__ctor(void* _this, float  _0[]) { new (_this) physx::PxMat44(_0); }
void __PxMat44__ctor(void* _this, const physx::PxQuat & _0) { new (_this) physx::PxMat44(_0); }
void __PxMat44__ctor(void* _this, const physx::PxVec4 & _0) { new (_this) physx::PxMat44(_0); }
void __PxMat44__ctor(void* _this, const physx::PxMat33 & _0, const physx::PxVec3 & _1) { new (_this) physx::PxMat44(_0, _1); }
void __PxMat44__ctor(void* _this, const physx::PxTransform & _0) { new (_this) physx::PxMat44(_0); }
bool (physx::PxMat44::* unused273)(const physx::PxMat44 &) const = &physx::PxMat44::operator==;
void __PxMat44__ctor(void* _this, const physx::PxMat44 & _0) { new (_this) physx::PxMat44(_0); }
physx::PxMat44 & (physx::PxMat44::* unused274)(const physx::PxMat44 &) = &physx::PxMat44::operator=;
const physx::PxMat44 (physx::PxMat44::* unused275)() const = &physx::PxMat44::getTranspose;
const physx::PxMat44 (physx::PxMat44::* unused276)() const = &physx::PxMat44::operator-;
const physx::PxMat44 (physx::PxMat44::* unused277)(const physx::PxMat44 &) const = &physx::PxMat44::operator+;
const physx::PxMat44 (physx::PxMat44::* unused278)(const physx::PxMat44 &) const = &physx::PxMat44::operator-;
const physx::PxMat44 (physx::PxMat44::* unused279)(float) const = &physx::PxMat44::operator*;
const physx::PxMat44 (physx::PxMat44::* unused280)(const physx::PxMat44 &) const = &physx::PxMat44::operator*;
physx::PxMat44 & (physx::PxMat44::* unused281)(const physx::PxMat44 &) = &physx::PxMat44::operator+=;
physx::PxMat44 & (physx::PxMat44::* unused282)(const physx::PxMat44 &) = &physx::PxMat44::operator-=;
physx::PxMat44 & (physx::PxMat44::* unused283)(float) = &physx::PxMat44::operator*=;
physx::PxMat44 & (physx::PxMat44::* unused284)(const physx::PxMat44 &) = &physx::PxMat44::operator*=;
float (physx::PxMat44::* unused285)(unsigned int, unsigned int) const = &physx::PxMat44::operator();
float & (physx::PxMat44::* unused286)(unsigned int, unsigned int) = &physx::PxMat44::operator();
const physx::PxVec4 (physx::PxMat44::* unused287)(const physx::PxVec4 &) const = &physx::PxMat44::transform;
const physx::PxVec3 (physx::PxMat44::* unused288)(const physx::PxVec3 &) const = &physx::PxMat44::transform;
const physx::PxVec4 (physx::PxMat44::* unused289)(const physx::PxVec4 &) const = &physx::PxMat44::rotate;
const physx::PxVec3 (physx::PxMat44::* unused290)(const physx::PxVec3 &) const = &physx::PxMat44::rotate;
const physx::PxVec3 (physx::PxMat44::* unused291)(int) const = &physx::PxMat44::getBasis;
const physx::PxVec3 (physx::PxMat44::* unused292)() const = &physx::PxMat44::getPosition;
void (physx::PxMat44::* unused293)(const physx::PxVec3 &) = &physx::PxMat44::setPosition;
const float * (physx::PxMat44::* unused294)() const = &physx::PxMat44::front;
physx::PxVec4 & (physx::PxMat44::* unused295)(unsigned int) = &physx::PxMat44::operator[];
const physx::PxVec4 & (physx::PxMat44::* unused296)(unsigned int) const = &physx::PxMat44::operator[];
void (physx::PxMat44::* unused297)(const physx::PxVec4 &) = &physx::PxMat44::scale;
const physx::PxMat44 (physx::PxMat44::* unused298)() const = &physx::PxMat44::inverseRT;
bool (physx::PxMat44::* unused299)() const = &physx::PxMat44::isFinite;
void __PxVec2__ctor(void* _this) { new (_this) physx::PxVec2(); }
void __PxVec2__ctor(void* _this, physx::PxZERO _0) { new (_this) physx::PxVec2(_0); }
void __PxVec2__ctor(void* _this, float _0) { new (_this) physx::PxVec2(_0); }
void __PxVec2__ctor(void* _this, float _0, float _1) { new (_this) physx::PxVec2(_0, _1); }
void __PxVec2__ctor(void* _this, const physx::PxVec2 & _0) { new (_this) physx::PxVec2(_0); }
physx::PxVec2 & (physx::PxVec2::* unused300)(const physx::PxVec2 &) = &physx::PxVec2::operator=;
float & (physx::PxVec2::* unused301)(int) = &physx::PxVec2::operator[];
const float & (physx::PxVec2::* unused302)(int) const = &physx::PxVec2::operator[];
bool (physx::PxVec2::* unused303)(const physx::PxVec2 &) const = &physx::PxVec2::operator==;
bool (physx::PxVec2::* unused304)(const physx::PxVec2 &) const = &physx::PxVec2::operator!=;
bool (physx::PxVec2::* unused305)() const = &physx::PxVec2::isZero;
bool (physx::PxVec2::* unused306)() const = &physx::PxVec2::isFinite;
bool (physx::PxVec2::* unused307)() const = &physx::PxVec2::isNormalized;
float (physx::PxVec2::* unused308)() const = &physx::PxVec2::magnitudeSquared;
float (physx::PxVec2::* unused309)() const = &physx::PxVec2::magnitude;
physx::PxVec2 (physx::PxVec2::* unused310)() const = &physx::PxVec2::operator-;
physx::PxVec2 (physx::PxVec2::* unused311)(const physx::PxVec2 &) const = &physx::PxVec2::operator+;
physx::PxVec2 (physx::PxVec2::* unused312)(const physx::PxVec2 &) const = &physx::PxVec2::operator-;
physx::PxVec2 (physx::PxVec2::* unused313)(float) const = &physx::PxVec2::operator*;
physx::PxVec2 (physx::PxVec2::* unused314)(float) const = &physx::PxVec2::operator/;
physx::PxVec2 & (physx::PxVec2::* unused315)(const physx::PxVec2 &) = &physx::PxVec2::operator+=;
physx::PxVec2 & (physx::PxVec2::* unused316)(const physx::PxVec2 &) = &physx::PxVec2::operator-=;
physx::PxVec2 & (physx::PxVec2::* unused317)(float) = &physx::PxVec2::operator*=;
physx::PxVec2 & (physx::PxVec2::* unused318)(float) = &physx::PxVec2::operator/=;
float (physx::PxVec2::* unused319)(const physx::PxVec2 &) const = &physx::PxVec2::dot;
physx::PxVec2 (physx::PxVec2::* unused320)() const = &physx::PxVec2::getNormalized;
float (physx::PxVec2::* unused321)() = &physx::PxVec2::normalize;
physx::PxVec2 (physx::PxVec2::* unused322)(const physx::PxVec2 &) const = &physx::PxVec2::multiply;
physx::PxVec2 (physx::PxVec2::* unused323)(const physx::PxVec2 &) const = &physx::PxVec2::minimum;
float (physx::PxVec2::* unused324)() const = &physx::PxVec2::minElement;
physx::PxVec2 (physx::PxVec2::* unused325)(const physx::PxVec2 &) const = &physx::PxVec2::maximum;
float (physx::PxVec2::* unused326)() const = &physx::PxVec2::maxElement;
void __PxDebugPoint__ctor(void* _this, const physx::PxVec3 & _0, const unsigned int & _1) { new (_this) physx::PxDebugPoint(_0, _1); }
void __PxDebugLine__ctor(void* _this, const physx::PxVec3 & _0, const physx::PxVec3 & _1, const unsigned int & _2) { new (_this) physx::PxDebugLine(_0, _1, _2); }
void __PxDebugTriangle__ctor(void* _this, const physx::PxVec3 & _0, const physx::PxVec3 & _1, const physx::PxVec3 & _2, const unsigned int & _3) { new (_this) physx::PxDebugTriangle(_0, _1, _2, _3); }
void __PxDebugText__ctor(void* _this) { new (_this) physx::PxDebugText(); }
void __PxDebugText__ctor(void* _this, const physx::PxVec3 & _0, const float & _1, const unsigned int & _2, const char * _3) { new (_this) physx::PxDebugText(_0, _1, _2, _3); }
void __PxTolerancesScale__ctor(void* _this) { new (_this) physx::PxTolerancesScale(); }
bool (physx::PxTolerancesScale::* unused327)() const = &physx::PxTolerancesScale::isValid;
physx::PxTaskManager * (*unused328)(physx::PxErrorCallback &, physx::PxCpuDispatcher *) = &physx::PxTaskManager::createTaskManager;
physx::PxTaskManager * (physx::PxBaseTask::* unused329)() const = &physx::PxBaseTask::getTaskManager;
void (physx::PxBaseTask::* unused330)(unsigned long long) = &physx::PxBaseTask::setContextId;
unsigned long long (physx::PxBaseTask::* unused331)() const = &physx::PxBaseTask::getContextId;
void (physx::PxTask::* unused332)(unsigned int) = &physx::PxTask::finishBefore;
void (physx::PxTask::* unused333)(unsigned int) = &physx::PxTask::startAfter;
unsigned int (physx::PxTask::* unused334)() const = &physx::PxTask::getTaskID;
void (physx::PxLightCpuTask::* unused335)(physx::PxTaskManager &, physx::PxBaseTask *) = &physx::PxLightCpuTask::setContinuation;
void (physx::PxLightCpuTask::* unused336)(physx::PxBaseTask *) = &physx::PxLightCpuTask::setContinuation;
physx::PxBaseTask * (physx::PxLightCpuTask::* unused337)() const = &physx::PxLightCpuTask::getContinuation;
void __PxAllocInfo__ctor(void* _this) { new (_this) physx::PxAllocInfo(); }
void __PxAllocInfo__ctor(void* _this, const char * _0, int _1, const char * _2, physx::PxAllocId::Enum _3) { new (_this) physx::PxAllocInfo(_0, _1, _2, _3); }
const char * (physx::PxAllocInfo::* unused338)() const = &physx::PxAllocInfo::getFileName;
int (physx::PxAllocInfo::* unused339)() const = &physx::PxAllocInfo::getLine;
const char * (physx::PxAllocInfo::* unused340)() const = &physx::PxAllocInfo::getAllocName;
physx::PxAllocId::Enum (physx::PxAllocInfo::* unused341)() const = &physx::PxAllocInfo::getAllocId;
void __PxCudaBufferType__ctor(void* _this, const physx::PxCudaBufferType & _0) { new (_this) physx::PxCudaBufferType(_0); }
void __PxCudaBufferType__ctor(void* _this, physx::PxCudaBufferMemorySpace::Enum _0, physx::PxCudaBufferFlags::Enum _1) { new (_this) physx::PxCudaBufferType(_0, _1); }
void __PxCudaContextManagerDesc__ctor(void* _this) { new (_this) physx::PxCudaContextManagerDesc(); }
void __PxScopedCudaLock__ctor(void* _this, physx::PxCudaContextManager & _0) { new (_this) physx::PxScopedCudaLock(_0); }
bool (*unused342)(const physx::PxVec3 &, const float, const physx::PxGeometry &, const physx::PxTransform &, const physx::PxGeometry &, const physx::PxTransform &, physx::PxSweepHit &, physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>, const float) = &physx::PxGeometryQuery::sweep;
bool (*unused343)(const physx::PxGeometry &, const physx::PxTransform &, const physx::PxGeometry &, const physx::PxTransform &) = &physx::PxGeometryQuery::overlap;
unsigned int (*unused344)(const physx::PxVec3 &, const physx::PxVec3 &, const physx::PxGeometry &, const physx::PxTransform &, float, physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>, unsigned int, physx::PxRaycastHit *__restrict) = &physx::PxGeometryQuery::raycast;
bool (*unused345)(physx::PxVec3 &, float &, const physx::PxGeometry &, const physx::PxTransform &, const physx::PxGeometry &, const physx::PxTransform &) = &physx::PxGeometryQuery::computePenetration;
float (*unused346)(const physx::PxVec3 &, const physx::PxGeometry &, const physx::PxTransform &, physx::PxVec3 *) = &physx::PxGeometryQuery::pointDistance;
physx::PxBounds3 (*unused347)(const physx::PxGeometry &, const physx::PxTransform &, float) = &physx::PxGeometryQuery::getWorldBounds;
bool (*unused348)(const physx::PxGeometry &) = &physx::PxGeometryQuery::isValid;
unsigned char (physx::PxHeightFieldSample::* unused349)() const = &physx::PxHeightFieldSample::tessFlag;
void (physx::PxHeightFieldSample::* unused350)() = &physx::PxHeightFieldSample::setTessFlag;
void (physx::PxHeightFieldSample::* unused351)() = &physx::PxHeightFieldSample::clearTessFlag;
void __PxHeightFieldDesc__ctor(void* _this) { new (_this) physx::PxHeightFieldDesc(); }
void (physx::PxHeightFieldDesc::* unused352)() = &physx::PxHeightFieldDesc::setToDefault;
bool (physx::PxHeightFieldDesc::* unused353)() const = &physx::PxHeightFieldDesc::isValid;
void (*unused354)(const physx::PxTriangleMeshGeometry &, const physx::PxTransform &, unsigned int, physx::PxTriangle &, unsigned int *, unsigned int *) = &physx::PxMeshQuery::getTriangle;
void (*unused355)(const physx::PxHeightFieldGeometry &, const physx::PxTransform &, unsigned int, physx::PxTriangle &, unsigned int *, unsigned int *) = &physx::PxMeshQuery::getTriangle;
unsigned int (*unused356)(const physx::PxGeometry &, const physx::PxTransform &, const physx::PxTriangleMeshGeometry &, const physx::PxTransform &, unsigned int *, unsigned int, unsigned int, bool &) = &physx::PxMeshQuery::findOverlapTriangleMesh;
unsigned int (*unused357)(const physx::PxGeometry &, const physx::PxTransform &, const physx::PxHeightFieldGeometry &, const physx::PxTransform &, unsigned int *, unsigned int, unsigned int, bool &) = &physx::PxMeshQuery::findOverlapHeightField;
bool (*unused358)(const physx::PxVec3 &, const float, const physx::PxGeometry &, const physx::PxTransform &, unsigned int, const physx::PxTriangle *, physx::PxSweepHit &, physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>, const unsigned int *, const float, bool) = &physx::PxMeshQuery::sweep;
void __PxSimpleTriangleMesh__ctor(void* _this) { new (_this) physx::PxSimpleTriangleMesh(); }
void (physx::PxSimpleTriangleMesh::* unused359)() = &physx::PxSimpleTriangleMesh::setToDefault;
bool (physx::PxSimpleTriangleMesh::* unused360)() const = &physx::PxSimpleTriangleMesh::isValid;
void __PxTriangle__ctor(void* _this) { new (_this) physx::PxTriangle(); }
void __PxTriangle__ctor(void* _this, const physx::PxVec3 & _0, const physx::PxVec3 & _1, const physx::PxVec3 & _2) { new (_this) physx::PxTriangle(_0, _1, _2); }
void __PxTriangle__ctor(void* _this, const physx::PxTriangle & _0) { new (_this) physx::PxTriangle(_0); }
void (physx::PxTriangle::* unused361)(const physx::PxTriangle &) = &physx::PxTriangle::operator=;
void (physx::PxTriangle::* unused362)(physx::PxVec3 &) const = &physx::PxTriangle::normal;
void (physx::PxTriangle::* unused363)(physx::PxVec3 &) const = &physx::PxTriangle::denormalizedNormal;
float (physx::PxTriangle::* unused364)() const = &physx::PxTriangle::area;
physx::PxVec3 (physx::PxTriangle::* unused365)(float, float) const = &physx::PxTriangle::pointFromUV;
void __PxSceneLimits__ctor(void* _this) { new (_this) physx::PxSceneLimits(); }
void (physx::PxSceneLimits::* unused366)() = &physx::PxSceneLimits::setToDefault;
bool (physx::PxSceneLimits::* unused367)() const = &physx::PxSceneLimits::isValid;
void __PxgDynamicsMemoryConfig__ctor(void* _this) { new (_this) physx::PxgDynamicsMemoryConfig(); }
void __PxSceneDesc__ctor(void* _this, const physx::PxTolerancesScale & _0) { new (_this) physx::PxSceneDesc(_0); }
void (physx::PxSceneDesc::* unused368)(const physx::PxTolerancesScale &) = &physx::PxSceneDesc::setToDefault;
bool (physx::PxSceneDesc::* unused369)() const = &physx::PxSceneDesc::isValid;
const physx::PxTolerancesScale & (physx::PxSceneDesc::* unused370)() const = &physx::PxSceneDesc::getTolerancesScale;
unsigned int (physx::PxSimulationStatistics::* unused371)() const = &physx::PxSimulationStatistics::getNbBroadPhaseAdds;
unsigned int (physx::PxSimulationStatistics::* unused372)() const = &physx::PxSimulationStatistics::getNbBroadPhaseRemoves;
unsigned int (physx::PxSimulationStatistics::* unused373)(physx::PxSimulationStatistics::RbPairStatsType, physx::PxGeometryType::Enum, physx::PxGeometryType::Enum) const = &physx::PxSimulationStatistics::getRbPairStats;
void __PxSimulationStatistics__ctor(void* _this) { new (_this) physx::PxSimulationStatistics(); }
void __PxDominanceGroupPair__ctor(void* _this, unsigned char _0, unsigned char _1) { new (_this) physx::PxDominanceGroupPair(_0, _1); }
void __PxQueryCache__ctor(void* _this) { new (_this) physx::PxQueryCache(); }
void __PxQueryCache__ctor(void* _this, physx::PxShape * _0, unsigned int _1) { new (_this) physx::PxQueryCache(_0, _1); }
void __PxSceneReadLock__ctor(void* _this, physx::PxScene & _0, const char * _1, unsigned int _2) { new (_this) physx::PxSceneReadLock(_0, _1, _2); }
void __PxSceneWriteLock__ctor(void* _this, physx::PxScene & _0, const char * _1, unsigned int _2) { new (_this) physx::PxSceneWriteLock(_0, _1, _2); }
void __PxContactPairExtraDataItem__ctor(void* _this) { new (_this) physx::PxContactPairExtraDataItem(); }
void __PxContactPairVelocity__ctor(void* _this) { new (_this) physx::PxContactPairVelocity(); }
void __PxContactPairPose__ctor(void* _this) { new (_this) physx::PxContactPairPose(); }
void __PxContactPairIndex__ctor(void* _this) { new (_this) physx::PxContactPairIndex(); }
void __PxContactPairExtraDataIterator__ctor(void* _this, const unsigned char * _0, unsigned int _1) { new (_this) physx::PxContactPairExtraDataIterator(_0, _1); }
bool (physx::PxContactPairExtraDataIterator::* unused374)() = &physx::PxContactPairExtraDataIterator::nextItemSet;
void __PxContactPairHeader__ctor(void* _this) { new (_this) physx::PxContactPairHeader(); }
void __PxContactPair__ctor(void* _this) { new (_this) physx::PxContactPair(); }
unsigned int (physx::PxContactPair::* unused375)(physx::PxContactPairPoint *, unsigned int) const = &physx::PxContactPair::extractContacts;
void (physx::PxContactPair::* unused376)(physx::PxContactPair *, unsigned char *) const = &physx::PxContactPair::bufferContacts;
const unsigned int * (physx::PxContactPair::* unused377)() const = &physx::PxContactPair::getInternalFaceIndices;
void __PxTriggerPair__ctor(void* _this) { new (_this) physx::PxTriggerPair(); }
void __PxConstraintInfo__ctor(void* _this) { new (_this) physx::PxConstraintInfo(); }
void __PxConstraintInfo__ctor(void* _this, physx::PxConstraint * _0, void * _1, unsigned int _2) { new (_this) physx::PxConstraintInfo(_0, _1, _2); }
void __PxExtendedVec3__ctor(void* _this) { new (_this) physx::PxExtendedVec3(); }
void __PxExtendedVec3__ctor(void* _this, double _0, double _1, double _2) { new (_this) physx::PxExtendedVec3(_0, _1, _2); }
bool (physx::PxExtendedVec3::* unused378)() const = &physx::PxExtendedVec3::isZero;
double (physx::PxExtendedVec3::* unused379)(const physx::PxVec3 &) const = &physx::PxExtendedVec3::dot;
double (physx::PxExtendedVec3::* unused380)(const physx::PxExtendedVec3 &) const = &physx::PxExtendedVec3::distanceSquared;
double (physx::PxExtendedVec3::* unused381)() const = &physx::PxExtendedVec3::magnitudeSquared;
double (physx::PxExtendedVec3::* unused382)() const = &physx::PxExtendedVec3::magnitude;
double (physx::PxExtendedVec3::* unused383)() = &physx::PxExtendedVec3::normalize;
bool (physx::PxExtendedVec3::* unused384)() const = &physx::PxExtendedVec3::isFinite;
void (physx::PxExtendedVec3::* unused385)(const physx::PxExtendedVec3 &) = &physx::PxExtendedVec3::maximum;
void (physx::PxExtendedVec3::* unused386)(const physx::PxExtendedVec3 &) = &physx::PxExtendedVec3::minimum;
void (physx::PxExtendedVec3::* unused387)(double, double, double) = &physx::PxExtendedVec3::set;
void (physx::PxExtendedVec3::* unused388)() = &physx::PxExtendedVec3::setPlusInfinity;
void (physx::PxExtendedVec3::* unused389)() = &physx::PxExtendedVec3::setMinusInfinity;
void (physx::PxExtendedVec3::* unused390)(const physx::PxExtendedVec3 &, const physx::PxVec3 &) = &physx::PxExtendedVec3::cross;
void (physx::PxExtendedVec3::* unused391)(const physx::PxExtendedVec3 &, const physx::PxExtendedVec3 &) = &physx::PxExtendedVec3::cross;
physx::PxExtendedVec3 (physx::PxExtendedVec3::* unused392)(const physx::PxExtendedVec3 &) const = &physx::PxExtendedVec3::cross;
void (physx::PxExtendedVec3::* unused393)(const physx::PxVec3 &, const physx::PxExtendedVec3 &) = &physx::PxExtendedVec3::cross;
physx::PxExtendedVec3 (physx::PxExtendedVec3::* unused394)() const = &physx::PxExtendedVec3::operator-;
physx::PxExtendedVec3 & (physx::PxExtendedVec3::* unused395)(const physx::PxExtendedVec3 &) = &physx::PxExtendedVec3::operator+=;
physx::PxExtendedVec3 & (physx::PxExtendedVec3::* unused396)(const physx::PxExtendedVec3 &) = &physx::PxExtendedVec3::operator-=;
physx::PxExtendedVec3 & (physx::PxExtendedVec3::* unused397)(const physx::PxVec3 &) = &physx::PxExtendedVec3::operator+=;
physx::PxExtendedVec3 & (physx::PxExtendedVec3::* unused398)(const physx::PxVec3 &) = &physx::PxExtendedVec3::operator-=;
physx::PxExtendedVec3 & (physx::PxExtendedVec3::* unused399)(const float &) = &physx::PxExtendedVec3::operator*=;
physx::PxExtendedVec3 (physx::PxExtendedVec3::* unused400)(const physx::PxExtendedVec3 &) const = &physx::PxExtendedVec3::operator+;
physx::PxVec3 (physx::PxExtendedVec3::* unused401)(const physx::PxExtendedVec3 &) const = &physx::PxExtendedVec3::operator-;
double & (physx::PxExtendedVec3::* unused402)(int) = &physx::PxExtendedVec3::operator[];
double (physx::PxExtendedVec3::* unused403)(int) const = &physx::PxExtendedVec3::operator[];
physx::PxGeometryType::Enum (physx::PxObstacle::* unused404)() const = &physx::PxObstacle::getType;
void __PxBoxObstacle__ctor(void* _this) { new (_this) physx::PxBoxObstacle(); }
void __PxCapsuleObstacle__ctor(void* _this) { new (_this) physx::PxCapsuleObstacle(); }
void __PxControllerFilters__ctor(void* _this, const physx::PxFilterData * _0, physx::PxQueryFilterCallback * _1, physx::PxControllerFilterCallback * _2) { new (_this) physx::PxControllerFilters(_0, _1, _2); }
physx::PxControllerShapeType::Enum (physx::PxControllerDesc::* unused405)() const = &physx::PxControllerDesc::getType;
void __PxBoxControllerDesc__ctor(void* _this) { new (_this) physx::PxBoxControllerDesc(); }
void __PxBoxControllerDesc__ctor(void* _this, const physx::PxBoxControllerDesc & _0) { new (_this) physx::PxBoxControllerDesc(_0); }
physx::PxBoxControllerDesc & (physx::PxBoxControllerDesc::* unused406)(const physx::PxBoxControllerDesc &) = &physx::PxBoxControllerDesc::operator=;
void __PxCapsuleControllerDesc__ctor(void* _this) { new (_this) physx::PxCapsuleControllerDesc(); }
void __PxCapsuleControllerDesc__ctor(void* _this, const physx::PxCapsuleControllerDesc & _0) { new (_this) physx::PxCapsuleControllerDesc(_0); }
physx::PxCapsuleControllerDesc & (physx::PxCapsuleControllerDesc::* unused407)(const physx::PxCapsuleControllerDesc &) = &physx::PxCapsuleControllerDesc::operator=;
void __PxConvexMeshDesc__ctor(void* _this) { new (_this) physx::PxConvexMeshDesc(); }
void (physx::PxConvexMeshDesc::* unused408)() = &physx::PxConvexMeshDesc::setToDefault;
bool (physx::PxConvexMeshDesc::* unused409)() const = &physx::PxConvexMeshDesc::isValid;
void __PxTriangleMeshDesc__ctor(void* _this) { new (_this) physx::PxTriangleMeshDesc(); }
void (physx::PxTriangleMeshDesc::* unused410)() = &physx::PxTriangleMeshDesc::setToDefault;
bool (physx::PxTriangleMeshDesc::* unused411)() const = &physx::PxTriangleMeshDesc::isValid;
void (physx::PxBVH33MidphaseDesc::* unused412)() = &physx::PxBVH33MidphaseDesc::setToDefault;
bool (physx::PxBVH33MidphaseDesc::* unused413)() const = &physx::PxBVH33MidphaseDesc::isValid;
void (physx::PxBVH34MidphaseDesc::* unused414)() = &physx::PxBVH34MidphaseDesc::setToDefault;
bool (physx::PxBVH34MidphaseDesc::* unused415)() const = &physx::PxBVH34MidphaseDesc::isValid;
void __PxMidphaseDesc__ctor(void* _this) { new (_this) physx::PxMidphaseDesc(); }
physx::PxMeshMidPhase::Enum (physx::PxMidphaseDesc::* unused416)() const = &physx::PxMidphaseDesc::getType;
void (physx::PxMidphaseDesc::* unused417)(physx::PxMeshMidPhase::Enum) = &physx::PxMidphaseDesc::setToDefault;
bool (physx::PxMidphaseDesc::* unused418)() const = &physx::PxMidphaseDesc::isValid;
physx::PxMidphaseDesc & (physx::PxMidphaseDesc::* unused419)(physx::PxMeshMidPhase::Enum) = &physx::PxMidphaseDesc::operator=;
void __PxBVHStructureDesc__ctor(void* _this) { new (_this) physx::PxBVHStructureDesc(); }
void (physx::PxBVHStructureDesc::* unused420)() = &physx::PxBVHStructureDesc::setToDefault;
bool (physx::PxBVHStructureDesc::* unused421)() const = &physx::PxBVHStructureDesc::isValid;
void __PxCookingParams__ctor(void* _this, const physx::PxTolerancesScale & _0) { new (_this) physx::PxCookingParams(_0); }
void __PxDefaultMemoryOutputStream__ctor(void* _this, physx::PxAllocatorCallback & _0) { new (_this) physx::PxDefaultMemoryOutputStream(_0); }
void __PxDefaultMemoryInputData__ctor(void* _this, unsigned char * _0, unsigned int _1) { new (_this) physx::PxDefaultMemoryInputData(_0, _1); }
void __PxDefaultFileOutputStream__ctor(void* _this, const char * _0) { new (_this) physx::PxDefaultFileOutputStream(_0); }
void __PxDefaultFileInputData__ctor(void* _this, const char * _0) { new (_this) physx::PxDefaultFileInputData(_0); }
bool (physx::PxDefaultFileInputData::* unused422)() const = &physx::PxDefaultFileInputData::isValid;
void (*unused423)(physx::PxOutputStream &) = &physx::PxJoint::getBinaryMetaData;
void __PxSpring__ctor(void* _this, float _0, float _1) { new (_this) physx::PxSpring(_0, _1); }
void __PxJacobianRow__ctor(void* _this) { new (_this) physx::PxJacobianRow(); }
void __PxJacobianRow__ctor(void* _this, const physx::PxVec3 & _0, const physx::PxVec3 & _1, const physx::PxVec3 & _2, const physx::PxVec3 & _3) { new (_this) physx::PxJacobianRow(_0, _1, _2, _3); }
void (physx::PxJacobianRow::* unused424)(const float) = &physx::PxJacobianRow::operator*=;
physx::PxJacobianRow (physx::PxJacobianRow::* unused425)(const float) const = &physx::PxJacobianRow::operator*;
void __PxJointLimitParameters__ctor(void* _this) { new (_this) physx::PxJointLimitParameters(); }
void __PxJointLimitParameters__ctor(void* _this, const physx::PxJointLimitParameters & _0) { new (_this) physx::PxJointLimitParameters(_0); }
bool (physx::PxJointLimitParameters::* unused426)() const = &physx::PxJointLimitParameters::isValid;
bool (physx::PxJointLimitParameters::* unused427)() const = &physx::PxJointLimitParameters::isSoft;
void __PxJointLinearLimit__ctor(void* _this, const physx::PxTolerancesScale & _0, float _1, float _2) { new (_this) physx::PxJointLinearLimit(_0, _1, _2); }
void __PxJointLinearLimit__ctor(void* _this, float _0, const physx::PxSpring & _1) { new (_this) physx::PxJointLinearLimit(_0, _1); }
bool (physx::PxJointLinearLimit::* unused428)() const = &physx::PxJointLinearLimit::isValid;
void __PxJointLinearLimitPair__ctor(void* _this, const physx::PxTolerancesScale & _0, float _1, float _2, float _3) { new (_this) physx::PxJointLinearLimitPair(_0, _1, _2, _3); }
void __PxJointLinearLimitPair__ctor(void* _this, float _0, float _1, const physx::PxSpring & _2) { new (_this) physx::PxJointLinearLimitPair(_0, _1, _2); }
bool (physx::PxJointLinearLimitPair::* unused429)() const = &physx::PxJointLinearLimitPair::isValid;
void __PxJointAngularLimitPair__ctor(void* _this, float _0, float _1, float _2) { new (_this) physx::PxJointAngularLimitPair(_0, _1, _2); }
void __PxJointAngularLimitPair__ctor(void* _this, float _0, float _1, const physx::PxSpring & _2) { new (_this) physx::PxJointAngularLimitPair(_0, _1, _2); }
bool (physx::PxJointAngularLimitPair::* unused430)() const = &physx::PxJointAngularLimitPair::isValid;
void __PxJointLimitCone__ctor(void* _this, float _0, float _1, float _2) { new (_this) physx::PxJointLimitCone(_0, _1, _2); }
void __PxJointLimitCone__ctor(void* _this, float _0, float _1, const physx::PxSpring & _2) { new (_this) physx::PxJointLimitCone(_0, _1, _2); }
bool (physx::PxJointLimitCone::* unused431)() const = &physx::PxJointLimitCone::isValid;
void __PxJointLimitPyramid__ctor(void* _this, float _0, float _1, float _2, float _3, float _4) { new (_this) physx::PxJointLimitPyramid(_0, _1, _2, _3, _4); }
void __PxJointLimitPyramid__ctor(void* _this, float _0, float _1, float _2, float _3, const physx::PxSpring & _4) { new (_this) physx::PxJointLimitPyramid(_0, _1, _2, _3, _4); }
bool (physx::PxJointLimitPyramid::* unused432)() const = &physx::PxJointLimitPyramid::isValid;
void __PxD6JointDrive__ctor(void* _this) { new (_this) physx::PxD6JointDrive(); }
void __PxD6JointDrive__ctor(void* _this, float _0, float _1, float _2, bool _3) { new (_this) physx::PxD6JointDrive(_0, _1, _2, _3); }
bool (physx::PxD6JointDrive::* unused433)() const = &physx::PxD6JointDrive::isValid;
float (physx::PxD6Joint::* unused434)() const = &physx::PxD6Joint::getTwist;
void (physx::PxD6Joint::* unused435)(const physx::PxJointLinearLimit &) = &physx::PxD6Joint::setLinearLimit;
physx::PxJointLinearLimit (physx::PxD6Joint::* unused436)() const = &physx::PxD6Joint::getLinearLimit;
void __PxGroupsMask__ctor(void* _this) { new (_this) physx::PxGroupsMask(); }
void __PxDefaultErrorCallback__ctor(void* _this) { new (_this) physx::PxDefaultErrorCallback(); }
physx::PxShape * (*unused437)(physx::PxRigidActor &, const physx::PxGeometry &, physx::PxMaterial *const *, unsigned short, physx::PxFlags<physx::PxShapeFlag::Enum, unsigned char>) = &physx::PxRigidActorExt::createExclusiveShape;
physx::PxShape * (*unused438)(physx::PxRigidActor &, const physx::PxGeometry &, const physx::PxMaterial &, physx::PxFlags<physx::PxShapeFlag::Enum, unsigned char>) = &physx::PxRigidActorExt::createExclusiveShape;
physx::PxBounds3 * (*unused439)(const physx::PxRigidActor &, unsigned int &) = &physx::PxRigidActorExt::getRigidActorShapeLocalBoundsList;
void __PxMassProperties__ctor(void* _this) { new (_this) physx::PxMassProperties(); }
void __PxMassProperties__ctor(void* _this, const float _0, const physx::PxMat33 & _1, const physx::PxVec3 & _2) { new (_this) physx::PxMassProperties(_0, _1, _2); }
void __PxMassProperties__ctor(void* _this, const physx::PxGeometry & _0) { new (_this) physx::PxMassProperties(_0); }
physx::PxMassProperties (physx::PxMassProperties::* unused440)(const float) const = &physx::PxMassProperties::operator*;
void (physx::PxMassProperties::* unused441)(const physx::PxVec3 &) = &physx::PxMassProperties::translate;
physx::PxVec3 (*unused442)(const physx::PxMat33 &, physx::PxQuat &) = &physx::PxMassProperties::getMassSpaceInertia;
physx::PxMat33 (*unused443)(const physx::PxMat33 &, const float, const physx::PxVec3 &) = &physx::PxMassProperties::translateInertia;
physx::PxMat33 (*unused444)(const physx::PxMat33 &, const physx::PxQuat &) = &physx::PxMassProperties::rotateInertia;
physx::PxMat33 (*unused445)(const physx::PxMat33 &, const physx::PxQuat &, const physx::PxVec3 &) = &physx::PxMassProperties::scaleInertia;
physx::PxMassProperties (*unused446)(const physx::PxMassProperties *, const physx::PxTransform *, const unsigned int) = &physx::PxMassProperties::sum;
bool (*unused447)(physx::PxRigidBody &, const float *, unsigned int, const physx::PxVec3 *, bool) = &physx::PxRigidBodyExt::updateMassAndInertia;
bool (*unused448)(physx::PxRigidBody &, float, const physx::PxVec3 *, bool) = &physx::PxRigidBodyExt::updateMassAndInertia;
bool (*unused449)(physx::PxRigidBody &, const float *, unsigned int, const physx::PxVec3 *, bool) = &physx::PxRigidBodyExt::setMassAndUpdateInertia;
bool (*unused450)(physx::PxRigidBody &, float, const physx::PxVec3 *, bool) = &physx::PxRigidBodyExt::setMassAndUpdateInertia;
physx::PxMassProperties (*unused451)(const physx::PxShape *const *, unsigned int) = &physx::PxRigidBodyExt::computeMassPropertiesFromShapes;
void (*unused452)(physx::PxRigidBody &, const physx::PxVec3 &, const physx::PxVec3 &, physx::PxForceMode::Enum, bool) = &physx::PxRigidBodyExt::addForceAtPos;
void (*unused453)(physx::PxRigidBody &, const physx::PxVec3 &, const physx::PxVec3 &, physx::PxForceMode::Enum, bool) = &physx::PxRigidBodyExt::addForceAtLocalPos;
void (*unused454)(physx::PxRigidBody &, const physx::PxVec3 &, const physx::PxVec3 &, physx::PxForceMode::Enum, bool) = &physx::PxRigidBodyExt::addLocalForceAtPos;
void (*unused455)(physx::PxRigidBody &, const physx::PxVec3 &, const physx::PxVec3 &, physx::PxForceMode::Enum, bool) = &physx::PxRigidBodyExt::addLocalForceAtLocalPos;
physx::PxVec3 (*unused456)(const physx::PxRigidBody &, const physx::PxVec3 &) = &physx::PxRigidBodyExt::getVelocityAtPos;
physx::PxVec3 (*unused457)(const physx::PxRigidBody &, const physx::PxVec3 &) = &physx::PxRigidBodyExt::getLocalVelocityAtLocalPos;
physx::PxVec3 (*unused458)(const physx::PxRigidBody &, const physx::PxVec3 &) = &physx::PxRigidBodyExt::getVelocityAtOffset;
bool (*unused459)(physx::PxRigidBody &, physx::PxScene &, const physx::PxVec3 &, const float, physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>, physx::PxSweepHit &, unsigned int &, const physx::PxQueryFilterData &, physx::PxQueryFilterCallback *, const physx::PxQueryCache *, const float) = &physx::PxRigidBodyExt::linearSweepSingle;
unsigned int (*unused460)(physx::PxRigidBody &, physx::PxScene &, const physx::PxVec3 &, const float, physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>, physx::PxSweepHit *, unsigned int *, unsigned int, physx::PxSweepHit &, int &, bool &, const physx::PxQueryFilterData &, physx::PxQueryFilterCallback *, const physx::PxQueryCache *, const float) = &physx::PxRigidBodyExt::linearSweepMultiple;
void (*unused461)(const physx::PxRigidBody &, const physx::PxVec3 &, const physx::PxVec3 &, physx::PxVec3 &, physx::PxVec3 &) = &physx::PxRigidBodyExt::computeVelocityDeltaFromImpulse;
void (*unused462)(const physx::PxRigidBody &, const physx::PxTransform &, const physx::PxVec3 &, const physx::PxVec3 &, const float, const float, physx::PxVec3 &, physx::PxVec3 &) = &physx::PxRigidBodyExt::computeVelocityDeltaFromImpulse;
void (*unused463)(const physx::PxRigidBody &, const physx::PxTransform &, const physx::PxVec3 &, const physx::PxVec3 &, const float, const float, physx::PxVec3 &, physx::PxVec3 &) = &physx::PxRigidBodyExt::computeLinearAngularImpulse;
physx::PxTransform (*unused464)(const physx::PxShape &, const physx::PxRigidActor &) = &physx::PxShapeExt::getGlobalPose;
unsigned int (*unused465)(const physx::PxShape &, const physx::PxRigidActor &, const physx::PxVec3 &, const physx::PxVec3 &, float, physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>, unsigned int, physx::PxRaycastHit *) = &physx::PxShapeExt::raycast;
bool (*unused466)(const physx::PxShape &, const physx::PxRigidActor &, const physx::PxGeometry &, const physx::PxTransform &) = &physx::PxShapeExt::overlap;
bool (*unused467)(const physx::PxShape &, const physx::PxRigidActor &, const physx::PxVec3 &, const float, const physx::PxGeometry &, const physx::PxTransform &, physx::PxSweepHit &, physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>) = &physx::PxShapeExt::sweep;
physx::PxBounds3 (*unused468)(const physx::PxShape &, const physx::PxRigidActor &, float) = &physx::PxShapeExt::getWorldBounds;
void __PxMeshOverlapUtil__ctor(void* _this) { new (_this) physx::PxMeshOverlapUtil(); }
unsigned int (physx::PxMeshOverlapUtil::* unused469)(const physx::PxGeometry &, const physx::PxTransform &, const physx::PxTriangleMeshGeometry &, const physx::PxTransform &) = &physx::PxMeshOverlapUtil::findOverlap;
unsigned int (physx::PxMeshOverlapUtil::* unused470)(const physx::PxGeometry &, const physx::PxTransform &, const physx::PxHeightFieldGeometry &, const physx::PxTransform &) = &physx::PxMeshOverlapUtil::findOverlap;
const unsigned int * (physx::PxMeshOverlapUtil::* unused471)() const = &physx::PxMeshOverlapUtil::getResults;
unsigned int (physx::PxMeshOverlapUtil::* unused472)() const = &physx::PxMeshOverlapUtil::getNbResults;
void __PxXmlMiscParameter__ctor(void* _this) { new (_this) physx::PxSerialization::PxXmlMiscParameter(); }
void __PxXmlMiscParameter__ctor(void* _this, physx::PxVec3 & _0, physx::PxTolerancesScale _1) { new (_this) physx::PxSerialization::PxXmlMiscParameter(_0, _1); }
bool (*unused473)(physx::PxCollection &, physx::PxSerializationRegistry &, const physx::PxCollection *) = &physx::PxSerialization::isSerializable;
void (*unused474)(physx::PxCollection &, physx::PxSerializationRegistry &, const physx::PxCollection *, bool) = &physx::PxSerialization::complete;
void (*unused475)(physx::PxCollection &, const unsigned long long) = &physx::PxSerialization::createSerialObjectIds;
physx::PxCollection * (*unused476)(physx::PxInputData &, physx::PxCooking &, physx::PxSerializationRegistry &, const physx::PxCollection *, physx::PxStringTable *, physx::PxSerialization::PxXmlMiscParameter *) = &physx::PxSerialization::createCollectionFromXml;
physx::PxCollection * (*unused477)(void *, physx::PxSerializationRegistry &, const physx::PxCollection *) = &physx::PxSerialization::createCollectionFromBinary;
bool (*unused478)(physx::PxOutputStream &, physx::PxCollection &, physx::PxSerializationRegistry &, physx::PxCooking *, const physx::PxCollection *, physx::PxSerialization::PxXmlMiscParameter *) = &physx::PxSerialization::serializeCollectionToXml;
bool (*unused479)(physx::PxOutputStream &, physx::PxCollection &, physx::PxSerializationRegistry &, const physx::PxCollection *, bool) = &physx::PxSerialization::serializeCollectionToBinary;
bool (*unused480)(physx::PxOutputStream &, physx::PxCollection &, physx::PxSerializationRegistry &, const physx::PxCollection *, bool) = &physx::PxSerialization::serializeCollectionToBinaryDeterministic;
void (*unused481)(physx::PxOutputStream &, physx::PxSerializationRegistry &) = &physx::PxSerialization::dumpBinaryMetaData;
physx::PxBinaryConverter * (*unused482)() = &physx::PxSerialization::createBinaryConverter;
physx::PxSerializationRegistry * (*unused483)(physx::PxPhysics &) = &physx::PxSerialization::createSerializationRegistry;
physx::PxStringTable & (*unused484)(physx::PxAllocatorCallback &) = &physx::PxStringTableExt::createStringTable;
unsigned int (*unused485)(physx::PxBounds3 *, const physx::PxBounds3 &, unsigned int, unsigned int) = &physx::PxBroadPhaseExt::createRegionsFromWorldBounds;
bool (*unused486)(const physx::PxScene &, const physx::PxVec3 &, const physx::PxVec3 &, const float, physx::PxQueryHit &, const physx::PxQueryFilterData &, physx::PxQueryFilterCallback *, const physx::PxQueryCache *) = &physx::PxSceneQueryExt::raycastAny;
bool (*unused487)(const physx::PxScene &, const physx::PxVec3 &, const physx::PxVec3 &, const float, physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>, physx::PxRaycastHit &, const physx::PxQueryFilterData &, physx::PxQueryFilterCallback *, const physx::PxQueryCache *) = &physx::PxSceneQueryExt::raycastSingle;
int (*unused488)(const physx::PxScene &, const physx::PxVec3 &, const physx::PxVec3 &, const float, physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>, physx::PxRaycastHit *, unsigned int, bool &, const physx::PxQueryFilterData &, physx::PxQueryFilterCallback *, const physx::PxQueryCache *) = &physx::PxSceneQueryExt::raycastMultiple;
bool (*unused489)(const physx::PxScene &, const physx::PxGeometry &, const physx::PxTransform &, const physx::PxVec3 &, const float, physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>, physx::PxQueryHit &, const physx::PxQueryFilterData &, physx::PxQueryFilterCallback *, const physx::PxQueryCache *, float) = &physx::PxSceneQueryExt::sweepAny;
bool (*unused490)(const physx::PxScene &, const physx::PxGeometry &, const physx::PxTransform &, const physx::PxVec3 &, const float, physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>, physx::PxSweepHit &, const physx::PxQueryFilterData &, physx::PxQueryFilterCallback *, const physx::PxQueryCache *, float) = &physx::PxSceneQueryExt::sweepSingle;
int (*unused491)(const physx::PxScene &, const physx::PxGeometry &, const physx::PxTransform &, const physx::PxVec3 &, const float, physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>, physx::PxSweepHit *, unsigned int, bool &, const physx::PxQueryFilterData &, physx::PxQueryFilterCallback *, const physx::PxQueryCache *, float) = &physx::PxSceneQueryExt::sweepMultiple;
int (*unused492)(const physx::PxScene &, const physx::PxGeometry &, const physx::PxTransform &, physx::PxOverlapHit *, unsigned int, const physx::PxQueryFilterData &, physx::PxQueryFilterCallback *) = &physx::PxSceneQueryExt::overlapMultiple;
bool (*unused493)(const physx::PxScene &, const physx::PxGeometry &, const physx::PxTransform &, physx::PxOverlapHit &, const physx::PxQueryFilterData &, physx::PxQueryFilterCallback *) = &physx::PxSceneQueryExt::overlapAny;
void __PxRepXObject__ctor(void* _this, const char * _0, const void * _1, const unsigned long long _2) { new (_this) physx::PxRepXObject(_0, _1, _2); }
bool (physx::PxRepXObject::* unused494)() const = &physx::PxRepXObject::isValid;
void __PxRepXInstantiationArgs__ctor(void* _this, physx::PxPhysics & _0, physx::PxCooking * _1, physx::PxStringTable * _2) { new (_this) physx::PxRepXInstantiationArgs(_0, _1, _2); }
void __PxVehicleChassisData__ctor(void* _this) { new (_this) physx::PxVehicleChassisData(); }
void __PxVehicleEngineData__ctor(void* _this) { new (_this) physx::PxVehicleEngineData(); }
float (physx::PxVehicleEngineData::* unused495)() const = &physx::PxVehicleEngineData::getRecipMOI;
float (physx::PxVehicleEngineData::* unused496)() const = &physx::PxVehicleEngineData::getRecipMaxOmega;
void __PxVehicleEngineData__ctor(void* _this, const physx::PxEMPTY _0) { new (_this) physx::PxVehicleEngineData(_0); }
void __PxVehicleGearsData__ctor(void* _this) { new (_this) physx::PxVehicleGearsData(); }
void __PxVehicleGearsData__ctor(void* _this, const physx::PxEMPTY _0) { new (_this) physx::PxVehicleGearsData(_0); }
float (physx::PxVehicleGearsData::* unused497)(physx::PxVehicleGearsData::Enum) const = &physx::PxVehicleGearsData::getGearRatio;
void (physx::PxVehicleGearsData::* unused498)(physx::PxVehicleGearsData::Enum, float) = &physx::PxVehicleGearsData::setGearRatio;
void __PxVehicleAutoBoxData__ctor(void* _this) { new (_this) physx::PxVehicleAutoBoxData(); }
void (physx::PxVehicleAutoBoxData::* unused499)(const float) = &physx::PxVehicleAutoBoxData::setLatency;
float (physx::PxVehicleAutoBoxData::* unused500)() const = &physx::PxVehicleAutoBoxData::getLatency;
void __PxVehicleAutoBoxData__ctor(void* _this, const physx::PxEMPTY _0) { new (_this) physx::PxVehicleAutoBoxData(_0); }
float (physx::PxVehicleAutoBoxData::* unused501)(physx::PxVehicleGearsData::Enum) const = &physx::PxVehicleAutoBoxData::getUpRatios;
void (physx::PxVehicleAutoBoxData::* unused502)(physx::PxVehicleGearsData::Enum, float) = &physx::PxVehicleAutoBoxData::setUpRatios;
float (physx::PxVehicleAutoBoxData::* unused503)(physx::PxVehicleGearsData::Enum) const = &physx::PxVehicleAutoBoxData::getDownRatios;
void (physx::PxVehicleAutoBoxData::* unused504)(physx::PxVehicleGearsData::Enum, float) = &physx::PxVehicleAutoBoxData::setDownRatios;
void __PxVehicleDifferential4WData__ctor(void* _this) { new (_this) physx::PxVehicleDifferential4WData(); }
void __PxVehicleDifferential4WData__ctor(void* _this, const physx::PxEMPTY _0) { new (_this) physx::PxVehicleDifferential4WData(_0); }
void __PxVehicleDifferentialNWData__ctor(void* _this) { new (_this) physx::PxVehicleDifferentialNWData(); }
void (physx::PxVehicleDifferentialNWData::* unused505)(const unsigned int, const bool) = &physx::PxVehicleDifferentialNWData::setDrivenWheel;
bool (physx::PxVehicleDifferentialNWData::* unused506)(const unsigned int) const = &physx::PxVehicleDifferentialNWData::getIsDrivenWheel;
void __PxVehicleDifferentialNWData__ctor(void* _this, const physx::PxEMPTY _0) { new (_this) physx::PxVehicleDifferentialNWData(_0); }
unsigned int (physx::PxVehicleDifferentialNWData::* unused507)() const = &physx::PxVehicleDifferentialNWData::getDrivenWheelStatus;
void (physx::PxVehicleDifferentialNWData::* unused508)(unsigned int) = &physx::PxVehicleDifferentialNWData::setDrivenWheelStatus;
void __PxVehicleAckermannGeometryData__ctor(void* _this) { new (_this) physx::PxVehicleAckermannGeometryData(); }
void __PxVehicleAckermannGeometryData__ctor(void* _this, const physx::PxEMPTY _0) { new (_this) physx::PxVehicleAckermannGeometryData(_0); }
void __PxVehicleClutchData__ctor(void* _this) { new (_this) physx::PxVehicleClutchData(); }
void __PxVehicleClutchData__ctor(void* _this, const physx::PxEMPTY _0) { new (_this) physx::PxVehicleClutchData(_0); }
void __PxVehicleTireLoadFilterData__ctor(void* _this) { new (_this) physx::PxVehicleTireLoadFilterData(); }
float (physx::PxVehicleTireLoadFilterData::* unused509)() const = &physx::PxVehicleTireLoadFilterData::getDenominator;
void __PxVehicleTireLoadFilterData__ctor(void* _this, const physx::PxEMPTY _0) { new (_this) physx::PxVehicleTireLoadFilterData(_0); }
void __PxVehicleWheelData__ctor(void* _this) { new (_this) physx::PxVehicleWheelData(); }
float (physx::PxVehicleWheelData::* unused510)() const = &physx::PxVehicleWheelData::getRecipRadius;
float (physx::PxVehicleWheelData::* unused511)() const = &physx::PxVehicleWheelData::getRecipMOI;
void __PxVehicleSuspensionData__ctor(void* _this) { new (_this) physx::PxVehicleSuspensionData(); }
float (physx::PxVehicleSuspensionData::* unused512)() const = &physx::PxVehicleSuspensionData::getRecipMaxCompression;
float (physx::PxVehicleSuspensionData::* unused513)() const = &physx::PxVehicleSuspensionData::getRecipMaxDroop;
void (physx::PxVehicleSuspensionData::* unused514)(const float) = &physx::PxVehicleSuspensionData::setMassAndPreserveNaturalFrequency;
void __PxVehicleAntiRollBarData__ctor(void* _this) { new (_this) physx::PxVehicleAntiRollBarData(); }
void __PxVehicleTireData__ctor(void* _this) { new (_this) physx::PxVehicleTireData(); }
float (physx::PxVehicleTireData::* unused515)() const = &physx::PxVehicleTireData::getRecipLongitudinalStiffnessPerUnitGravity;
float (physx::PxVehicleTireData::* unused516)() const = &physx::PxVehicleTireData::getFrictionVsSlipGraphRecipx1Minusx0;
float (physx::PxVehicleTireData::* unused517)() const = &physx::PxVehicleTireData::getFrictionVsSlipGraphRecipx2Minusx1;
physx::PxVehicleWheelsSimData * (*unused518)(const unsigned int) = &physx::PxVehicleWheelsSimData::allocate;
void (physx::PxVehicleWheelsSimData::* unused519)(const float) = &physx::PxVehicleWheelsSimData::setChassisMass;
void (physx::PxVehicleWheelsSimData::* unused520)() = &physx::PxVehicleWheelsSimData::free;
physx::PxVehicleWheelsSimData & (physx::PxVehicleWheelsSimData::* unused521)(const physx::PxVehicleWheelsSimData &) = &physx::PxVehicleWheelsSimData::operator=;
void (physx::PxVehicleWheelsSimData::* unused522)(const physx::PxVehicleWheelsSimData &, const unsigned int, const unsigned int) = &physx::PxVehicleWheelsSimData::copy;
unsigned int (physx::PxVehicleWheelsSimData::* unused523)() const = &physx::PxVehicleWheelsSimData::getNbWheels;
const physx::PxVehicleSuspensionData & (physx::PxVehicleWheelsSimData::* unused524)(const unsigned int) const = &physx::PxVehicleWheelsSimData::getSuspensionData;
const physx::PxVehicleWheelData & (physx::PxVehicleWheelsSimData::* unused525)(const unsigned int) const = &physx::PxVehicleWheelsSimData::getWheelData;
const physx::PxVehicleTireData & (physx::PxVehicleWheelsSimData::* unused526)(const unsigned int) const = &physx::PxVehicleWheelsSimData::getTireData;
const physx::PxVec3 & (physx::PxVehicleWheelsSimData::* unused527)(const unsigned int) const = &physx::PxVehicleWheelsSimData::getSuspTravelDirection;
const physx::PxVec3 & (physx::PxVehicleWheelsSimData::* unused528)(const unsigned int) const = &physx::PxVehicleWheelsSimData::getSuspForceAppPointOffset;
const physx::PxVec3 & (physx::PxVehicleWheelsSimData::* unused529)(const unsigned int) const = &physx::PxVehicleWheelsSimData::getTireForceAppPointOffset;
const physx::PxVec3 & (physx::PxVehicleWheelsSimData::* unused530)(const unsigned int) const = &physx::PxVehicleWheelsSimData::getWheelCentreOffset;
int (physx::PxVehicleWheelsSimData::* unused531)(const unsigned int) const = &physx::PxVehicleWheelsSimData::getWheelShapeMapping;
const physx::PxFilterData & (physx::PxVehicleWheelsSimData::* unused532)(const unsigned int) const = &physx::PxVehicleWheelsSimData::getSceneQueryFilterData;
unsigned int (physx::PxVehicleWheelsSimData::* unused533)() const = &physx::PxVehicleWheelsSimData::getNbAntiRollBars;
const physx::PxVehicleAntiRollBarData & (physx::PxVehicleWheelsSimData::* unused534)(const unsigned int) const = &physx::PxVehicleWheelsSimData::getAntiRollBarData;
const physx::PxVehicleTireLoadFilterData & (physx::PxVehicleWheelsSimData::* unused535)() const = &physx::PxVehicleWheelsSimData::getTireLoadFilterData;
void (physx::PxVehicleWheelsSimData::* unused536)(const unsigned int, const physx::PxVehicleSuspensionData &) = &physx::PxVehicleWheelsSimData::setSuspensionData;
void (physx::PxVehicleWheelsSimData::* unused537)(const unsigned int, const physx::PxVehicleWheelData &) = &physx::PxVehicleWheelsSimData::setWheelData;
void (physx::PxVehicleWheelsSimData::* unused538)(const unsigned int, const physx::PxVehicleTireData &) = &physx::PxVehicleWheelsSimData::setTireData;
void (physx::PxVehicleWheelsSimData::* unused539)(const unsigned int, const physx::PxVec3 &) = &physx::PxVehicleWheelsSimData::setSuspTravelDirection;
void (physx::PxVehicleWheelsSimData::* unused540)(const unsigned int, const physx::PxVec3 &) = &physx::PxVehicleWheelsSimData::setSuspForceAppPointOffset;
void (physx::PxVehicleWheelsSimData::* unused541)(const unsigned int, const physx::PxVec3 &) = &physx::PxVehicleWheelsSimData::setTireForceAppPointOffset;
void (physx::PxVehicleWheelsSimData::* unused542)(const unsigned int, const physx::PxVec3 &) = &physx::PxVehicleWheelsSimData::setWheelCentreOffset;
void (physx::PxVehicleWheelsSimData::* unused543)(const unsigned int, const int) = &physx::PxVehicleWheelsSimData::setWheelShapeMapping;
void (physx::PxVehicleWheelsSimData::* unused544)(const unsigned int, const physx::PxFilterData &) = &physx::PxVehicleWheelsSimData::setSceneQueryFilterData;
void (physx::PxVehicleWheelsSimData::* unused545)(const physx::PxVehicleTireLoadFilterData &) = &physx::PxVehicleWheelsSimData::setTireLoadFilterData;
unsigned int (physx::PxVehicleWheelsSimData::* unused546)(const physx::PxVehicleAntiRollBarData &) = &physx::PxVehicleWheelsSimData::addAntiRollBarData;
void (physx::PxVehicleWheelsSimData::* unused547)(const unsigned int) = &physx::PxVehicleWheelsSimData::disableWheel;
void (physx::PxVehicleWheelsSimData::* unused548)(const unsigned int) = &physx::PxVehicleWheelsSimData::enableWheel;
bool (physx::PxVehicleWheelsSimData::* unused549)(const unsigned int) const = &physx::PxVehicleWheelsSimData::getIsWheelDisabled;
void (physx::PxVehicleWheelsSimData::* unused550)(const float, const unsigned int, const unsigned int) = &physx::PxVehicleWheelsSimData::setSubStepCount;
void (physx::PxVehicleWheelsSimData::* unused551)(const float) = &physx::PxVehicleWheelsSimData::setMinLongSlipDenominator;
void (physx::PxVehicleWheelsSimData::* unused552)(physx::PxFlags<physx::PxVehicleWheelsSimFlag::Enum, unsigned int>) = &physx::PxVehicleWheelsSimData::setFlags;
physx::PxFlags<physx::PxVehicleWheelsSimFlag::Enum, unsigned int> (physx::PxVehicleWheelsSimData::* unused553)() const = &physx::PxVehicleWheelsSimData::getFlags;
void __PxVehicleWheelsSimData__ctor(void* _this, const physx::PxEMPTY _0) { new (_this) physx::PxVehicleWheelsSimData(_0); }
void (*unused554)(physx::PxOutputStream &) = &physx::PxVehicleWheelsSimData::getBinaryMetaData;
unsigned int (physx::PxVehicleWheelsSimData::* unused555)() const = &physx::PxVehicleWheelsSimData::getNbWheels4;
unsigned int (physx::PxVehicleWheelsSimData::* unused556)() const = &physx::PxVehicleWheelsSimData::getNbSuspensionData;
unsigned int (physx::PxVehicleWheelsSimData::* unused557)() const = &physx::PxVehicleWheelsSimData::getNbWheelData;
unsigned int (physx::PxVehicleWheelsSimData::* unused558)() const = &physx::PxVehicleWheelsSimData::getNbSuspTravelDirection;
unsigned int (physx::PxVehicleWheelsSimData::* unused559)() const = &physx::PxVehicleWheelsSimData::getNbTireData;
unsigned int (physx::PxVehicleWheelsSimData::* unused560)() const = &physx::PxVehicleWheelsSimData::getNbSuspForceAppPointOffset;
unsigned int (physx::PxVehicleWheelsSimData::* unused561)() const = &physx::PxVehicleWheelsSimData::getNbTireForceAppPointOffset;
unsigned int (physx::PxVehicleWheelsSimData::* unused562)() const = &physx::PxVehicleWheelsSimData::getNbWheelCentreOffset;
unsigned int (physx::PxVehicleWheelsSimData::* unused563)() const = &physx::PxVehicleWheelsSimData::getNbWheelShapeMapping;
unsigned int (physx::PxVehicleWheelsSimData::* unused564)() const = &physx::PxVehicleWheelsSimData::getNbSceneQueryFilterData;
float (physx::PxVehicleWheelsSimData::* unused565)() const = &physx::PxVehicleWheelsSimData::getMinLongSlipDenominator;
void (physx::PxVehicleWheelsSimData::* unused566)(const float) = &physx::PxVehicleWheelsSimData::setThresholdLongSpeed;
float (physx::PxVehicleWheelsSimData::* unused567)() const = &physx::PxVehicleWheelsSimData::getThresholdLongSpeed;
void (physx::PxVehicleWheelsSimData::* unused568)(const unsigned int) = &physx::PxVehicleWheelsSimData::setLowForwardSpeedSubStepCount;
unsigned int (physx::PxVehicleWheelsSimData::* unused569)() const = &physx::PxVehicleWheelsSimData::getLowForwardSpeedSubStepCount;
void (physx::PxVehicleWheelsSimData::* unused570)(const unsigned int) = &physx::PxVehicleWheelsSimData::setHighForwardSpeedSubStepCount;
unsigned int (physx::PxVehicleWheelsSimData::* unused571)() const = &physx::PxVehicleWheelsSimData::getHighForwardSpeedSubStepCount;
void (physx::PxVehicleWheelsSimData::* unused572)(const unsigned int, const bool) = &physx::PxVehicleWheelsSimData::setWheelEnabledState;
bool (physx::PxVehicleWheelsSimData::* unused573)(const unsigned int) const = &physx::PxVehicleWheelsSimData::getWheelEnabledState;
unsigned int (physx::PxVehicleWheelsSimData::* unused574)() const = &physx::PxVehicleWheelsSimData::getNbWheelEnabledState;
unsigned int (physx::PxVehicleWheelsSimData::* unused575)() const = &physx::PxVehicleWheelsSimData::getNbAntiRollBars4;
unsigned int (physx::PxVehicleWheelsSimData::* unused576)() const = &physx::PxVehicleWheelsSimData::getNbAntiRollBarData;
void (physx::PxVehicleWheelsSimData::* unused577)(const unsigned int, const physx::PxVehicleAntiRollBarData &) = &physx::PxVehicleWheelsSimData::setAntiRollBarData;
void __PxVehicleWheelsSimData__ctor(void* _this) { new (_this) physx::PxVehicleWheelsSimData(); }
void __PxVehicleWheelsDynData__ctor(void* _this) { new (_this) physx::PxVehicleWheelsDynData(); }
void (physx::PxVehicleWheelsDynData::* unused578)() = &physx::PxVehicleWheelsDynData::setToRestState;
void (physx::PxVehicleWheelsDynData::* unused579)(void (*)(const void *, float, float, float, float, float, float, float, float, float, float, float, float, float &, float &, float &, float &)) = &physx::PxVehicleWheelsDynData::setTireForceShaderFunction;
void (physx::PxVehicleWheelsDynData::* unused580)(const unsigned int, const void *) = &physx::PxVehicleWheelsDynData::setTireForceShaderData;
const void * (physx::PxVehicleWheelsDynData::* unused581)(const unsigned int) const = &physx::PxVehicleWheelsDynData::getTireForceShaderData;
void (physx::PxVehicleWheelsDynData::* unused582)(const unsigned int, const float) = &physx::PxVehicleWheelsDynData::setWheelRotationSpeed;
float (physx::PxVehicleWheelsDynData::* unused583)(const unsigned int) const = &physx::PxVehicleWheelsDynData::getWheelRotationSpeed;
void (physx::PxVehicleWheelsDynData::* unused584)(const unsigned int, const float) = &physx::PxVehicleWheelsDynData::setWheelRotationAngle;
float (physx::PxVehicleWheelsDynData::* unused585)(const unsigned int) const = &physx::PxVehicleWheelsDynData::getWheelRotationAngle;
void (physx::PxVehicleWheelsDynData::* unused586)(const unsigned int, void *) = &physx::PxVehicleWheelsDynData::setUserData;
void * (physx::PxVehicleWheelsDynData::* unused587)(const unsigned int) const = &physx::PxVehicleWheelsDynData::getUserData;
void (physx::PxVehicleWheelsDynData::* unused588)(const physx::PxVehicleWheelsDynData &, const unsigned int, const unsigned int) = &physx::PxVehicleWheelsDynData::copy;
void (*unused589)(physx::PxOutputStream &) = &physx::PxVehicleWheelsDynData::getBinaryMetaData;
unsigned int (physx::PxVehicleWheelsDynData::* unused590)() const = &physx::PxVehicleWheelsDynData::getNbWheelRotationSpeed;
unsigned int (physx::PxVehicleWheelsDynData::* unused591)() const = &physx::PxVehicleWheelsDynData::getNbWheelRotationAngle;
physx::PxVehicleWheels4DynData * (physx::PxVehicleWheelsDynData::* unused592)() const = &physx::PxVehicleWheelsDynData::getWheel4DynData;
unsigned int (physx::PxVehicleWheels::* unused593)() const = &physx::PxVehicleWheels::getVehicleType;
physx::PxRigidDynamic * (physx::PxVehicleWheels::* unused594)() = &physx::PxVehicleWheels::getRigidDynamicActor;
const physx::PxRigidDynamic * (physx::PxVehicleWheels::* unused595)() const = &physx::PxVehicleWheels::getRigidDynamicActor;
float (physx::PxVehicleWheels::* unused596)() const = &physx::PxVehicleWheels::computeForwardSpeed;
float (physx::PxVehicleWheels::* unused597)() const = &physx::PxVehicleWheels::computeSidewaysSpeed;
void (physx::PxVehicleWheels::* unused598)(physx::PxDeserializationContext &) = &physx::PxVehicleWheels::importExtraData;
void (physx::PxVehicleWheels::* unused599)(physx::PxDeserializationContext &) = &physx::PxVehicleWheels::resolveReferences;
void (*unused600)(physx::PxOutputStream &) = &physx::PxVehicleWheels::getBinaryMetaData;
unsigned int (physx::PxVehicleWheels::* unused601)() const = &physx::PxVehicleWheels::getNbNonDrivenWheels;
void __PxVehicleWheels__ctor(void* _this, unsigned short _0, physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> _1) { new (_this) physx::PxVehicleWheels(_0, _1); }
void __PxVehicleWheels__ctor(void* _this, physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> _0) { new (_this) physx::PxVehicleWheels(_0); }
const physx::PxVehicleEngineData & (physx::PxVehicleDriveSimData::* unused602)() const = &physx::PxVehicleDriveSimData::getEngineData;
void (physx::PxVehicleDriveSimData::* unused603)(const physx::PxVehicleEngineData &) = &physx::PxVehicleDriveSimData::setEngineData;
const physx::PxVehicleGearsData & (physx::PxVehicleDriveSimData::* unused604)() const = &physx::PxVehicleDriveSimData::getGearsData;
void (physx::PxVehicleDriveSimData::* unused605)(const physx::PxVehicleGearsData &) = &physx::PxVehicleDriveSimData::setGearsData;
const physx::PxVehicleClutchData & (physx::PxVehicleDriveSimData::* unused606)() const = &physx::PxVehicleDriveSimData::getClutchData;
void (physx::PxVehicleDriveSimData::* unused607)(const physx::PxVehicleClutchData &) = &physx::PxVehicleDriveSimData::setClutchData;
const physx::PxVehicleAutoBoxData & (physx::PxVehicleDriveSimData::* unused608)() const = &physx::PxVehicleDriveSimData::getAutoBoxData;
void (physx::PxVehicleDriveSimData::* unused609)(const physx::PxVehicleAutoBoxData &) = &physx::PxVehicleDriveSimData::setAutoBoxData;
void __PxVehicleDriveSimData__ctor(void* _this) { new (_this) physx::PxVehicleDriveSimData(); }
void __PxVehicleDriveSimData__ctor(void* _this, const physx::PxEMPTY _0) { new (_this) physx::PxVehicleDriveSimData(_0); }
void (*unused610)(physx::PxOutputStream &) = &physx::PxVehicleDriveSimData::getBinaryMetaData;
void (physx::PxVehicleDriveDynData::* unused611)() = &physx::PxVehicleDriveDynData::setToRestState;
void (physx::PxVehicleDriveDynData::* unused612)(const unsigned int, const float) = &physx::PxVehicleDriveDynData::setAnalogInput;
float (physx::PxVehicleDriveDynData::* unused613)(const unsigned int) const = &physx::PxVehicleDriveDynData::getAnalogInput;
void (physx::PxVehicleDriveDynData::* unused614)(const bool) = &physx::PxVehicleDriveDynData::setGearUp;
void (physx::PxVehicleDriveDynData::* unused615)(const bool) = &physx::PxVehicleDriveDynData::setGearDown;
bool (physx::PxVehicleDriveDynData::* unused616)() const = &physx::PxVehicleDriveDynData::getGearUp;
bool (physx::PxVehicleDriveDynData::* unused617)() const = &physx::PxVehicleDriveDynData::getGearDown;
void (physx::PxVehicleDriveDynData::* unused618)(const bool) = &physx::PxVehicleDriveDynData::setUseAutoGears;
bool (physx::PxVehicleDriveDynData::* unused619)() const = &physx::PxVehicleDriveDynData::getUseAutoGears;
void (physx::PxVehicleDriveDynData::* unused620)() = &physx::PxVehicleDriveDynData::toggleAutoGears;
void (physx::PxVehicleDriveDynData::* unused621)(unsigned int) = &physx::PxVehicleDriveDynData::setCurrentGear;
unsigned int (physx::PxVehicleDriveDynData::* unused622)() const = &physx::PxVehicleDriveDynData::getCurrentGear;
void (physx::PxVehicleDriveDynData::* unused623)(unsigned int) = &physx::PxVehicleDriveDynData::setTargetGear;
unsigned int (physx::PxVehicleDriveDynData::* unused624)() const = &physx::PxVehicleDriveDynData::getTargetGear;
void (physx::PxVehicleDriveDynData::* unused625)(const unsigned int) = &physx::PxVehicleDriveDynData::startGearChange;
void (physx::PxVehicleDriveDynData::* unused626)(const unsigned int) = &physx::PxVehicleDriveDynData::forceGearChange;
void (physx::PxVehicleDriveDynData::* unused627)(const float) = &physx::PxVehicleDriveDynData::setEngineRotationSpeed;
float (physx::PxVehicleDriveDynData::* unused628)() const = &physx::PxVehicleDriveDynData::getEngineRotationSpeed;
float (physx::PxVehicleDriveDynData::* unused629)() const = &physx::PxVehicleDriveDynData::getGearSwitchTime;
float (physx::PxVehicleDriveDynData::* unused630)() const = &physx::PxVehicleDriveDynData::getAutoBoxSwitchTime;
void __PxVehicleDriveDynData__ctor(void* _this) { new (_this) physx::PxVehicleDriveDynData(); }
void __PxVehicleDriveDynData__ctor(void* _this, const physx::PxEMPTY _0) { new (_this) physx::PxVehicleDriveDynData(_0); }
unsigned int (physx::PxVehicleDriveDynData::* unused631)() const = &physx::PxVehicleDriveDynData::getNbAnalogInput;
void (physx::PxVehicleDriveDynData::* unused632)(const unsigned int) = &physx::PxVehicleDriveDynData::setGearChange;
unsigned int (physx::PxVehicleDriveDynData::* unused633)() const = &physx::PxVehicleDriveDynData::getGearChange;
void (physx::PxVehicleDriveDynData::* unused634)(const float) = &physx::PxVehicleDriveDynData::setGearSwitchTime;
void (physx::PxVehicleDriveDynData::* unused635)(const float) = &physx::PxVehicleDriveDynData::setAutoBoxSwitchTime;
void (*unused636)(physx::PxOutputStream &) = &physx::PxVehicleDrive::getBinaryMetaData;
void __PxVehicleDrive__ctor(void* _this, physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> _0) { new (_this) physx::PxVehicleDrive(_0); }
void __PxVehicleDriveSimData4W__ctor(void* _this) { new (_this) physx::PxVehicleDriveSimData4W(); }
const physx::PxVehicleDifferential4WData & (physx::PxVehicleDriveSimData4W::* unused637)() const = &physx::PxVehicleDriveSimData4W::getDiffData;
const physx::PxVehicleAckermannGeometryData & (physx::PxVehicleDriveSimData4W::* unused638)() const = &physx::PxVehicleDriveSimData4W::getAckermannGeometryData;
void (physx::PxVehicleDriveSimData4W::* unused639)(const physx::PxVehicleDifferential4WData &) = &physx::PxVehicleDriveSimData4W::setDiffData;
void (physx::PxVehicleDriveSimData4W::* unused640)(const physx::PxVehicleAckermannGeometryData &) = &physx::PxVehicleDriveSimData4W::setAckermannGeometryData;
void __PxVehicleDriveSimData4W__ctor(void* _this, const physx::PxEMPTY _0) { new (_this) physx::PxVehicleDriveSimData4W(_0); }
void (*unused641)(physx::PxOutputStream &) = &physx::PxVehicleDriveSimData4W::getBinaryMetaData;
physx::PxVehicleDrive4W * (*unused642)(const unsigned int) = &physx::PxVehicleDrive4W::allocate;
void (physx::PxVehicleDrive4W::* unused643)() = &physx::PxVehicleDrive4W::free;
void (physx::PxVehicleDrive4W::* unused644)(physx::PxPhysics *, physx::PxRigidDynamic *, const physx::PxVehicleWheelsSimData &, const physx::PxVehicleDriveSimData4W &, const unsigned int) = &physx::PxVehicleDrive4W::setup;
physx::PxVehicleDrive4W * (*unused645)(physx::PxPhysics *, physx::PxRigidDynamic *, const physx::PxVehicleWheelsSimData &, const physx::PxVehicleDriveSimData4W &, const unsigned int) = &physx::PxVehicleDrive4W::create;
void (physx::PxVehicleDrive4W::* unused646)() = &physx::PxVehicleDrive4W::setToRestState;
physx::PxVehicleDrive4W * (*unused647)(unsigned char *&, physx::PxDeserializationContext &) = &physx::PxVehicleDrive4W::createObject;
void (*unused648)(physx::PxOutputStream &) = &physx::PxVehicleDrive4W::getBinaryMetaData;
void __PxVehicleDrive4W__ctor(void* _this, physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> _0) { new (_this) physx::PxVehicleDrive4W(_0); }
physx::PxVehicleDriveTank * (*unused649)(const unsigned int) = &physx::PxVehicleDriveTank::allocate;
void (physx::PxVehicleDriveTank::* unused650)() = &physx::PxVehicleDriveTank::free;
void (physx::PxVehicleDriveTank::* unused651)(physx::PxPhysics *, physx::PxRigidDynamic *, const physx::PxVehicleWheelsSimData &, const physx::PxVehicleDriveSimData &, const unsigned int) = &physx::PxVehicleDriveTank::setup;
physx::PxVehicleDriveTank * (*unused652)(physx::PxPhysics *, physx::PxRigidDynamic *, const physx::PxVehicleWheelsSimData &, const physx::PxVehicleDriveSimData &, const unsigned int) = &physx::PxVehicleDriveTank::create;
void (physx::PxVehicleDriveTank::* unused653)(const physx::PxVehicleDriveTankControlModel::Enum) = &physx::PxVehicleDriveTank::setDriveModel;
physx::PxVehicleDriveTankControlModel::Enum (physx::PxVehicleDriveTank::* unused654)() const = &physx::PxVehicleDriveTank::getDriveModel;
void (physx::PxVehicleDriveTank::* unused655)() = &physx::PxVehicleDriveTank::setToRestState;
void __PxVehicleDriveTank__ctor(void* _this, physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> _0) { new (_this) physx::PxVehicleDriveTank(_0); }
physx::PxVehicleDriveTank * (*unused656)(unsigned char *&, physx::PxDeserializationContext &) = &physx::PxVehicleDriveTank::createObject;
void (*unused657)(physx::PxOutputStream &) = &physx::PxVehicleDriveTank::getBinaryMetaData;
physx::PxVehicleDrivableSurfaceToTireFrictionPairs * (*unused658)(const unsigned int, const unsigned int) = &physx::PxVehicleDrivableSurfaceToTireFrictionPairs::allocate;
void (physx::PxVehicleDrivableSurfaceToTireFrictionPairs::* unused659)(const unsigned int, const unsigned int, const physx::PxMaterial **, const physx::PxVehicleDrivableSurfaceType *) = &physx::PxVehicleDrivableSurfaceToTireFrictionPairs::setup;
void (physx::PxVehicleDrivableSurfaceToTireFrictionPairs::* unused660)() = &physx::PxVehicleDrivableSurfaceToTireFrictionPairs::release;
void (physx::PxVehicleDrivableSurfaceToTireFrictionPairs::* unused661)(const unsigned int, const unsigned int, const float) = &physx::PxVehicleDrivableSurfaceToTireFrictionPairs::setTypePairFriction;
float (physx::PxVehicleDrivableSurfaceToTireFrictionPairs::* unused662)(const unsigned int, const unsigned int) const = &physx::PxVehicleDrivableSurfaceToTireFrictionPairs::getTypePairFriction;
unsigned int (physx::PxVehicleDrivableSurfaceToTireFrictionPairs::* unused663)() const = &physx::PxVehicleDrivableSurfaceToTireFrictionPairs::getMaxNbSurfaceTypes;
unsigned int (physx::PxVehicleDrivableSurfaceToTireFrictionPairs::* unused664)() const = &physx::PxVehicleDrivableSurfaceToTireFrictionPairs::getMaxNbTireTypes;
void __PxWheelQueryResult__ctor(void* _this) { new (_this) physx::PxWheelQueryResult(); }
void __PxVehicleWheelConcurrentUpdateData__ctor(void* _this) { new (_this) physx::PxVehicleWheelConcurrentUpdateData(); }
void __PxVehicleConcurrentUpdateData__ctor(void* _this) { new (_this) physx::PxVehicleConcurrentUpdateData(); }
void __PxVehicleDriveSimDataNW__ctor(void* _this) { new (_this) physx::PxVehicleDriveSimDataNW(); }
const physx::PxVehicleDifferentialNWData & (physx::PxVehicleDriveSimDataNW::* unused665)() const = &physx::PxVehicleDriveSimDataNW::getDiffData;
void (physx::PxVehicleDriveSimDataNW::* unused666)(const physx::PxVehicleDifferentialNWData &) = &physx::PxVehicleDriveSimDataNW::setDiffData;
void __PxVehicleDriveSimDataNW__ctor(void* _this, const physx::PxEMPTY _0) { new (_this) physx::PxVehicleDriveSimDataNW(_0); }
void (*unused667)(physx::PxOutputStream &) = &physx::PxVehicleDriveSimDataNW::getBinaryMetaData;
physx::PxVehicleDriveNW * (*unused668)(const unsigned int) = &physx::PxVehicleDriveNW::allocate;
void (physx::PxVehicleDriveNW::* unused669)() = &physx::PxVehicleDriveNW::free;
void (physx::PxVehicleDriveNW::* unused670)(physx::PxPhysics *, physx::PxRigidDynamic *, const physx::PxVehicleWheelsSimData &, const physx::PxVehicleDriveSimDataNW &, const unsigned int) = &physx::PxVehicleDriveNW::setup;
physx::PxVehicleDriveNW * (*unused671)(physx::PxPhysics *, physx::PxRigidDynamic *, const physx::PxVehicleWheelsSimData &, const physx::PxVehicleDriveSimDataNW &, const unsigned int) = &physx::PxVehicleDriveNW::create;
void (physx::PxVehicleDriveNW::* unused672)() = &physx::PxVehicleDriveNW::setToRestState;
void __PxVehicleDriveNW__ctor(void* _this, physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> _0) { new (_this) physx::PxVehicleDriveNW(_0); }
void __PxVehicleDriveNW__ctor(void* _this) { new (_this) physx::PxVehicleDriveNW(); }
physx::PxVehicleDriveNW * (*unused673)(unsigned char *&, physx::PxDeserializationContext &) = &physx::PxVehicleDriveNW::createObject;
void (*unused674)(physx::PxOutputStream &) = &physx::PxVehicleDriveNW::getBinaryMetaData;
void __PxVehicleDrive4WRawInputData__ctor(void* _this) { new (_this) physx::PxVehicleDrive4WRawInputData(); }
void (physx::PxVehicleDrive4WRawInputData::* unused675)(const bool) = &physx::PxVehicleDrive4WRawInputData::setDigitalAccel;
void (physx::PxVehicleDrive4WRawInputData::* unused676)(const bool) = &physx::PxVehicleDrive4WRawInputData::setDigitalBrake;
void (physx::PxVehicleDrive4WRawInputData::* unused677)(const bool) = &physx::PxVehicleDrive4WRawInputData::setDigitalHandbrake;
void (physx::PxVehicleDrive4WRawInputData::* unused678)(const bool) = &physx::PxVehicleDrive4WRawInputData::setDigitalSteerLeft;
void (physx::PxVehicleDrive4WRawInputData::* unused679)(const bool) = &physx::PxVehicleDrive4WRawInputData::setDigitalSteerRight;
bool (physx::PxVehicleDrive4WRawInputData::* unused680)() const = &physx::PxVehicleDrive4WRawInputData::getDigitalAccel;
bool (physx::PxVehicleDrive4WRawInputData::* unused681)() const = &physx::PxVehicleDrive4WRawInputData::getDigitalBrake;
bool (physx::PxVehicleDrive4WRawInputData::* unused682)() const = &physx::PxVehicleDrive4WRawInputData::getDigitalHandbrake;
bool (physx::PxVehicleDrive4WRawInputData::* unused683)() const = &physx::PxVehicleDrive4WRawInputData::getDigitalSteerLeft;
bool (physx::PxVehicleDrive4WRawInputData::* unused684)() const = &physx::PxVehicleDrive4WRawInputData::getDigitalSteerRight;
void (physx::PxVehicleDrive4WRawInputData::* unused685)(const float) = &physx::PxVehicleDrive4WRawInputData::setAnalogAccel;
void (physx::PxVehicleDrive4WRawInputData::* unused686)(const float) = &physx::PxVehicleDrive4WRawInputData::setAnalogBrake;
void (physx::PxVehicleDrive4WRawInputData::* unused687)(const float) = &physx::PxVehicleDrive4WRawInputData::setAnalogHandbrake;
void (physx::PxVehicleDrive4WRawInputData::* unused688)(const float) = &physx::PxVehicleDrive4WRawInputData::setAnalogSteer;
float (physx::PxVehicleDrive4WRawInputData::* unused689)() const = &physx::PxVehicleDrive4WRawInputData::getAnalogAccel;
float (physx::PxVehicleDrive4WRawInputData::* unused690)() const = &physx::PxVehicleDrive4WRawInputData::getAnalogBrake;
float (physx::PxVehicleDrive4WRawInputData::* unused691)() const = &physx::PxVehicleDrive4WRawInputData::getAnalogHandbrake;
float (physx::PxVehicleDrive4WRawInputData::* unused692)() const = &physx::PxVehicleDrive4WRawInputData::getAnalogSteer;
void (physx::PxVehicleDrive4WRawInputData::* unused693)(const bool) = &physx::PxVehicleDrive4WRawInputData::setGearUp;
void (physx::PxVehicleDrive4WRawInputData::* unused694)(const bool) = &physx::PxVehicleDrive4WRawInputData::setGearDown;
bool (physx::PxVehicleDrive4WRawInputData::* unused695)() const = &physx::PxVehicleDrive4WRawInputData::getGearUp;
bool (physx::PxVehicleDrive4WRawInputData::* unused696)() const = &physx::PxVehicleDrive4WRawInputData::getGearDown;
void __PxVehicleDriveNWRawInputData__ctor(void* _this) { new (_this) physx::PxVehicleDriveNWRawInputData(); }
void __PxVehicleDriveTankRawInputData__ctor(void* _this, const physx::PxVehicleDriveTankControlModel::Enum _0) { new (_this) physx::PxVehicleDriveTankRawInputData(_0); }
physx::PxVehicleDriveTankControlModel::Enum (physx::PxVehicleDriveTankRawInputData::* unused697)() const = &physx::PxVehicleDriveTankRawInputData::getDriveModel;
void (physx::PxVehicleDriveTankRawInputData::* unused698)(const bool) = &physx::PxVehicleDriveTankRawInputData::setDigitalAccel;
void (physx::PxVehicleDriveTankRawInputData::* unused699)(const bool) = &physx::PxVehicleDriveTankRawInputData::setDigitalLeftThrust;
void (physx::PxVehicleDriveTankRawInputData::* unused700)(const bool) = &physx::PxVehicleDriveTankRawInputData::setDigitalRightThrust;
void (physx::PxVehicleDriveTankRawInputData::* unused701)(const bool) = &physx::PxVehicleDriveTankRawInputData::setDigitalLeftBrake;
void (physx::PxVehicleDriveTankRawInputData::* unused702)(const bool) = &physx::PxVehicleDriveTankRawInputData::setDigitalRightBrake;
bool (physx::PxVehicleDriveTankRawInputData::* unused703)() const = &physx::PxVehicleDriveTankRawInputData::getDigitalAccel;
bool (physx::PxVehicleDriveTankRawInputData::* unused704)() const = &physx::PxVehicleDriveTankRawInputData::getDigitalLeftThrust;
bool (physx::PxVehicleDriveTankRawInputData::* unused705)() const = &physx::PxVehicleDriveTankRawInputData::getDigitalRightThrust;
bool (physx::PxVehicleDriveTankRawInputData::* unused706)() const = &physx::PxVehicleDriveTankRawInputData::getDigitalLeftBrake;
bool (physx::PxVehicleDriveTankRawInputData::* unused707)() const = &physx::PxVehicleDriveTankRawInputData::getDigitalRightBrake;
void (physx::PxVehicleDriveTankRawInputData::* unused708)(const float) = &physx::PxVehicleDriveTankRawInputData::setAnalogAccel;
void (physx::PxVehicleDriveTankRawInputData::* unused709)(const float) = &physx::PxVehicleDriveTankRawInputData::setAnalogLeftThrust;
void (physx::PxVehicleDriveTankRawInputData::* unused710)(const float) = &physx::PxVehicleDriveTankRawInputData::setAnalogRightThrust;
void (physx::PxVehicleDriveTankRawInputData::* unused711)(const float) = &physx::PxVehicleDriveTankRawInputData::setAnalogLeftBrake;
void (physx::PxVehicleDriveTankRawInputData::* unused712)(const float) = &physx::PxVehicleDriveTankRawInputData::setAnalogRightBrake;
float (physx::PxVehicleDriveTankRawInputData::* unused713)() const = &physx::PxVehicleDriveTankRawInputData::getAnalogAccel;
float (physx::PxVehicleDriveTankRawInputData::* unused714)() const = &physx::PxVehicleDriveTankRawInputData::getAnalogLeftThrust;
float (physx::PxVehicleDriveTankRawInputData::* unused715)() const = &physx::PxVehicleDriveTankRawInputData::getAnalogRightThrust;
float (physx::PxVehicleDriveTankRawInputData::* unused716)() const = &physx::PxVehicleDriveTankRawInputData::getAnalogLeftBrake;
float (physx::PxVehicleDriveTankRawInputData::* unused717)() const = &physx::PxVehicleDriveTankRawInputData::getAnalogRightBrake;
void (physx::PxVehicleDriveTankRawInputData::* unused718)(const bool) = &physx::PxVehicleDriveTankRawInputData::setGearUp;
void (physx::PxVehicleDriveTankRawInputData::* unused719)(const bool) = &physx::PxVehicleDriveTankRawInputData::setGearDown;
bool (physx::PxVehicleDriveTankRawInputData::* unused720)() const = &physx::PxVehicleDriveTankRawInputData::getGearUp;
bool (physx::PxVehicleDriveTankRawInputData::* unused721)() const = &physx::PxVehicleDriveTankRawInputData::getGearDown;
void __PxVehicleCopyDynamicsMap__ctor(void* _this) { new (_this) physx::PxVehicleCopyDynamicsMap(); }
void __PxVehicleGraphChannelDesc__ctor(void* _this) { new (_this) physx::PxVehicleGraphChannelDesc(); }
void (physx::PxVehicleGraph::* unused722)(const physx::PxVehicleGraphDesc &, const physx::PxVehicleGraphType::Enum) = &physx::PxVehicleGraph::setup;
void (physx::PxVehicleGraph::* unused723)() = &physx::PxVehicleGraph::clearRecordedChannelData;
const physx::PxVec3 & (physx::PxVehicleGraph::* unused724)() const = &physx::PxVehicleGraph::getBackgroundColor;
float (physx::PxVehicleGraph::* unused725)() const = &physx::PxVehicleGraph::getBackgroundAlpha;
void (physx::PxVehicleGraph::* unused726)(float &, float &, float &, float &) const = &physx::PxVehicleGraph::getBackgroundCoords;
void (physx::PxVehicleGraph::* unused727)(const unsigned int, float *, physx::PxVec3 *, char *) const = &physx::PxVehicleGraph::computeGraphChannel;
float (physx::PxVehicleGraph::* unused728)(const unsigned int) const = &physx::PxVehicleGraph::getLatestValue;
physx::PxVehicleTelemetryData * (*unused729)(const unsigned int) = &physx::PxVehicleTelemetryData::allocate;
void (physx::PxVehicleTelemetryData::* unused730)() = &physx::PxVehicleTelemetryData::free;
void (physx::PxVehicleTelemetryData::* unused731)(const float, const float, const float, const float, const float *const, const float *const, const physx::PxVec3 &, const physx::PxVec3 &, const physx::PxVec3 &) = &physx::PxVehicleTelemetryData::setup;
void (physx::PxVehicleTelemetryData::* unused732)() = &physx::PxVehicleTelemetryData::clear;
const physx::PxVehicleGraph & (physx::PxVehicleTelemetryData::* unused733)() const = &physx::PxVehicleTelemetryData::getEngineGraph;
unsigned int (physx::PxVehicleTelemetryData::* unused734)() const = &physx::PxVehicleTelemetryData::getNbWheelGraphs;
const physx::PxVehicleGraph & (physx::PxVehicleTelemetryData::* unused735)(const unsigned int) const = &physx::PxVehicleTelemetryData::getWheelGraph;
const physx::PxVec3 * (physx::PxVehicleTelemetryData::* unused736)() const = &physx::PxVehicleTelemetryData::getTireforceAppPoints;
const physx::PxVec3 * (physx::PxVehicleTelemetryData::* unused737)() const = &physx::PxVehicleTelemetryData::getSuspforceAppPoints;
physx::PxVehicleNoDrive * (*unused738)(const unsigned int) = &physx::PxVehicleNoDrive::allocate;
void (physx::PxVehicleNoDrive::* unused739)() = &physx::PxVehicleNoDrive::free;
void (physx::PxVehicleNoDrive::* unused740)(physx::PxPhysics *, physx::PxRigidDynamic *, const physx::PxVehicleWheelsSimData &) = &physx::PxVehicleNoDrive::setup;
physx::PxVehicleNoDrive * (*unused741)(physx::PxPhysics *, physx::PxRigidDynamic *, const physx::PxVehicleWheelsSimData &) = &physx::PxVehicleNoDrive::create;
void (physx::PxVehicleNoDrive::* unused742)() = &physx::PxVehicleNoDrive::setToRestState;
void (physx::PxVehicleNoDrive::* unused743)(const unsigned int, const float) = &physx::PxVehicleNoDrive::setBrakeTorque;
void (physx::PxVehicleNoDrive::* unused744)(const unsigned int, const float) = &physx::PxVehicleNoDrive::setDriveTorque;
void (physx::PxVehicleNoDrive::* unused745)(const unsigned int, const float) = &physx::PxVehicleNoDrive::setSteerAngle;
float (physx::PxVehicleNoDrive::* unused746)(const unsigned int) const = &physx::PxVehicleNoDrive::getBrakeTorque;
float (physx::PxVehicleNoDrive::* unused747)(const unsigned int) const = &physx::PxVehicleNoDrive::getDriveTorque;
float (physx::PxVehicleNoDrive::* unused748)(const unsigned int) const = &physx::PxVehicleNoDrive::getSteerAngle;
void __PxVehicleNoDrive__ctor(void* _this, physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> _0) { new (_this) physx::PxVehicleNoDrive(_0); }
void (physx::PxVehicleNoDrive::* unused749)(physx::PxDeserializationContext &) = &physx::PxVehicleNoDrive::importExtraData;
physx::PxVehicleNoDrive * (*unused750)(unsigned char *&, physx::PxDeserializationContext &) = &physx::PxVehicleNoDrive::createObject;
void (*unused751)(physx::PxOutputStream &) = &physx::PxVehicleNoDrive::getBinaryMetaData;
unsigned int (physx::PxVehicleNoDrive::* unused752)() const = &physx::PxVehicleNoDrive::getNbSteerAngle;
unsigned int (physx::PxVehicleNoDrive::* unused753)() const = &physx::PxVehicleNoDrive::getNbDriveTorque;
unsigned int (physx::PxVehicleNoDrive::* unused754)() const = &physx::PxVehicleNoDrive::getNbBrakeTorque;
void __PxProfileScoped__ctor(void* _this, physx::PxProfilerCallback * _0, const char * _1, bool _2, unsigned long long _3) { new (_this) physx::PxProfileScoped(_0, _1, _2, _3); }
void (*unused755)(physx::PxCollection &, bool) = &physx::PxCollectionExt::releaseObjects;
void (*unused756)(physx::PxCollection &, unsigned short, physx::PxCollection *) = &physx::PxCollectionExt::remove;
physx::PxCollection * (*unused757)(physx::PxPhysics &) = &physx::PxCollectionExt::createCollection;
physx::PxCollection * (*unused758)(physx::PxScene &) = &physx::PxCollectionExt::createCollection;
void __RaycastCCDManager__ctor(void* _this, physx::PxScene * _0) { new (_this) physx::RaycastCCDManager(_0); }
bool (physx::RaycastCCDManager::* unused759)(physx::PxRigidDynamic *, physx::PxShape *) = &physx::RaycastCCDManager::registerRaycastCCDObject;
void (physx::RaycastCCDManager::* unused760)(bool) = &physx::RaycastCCDManager::doRaycastCCD;
bool (physx::general_PxIOStream2::PxFileBuf::* unused761)() const = &physx::general_PxIOStream2::PxFileBuf::isOpen;
void (physx::general_PxIOStream2::PxFileBuf::* unused762)(physx::general_PxIOStream2::PxFileBuf::EndianMode) = &physx::general_PxIOStream2::PxFileBuf::setEndianMode;
physx::general_PxIOStream2::PxFileBuf::EndianMode (physx::general_PxIOStream2::PxFileBuf::* unused763)() const = &physx::general_PxIOStream2::PxFileBuf::getEndianMode;
void (physx::general_PxIOStream2::PxFileBuf::* unused764)() = &physx::general_PxIOStream2::PxFileBuf::release;
bool (*unused765)() = &physx::general_PxIOStream2::PxFileBuf::isBigEndian;
void (physx::general_PxIOStream2::PxFileBuf::* unused766)(void *) const = &physx::general_PxIOStream2::PxFileBuf::swap2Bytes;
void (physx::general_PxIOStream2::PxFileBuf::* unused767)(void *) const = &physx::general_PxIOStream2::PxFileBuf::swap4Bytes;
void (physx::general_PxIOStream2::PxFileBuf::* unused768)(void *) const = &physx::general_PxIOStream2::PxFileBuf::swap8Bytes;
void (physx::general_PxIOStream2::PxFileBuf::* unused769)(unsigned int) = &physx::general_PxIOStream2::PxFileBuf::storeDword;
void (physx::general_PxIOStream2::PxFileBuf::* unused770)(float) = &physx::general_PxIOStream2::PxFileBuf::storeFloat;
void (physx::general_PxIOStream2::PxFileBuf::* unused771)(double) = &physx::general_PxIOStream2::PxFileBuf::storeDouble;
void (physx::general_PxIOStream2::PxFileBuf::* unused772)(unsigned char) = &physx::general_PxIOStream2::PxFileBuf::storeByte;
void (physx::general_PxIOStream2::PxFileBuf::* unused773)(unsigned short) = &physx::general_PxIOStream2::PxFileBuf::storeWord;
unsigned char (physx::general_PxIOStream2::PxFileBuf::* unused774)() = &physx::general_PxIOStream2::PxFileBuf::readByte;
unsigned short (physx::general_PxIOStream2::PxFileBuf::* unused775)() = &physx::general_PxIOStream2::PxFileBuf::readWord;
unsigned int (physx::general_PxIOStream2::PxFileBuf::* unused776)() = &physx::general_PxIOStream2::PxFileBuf::readDword;
float (physx::general_PxIOStream2::PxFileBuf::* unused777)() = &physx::general_PxIOStream2::PxFileBuf::readFloat;
double (physx::general_PxIOStream2::PxFileBuf::* unused778)() = &physx::general_PxIOStream2::PxFileBuf::readDouble;
float (*unused779)(float) = &physx::intrinsics::abs;
float (*unused780)(float, float, float) = &physx::intrinsics::fsel;
float (*unused781)(float) = &physx::intrinsics::sign;
float (*unused782)(float) = &physx::intrinsics::recip;
float (*unused783)(float) = &physx::intrinsics::recipFast;
float (*unused784)(float) = &physx::intrinsics::sqrt;
float (*unused785)(float) = &physx::intrinsics::recipSqrt;
float (*unused786)(float) = &physx::intrinsics::recipSqrtFast;
float (*unused787)(float) = &physx::intrinsics::sin;
float (*unused788)(float) = &physx::intrinsics::cos;
float (*unused789)(float, float) = &physx::intrinsics::selectMin;
float (*unused790)(float, float) = &physx::intrinsics::selectMax;
bool (*unused791)(float) = &physx::intrinsics::isFinite;
bool (*unused792)(double) = &physx::intrinsics::isFinite;
void * (*unused793)(void *, unsigned int) = &physx::intrinsics::memZero;
void * (*unused794)(void *, int, unsigned int) = &physx::intrinsics::memSet;
void * (*unused795)(void *, const void *, unsigned int) = &physx::intrinsics::memCopy;
void * (*unused796)(void *, const void *, unsigned int) = &physx::intrinsics::memMove;
void (*unused797)(void *, unsigned int) = &physx::intrinsics::memZero128;
float (*unused798)(float) = &physx::PxAbs;
bool (*unused799)(float, float, float) = &physx::PxEquals;
double (*unused800)(double) = &physx::PxAbs;
int (*unused801)(int) = &physx::PxAbs;
float (*unused802)(float) = &physx::PxSqrt;
double (*unused803)(double) = &physx::PxSqrt;
float (*unused804)(float) = &physx::PxRecipSqrt;
double (*unused805)(double) = &physx::PxRecipSqrt;
float (*unused806)(float) = &physx::PxSin;
double (*unused807)(double) = &physx::PxSin;
float (*unused808)(float) = &physx::PxCos;
double (*unused809)(double) = &physx::PxCos;
float (*unused810)(float) = &physx::PxTan;
double (*unused811)(double) = &physx::PxTan;
float (*unused812)(float) = &physx::PxAsin;
double (*unused813)(double) = &physx::PxAsin;
float (*unused814)(float) = &physx::PxAcos;
double (*unused815)(double) = &physx::PxAcos;
float (*unused816)(float) = &physx::PxAtan;
double (*unused817)(double) = &physx::PxAtan;
float (*unused818)(float, float) = &physx::PxAtan2;
double (*unused819)(double, double) = &physx::PxAtan2;
bool (*unused820)(float) = &physx::PxIsFinite;
bool (*unused821)(double) = &physx::PxIsFinite;
float (*unused822)(float) = &physx::PxFloor;
float (*unused823)(float) = &physx::PxExp;
float (*unused824)(float) = &physx::PxCeil;
float (*unused825)(float) = &physx::PxSign;
float (*unused826)(float, float) = &physx::PxPow;
float (*unused827)(float) = &physx::PxLog;
physx::PxCollection * (*unused828)() = &PxCreateCollection;
physx::PxFlags<physx::PxArticulationAxis::Enum, unsigned char> (*unused829)(physx::PxArticulationAxis::Enum, physx::PxArticulationAxis::Enum) = &physx::operator|;
physx::PxFlags<physx::PxArticulationAxis::Enum, unsigned char> (*unused830)(physx::PxArticulationAxis::Enum, physx::PxArticulationAxis::Enum) = &physx::operator&;
physx::PxFlags<physx::PxArticulationAxis::Enum, unsigned char> (*unused831)(physx::PxArticulationAxis::Enum) = &physx::operator~;
physx::PxTransform (*unused832)(const physx::PxVec3 &, const physx::PxVec3 &, float *) = &physx::PxTransformFromSegment;
physx::PxTransform (*unused833)(const physx::PxPlane &) = &physx::PxTransformFromPlaneEquation;
physx::PxPlane (*unused834)(const physx::PxTransform &) = &physx::PxPlaneEquationFromTransform;
physx::PxAssertHandler & (*unused835)() = &physx::PxGetAssertHandler;
void (*unused836)(physx::PxAssertHandler &) = &physx::PxSetAssertHandler;
void * (*unused837)(void *, unsigned int) = &physx::PxMemZero;
void * (*unused838)(void *, int, unsigned int) = &physx::PxMemSet;
void * (*unused839)(void *, const void *, unsigned int) = &physx::PxMemCopy;
void * (*unused840)(void *, const void *, unsigned int) = &physx::PxMemMove;
physx::PxFilterObjectType::Enum (*unused841)(unsigned int) = &physx::PxGetFilterObjectType;
bool (*unused842)(unsigned int) = &physx::PxFilterObjectIsKinematic;
bool (*unused843)(unsigned int) = &physx::PxFilterObjectIsTrigger;
physx::PxFoundation * (*unused844)(unsigned int, physx::PxAllocatorCallback &, physx::PxErrorCallback &) = &PxCreateFoundation;
physx::PxFoundation & (*unused845)() = &PxGetFoundation;
physx::PxProfilerCallback * (*unused846)() = &PxGetProfilerCallback;
void (*unused847)(physx::PxProfilerCallback *) = &PxSetProfilerCallback;
void (*unused848)(physx::PxPhysics &) = &PxRegisterArticulations;
void (*unused849)(physx::PxPhysics &) = &PxRegisterArticulationsReducedCoordinate;
void (*unused850)(physx::PxPhysics &) = &PxRegisterHeightFields;
physx::PxPhysics * (*unused851)(unsigned int, physx::PxFoundation &, const physx::PxTolerancesScale &, bool, physx::PxPvd *) = &PxCreateBasePhysics;
physx::PxPhysics * (*unused852)(unsigned int, physx::PxFoundation &, const physx::PxTolerancesScale &, bool, physx::PxPvd *) = &PxCreatePhysics;
physx::PxPhysics & (*unused853)() = &PxGetPhysics;
physx::PxQuat (*unused854)(const physx::PxVec3 &, const physx::PxVec3 &) = &physx::PxShortestRotation;
physx::PxVec3 (*unused855)(const physx::PxMat33 &, physx::PxQuat &) = &physx::PxDiagonalize;
void (*unused856)(const PxGpuLoadHook *) = &PxSetPhysXGpuLoadHook;
int (*unused857)(physx::PxErrorCallback &) = &PxGetSuggestedCudaDeviceOrdinal;
physx::PxCudaContextManager * (*unused858)(physx::PxFoundation &, const physx::PxCudaContextManagerDesc &, physx::PxProfilerCallback *) = &PxCreateCudaContextManager;
physx::PxVec3 (*unused859)(const physx::PxExtendedVec3 &) = &physx::toVec3;
physx::PxControllerManager * (*unused860)(physx::PxScene &, bool) = &PxCreateControllerManager;
physx::PxCooking * (*unused861)(unsigned int, physx::PxFoundation &, const physx::PxCookingParams &) = &PxCreateCooking;
void (*unused862)(physx::PxJoint &, const physx::PxVec3 *, const physx::PxVec3 *) = &PxSetJointGlobalFrame;
physx::PxDistanceJoint * (*unused863)(physx::PxPhysics &, physx::PxRigidActor *, const physx::PxTransform &, physx::PxRigidActor *, const physx::PxTransform &) = &physx::PxDistanceJointCreate;
void * (*unused864)(unsigned long long) = &physx::platformAlignedAlloc;
void (*unused865)(void *) = &physx::platformAlignedFree;
physx::PxContactJoint * (*unused866)(physx::PxPhysics &, physx::PxRigidActor *, const physx::PxTransform &, physx::PxRigidActor *, const physx::PxTransform &) = &physx::PxContactJointCreate;
physx::PxFixedJoint * (*unused867)(physx::PxPhysics &, physx::PxRigidActor *, const physx::PxTransform &, physx::PxRigidActor *, const physx::PxTransform &) = &physx::PxFixedJointCreate;
physx::PxPrismaticJoint * (*unused868)(physx::PxPhysics &, physx::PxRigidActor *, const physx::PxTransform &, physx::PxRigidActor *, const physx::PxTransform &) = &physx::PxPrismaticJointCreate;
physx::PxRevoluteJoint * (*unused869)(physx::PxPhysics &, physx::PxRigidActor *, const physx::PxTransform &, physx::PxRigidActor *, const physx::PxTransform &) = &physx::PxRevoluteJointCreate;
physx::PxSphericalJoint * (*unused870)(physx::PxPhysics &, physx::PxRigidActor *, const physx::PxTransform &, physx::PxRigidActor *, const physx::PxTransform &) = &physx::PxSphericalJointCreate;
physx::PxD6Joint * (*unused871)(physx::PxPhysics &, physx::PxRigidActor *, const physx::PxTransform &, physx::PxRigidActor *, const physx::PxTransform &) = &physx::PxD6JointCreate;
physx::PxFlags<physx::PxFilterFlag::Enum, unsigned short> (*unused872)(unsigned int, physx::PxFilterData, unsigned int, physx::PxFilterData, physx::PxFlags<physx::PxPairFlag::Enum, unsigned short> &, const void *, unsigned int) = &physx::PxDefaultSimulationFilterShader;
bool (*unused873)(const unsigned short, const unsigned short) = &physx::PxGetGroupCollisionFlag;
void (*unused874)(const unsigned short, const unsigned short, const bool) = &physx::PxSetGroupCollisionFlag;
unsigned short (*unused875)(const physx::PxActor &) = &physx::PxGetGroup;
void (*unused876)(physx::PxActor &, const unsigned short) = &physx::PxSetGroup;
void (*unused877)(physx::PxFilterOp::Enum &, physx::PxFilterOp::Enum &, physx::PxFilterOp::Enum &) = &physx::PxGetFilterOps;
void (*unused878)(const physx::PxFilterOp::Enum &, const physx::PxFilterOp::Enum &, const physx::PxFilterOp::Enum &) = &physx::PxSetFilterOps;
bool (*unused879)() = &physx::PxGetFilterBool;
void (*unused880)(const bool) = &physx::PxSetFilterBool;
void (*unused881)(physx::PxGroupsMask &, physx::PxGroupsMask &) = &physx::PxGetFilterConstants;
void (*unused882)(const physx::PxGroupsMask &, const physx::PxGroupsMask &) = &physx::PxSetFilterConstants;
physx::PxGroupsMask (*unused883)(const physx::PxActor &) = &physx::PxGetGroupsMask;
void (*unused884)(physx::PxActor &, const physx::PxGroupsMask &) = &physx::PxSetGroupsMask;
bool (*unused885)(physx::PxVec3 &, float &, const physx::PxGeometry &, const physx::PxTransform &, const physx::PxTriangleMeshGeometry &, const physx::PxTransform &, unsigned int, unsigned int *) = &physx::PxComputeTriangleMeshPenetration;
bool (*unused886)(physx::PxVec3 &, float &, const physx::PxGeometry &, const physx::PxTransform &, const physx::PxHeightFieldGeometry &, const physx::PxTransform &, unsigned int, unsigned int *) = &physx::PxComputeHeightFieldPenetration;
physx::PxDefaultCpuDispatcher * (*unused887)(unsigned int, unsigned int *) = &physx::PxDefaultCpuDispatcherCreate;
bool (*unused888)(unsigned int, unsigned int, const physx::PxVec3 *, const unsigned int *, const unsigned short *, physx::PxVec3 *, bool) = &PxBuildSmoothNormals;
physx::PxRigidDynamic * (*unused889)(physx::PxPhysics &, const physx::PxTransform &, const physx::PxGeometry &, physx::PxMaterial &, float, const physx::PxTransform &) = &physx::PxCreateDynamic;
physx::PxRigidDynamic * (*unused890)(physx::PxPhysics &, const physx::PxTransform &, physx::PxShape &, float) = &physx::PxCreateDynamic;
physx::PxRigidDynamic * (*unused891)(physx::PxPhysics &, const physx::PxTransform &, const physx::PxGeometry &, physx::PxMaterial &, float, const physx::PxTransform &) = &physx::PxCreateKinematic;
physx::PxRigidDynamic * (*unused892)(physx::PxPhysics &, const physx::PxTransform &, physx::PxShape &, float) = &physx::PxCreateKinematic;
physx::PxRigidStatic * (*unused893)(physx::PxPhysics &, const physx::PxTransform &, const physx::PxGeometry &, physx::PxMaterial &, const physx::PxTransform &) = &physx::PxCreateStatic;
physx::PxRigidStatic * (*unused894)(physx::PxPhysics &, const physx::PxTransform &, physx::PxShape &) = &physx::PxCreateStatic;
physx::PxShape * (*unused895)(physx::PxPhysics &, const physx::PxShape &, bool) = &physx::PxCloneShape;
physx::PxRigidStatic * (*unused896)(physx::PxPhysics &, const physx::PxTransform &, const physx::PxRigidActor &) = &physx::PxCloneStatic;
physx::PxRigidDynamic * (*unused897)(physx::PxPhysics &, const physx::PxTransform &, const physx::PxRigidDynamic &) = &physx::PxCloneDynamic;
physx::PxRigidStatic * (*unused898)(physx::PxPhysics &, const physx::PxPlane &, physx::PxMaterial &) = &physx::PxCreatePlane;
void (*unused899)(physx::PxRigidActor &, float, bool) = &physx::PxScaleRigidActor;
bool (*unused900)(physx::PxPhysics &, physx::PxPvd *) = &PxInitExtensions;
void (*unused901)() = &PxCloseExtensions;
unsigned int (*unused902)(const physx::PxConvexMeshGeometry &, const physx::PxTransform &, const physx::PxVec3 &, const physx::PxVec3 &) = &physx::PxFindFaceIndex;
physx::PxRepXObject (*unused903)(const physx::PxBase *, const unsigned long long) = &PxCreateRepXObject;
bool (*unused904)(physx::PxPhysics &, physx::PxSerializationRegistry *) = &physx::PxInitVehicleSDK;
void (*unused905)(physx::PxSerializationRegistry *) = &physx::PxCloseVehicleSDK;
void (*unused906)(const physx::PxVec3 &, const physx::PxVec3 &) = &physx::PxVehicleSetBasisVectors;
void (*unused907)(physx::PxVehicleUpdateMode::Enum) = &physx::PxVehicleSetUpdateMode;
void (*unused908)(const float, const float) = &physx::PxVehicleSetSweepHitRejectionAngles;
void (*unused909)(const float) = &physx::PxVehicleSetMaxHitActorAcceleration;
void (*unused910)(physx::PxBatchQuery *, const unsigned int, physx::PxVehicleWheels **, const unsigned int, physx::PxBatchQueryResult<physx::PxRaycastHit> *, const bool *) = &physx::PxVehicleSuspensionRaycasts;
void (*unused911)(physx::PxBatchQuery *, const unsigned int, physx::PxVehicleWheels **, const unsigned int, physx::PxBatchQueryResult<physx::PxSweepHit> *, const unsigned short, const bool *, const float, const float) = &physx::PxVehicleSuspensionSweeps;
unsigned int (*unused912)(const physx::PxVehicleWheels &, const unsigned int, const float, const float, physx::PxContactModifyPair &) = &physx::PxVehicleModifyWheelContacts;
void (*unused913)(const float, const physx::PxVec3 &, const physx::PxVehicleDrivableSurfaceToTireFrictionPairs &, const unsigned int, physx::PxVehicleWheels **, physx::PxVehicleWheelQueryResult *, physx::PxVehicleConcurrentUpdateData *) = &physx::PxVehicleUpdates;
void (*unused914)(const physx::PxVehicleConcurrentUpdateData *, const unsigned int, physx::PxVehicleWheels **) = &physx::PxVehiclePostUpdates;
void (*unused915)(const physx::PxVec3 &, const unsigned int, physx::PxVehicleWheels **) = &physx::PxVehicleShiftOrigin;
void (*unused916)(const float, const physx::PxVec3 &, const physx::PxVehicleDrivableSurfaceToTireFrictionPairs &, physx::PxVehicleWheels *, physx::PxVehicleWheelQueryResult *, physx::PxVehicleTelemetryData &) = &physx::PxVehicleUpdateSingleVehicleAndStoreTelemetryData;
void (*unused917)(const physx::PxVehicleKeySmoothingData &, const physx::PxFixedSizeLookupTable<8> &, const physx::PxVehicleDrive4WRawInputData &, const float, const bool, physx::PxVehicleDrive4W &) = &physx::PxVehicleDrive4WSmoothDigitalRawInputsAndSetAnalogInputs;
void (*unused918)(const physx::PxVehiclePadSmoothingData &, const physx::PxFixedSizeLookupTable<8> &, const physx::PxVehicleDrive4WRawInputData &, const float, const bool, physx::PxVehicleDrive4W &) = &physx::PxVehicleDrive4WSmoothAnalogRawInputsAndSetAnalogInputs;
void (*unused919)(const physx::PxVehicleKeySmoothingData &, const physx::PxFixedSizeLookupTable<8> &, const physx::PxVehicleDriveNWRawInputData &, const float, const bool, physx::PxVehicleDriveNW &) = &physx::PxVehicleDriveNWSmoothDigitalRawInputsAndSetAnalogInputs;
void (*unused920)(const physx::PxVehiclePadSmoothingData &, const physx::PxFixedSizeLookupTable<8> &, const physx::PxVehicleDriveNWRawInputData &, const float, const bool, physx::PxVehicleDriveNW &) = &physx::PxVehicleDriveNWSmoothAnalogRawInputsAndSetAnalogInputs;
void (*unused921)(const physx::PxVehicleKeySmoothingData &, const physx::PxVehicleDriveTankRawInputData &, const float, physx::PxVehicleDriveTank &) = &physx::PxVehicleDriveTankSmoothDigitalRawInputsAndSetAnalogInputs;
void (*unused922)(const physx::PxVehiclePadSmoothingData &, const physx::PxVehicleDriveTankRawInputData &, const float, physx::PxVehicleDriveTank &) = &physx::PxVehicleDriveTankSmoothAnalogRawInputsAndSetAnalogInputs;
void (*unused923)(physx::PxVehicleWheelsSimData &, physx::PxVehicleWheelsDynData &, physx::PxVehicleDriveSimData4W &) = &physx::PxVehicle4WEnable3WTadpoleMode;
void (*unused924)(physx::PxVehicleWheelsSimData &, physx::PxVehicleWheelsDynData &, physx::PxVehicleDriveSimData4W &) = &physx::PxVehicle4WEnable3WDeltaMode;
void (*unused925)(const unsigned int, const physx::PxVec3 *, const physx::PxVec3 &, const float, const unsigned int, float *) = &physx::PxVehicleComputeSprungMasses;
void (*unused926)(const physx::PxTransform &, const physx::PxTransform &, const unsigned int, physx::PxVehicleWheels *) = &physx::PxVehicleUpdateCMassLocalPose;
void (*unused927)(const physx::PxVehicleCopyDynamicsMap &, const physx::PxVehicleWheels &, physx::PxVehicleWheels *) = &physx::PxVehicleCopyDynamicsData;
physx::PxPvd * (*unused928)(physx::PxFoundation &) = &physx::PxCreatePvd;
physx::PxPvdTransport * (*unused929)(const char *, int, unsigned int) = &physx::PxDefaultPvdSocketTransportCreate;
physx::PxPvdTransport * (*unused930)(const char *) = &physx::PxDefaultPvdFileTransportCreate;
void (*unused931)(physx::PxOutputStream &) = &PxGetPhysicsBinaryMetaData;
void (*unused932)(physx::PxSerializationRegistry &) = &PxRegisterPhysicsSerializers;
void (*unused933)(physx::PxSerializationRegistry &) = &PxUnregisterPhysicsSerializers;
void (*unused934)(const physx::PxCollection &) = &PxAddCollectionToPhysics;
physx::PxJoint * (*unused935)(physx::PxPhysics &, physx::PxRigidActor *, const physx::PxVec3 &, physx::PxRigidActor *, const physx::PxVec3 &, bool) = &physx::PxD6JointCreate_Fixed;
physx::PxJoint * (*unused936)(physx::PxPhysics &, physx::PxRigidActor *, const physx::PxVec3 &, physx::PxRigidActor *, const physx::PxVec3 &, float, bool) = &physx::PxD6JointCreate_Distance;
physx::PxJoint * (*unused937)(physx::PxPhysics &, physx::PxRigidActor *, const physx::PxVec3 &, physx::PxRigidActor *, const physx::PxVec3 &, const physx::PxVec3 &, float, float, bool) = &physx::PxD6JointCreate_Prismatic;
physx::PxJoint * (*unused938)(physx::PxPhysics &, physx::PxRigidActor *, const physx::PxVec3 &, physx::PxRigidActor *, const physx::PxVec3 &, const physx::PxVec3 &, float, float, bool) = &physx::PxD6JointCreate_Revolute;
physx::PxJoint * (*unused939)(physx::PxPhysics &, physx::PxRigidActor *, const physx::PxVec3 &, physx::PxRigidActor *, const physx::PxVec3 &, const physx::PxVec3 &, float, float, bool) = &physx::PxD6JointCreate_Spherical;
physx::PxJoint * (*unused940)(float &, float &, physx::PxPhysics &, physx::PxRigidActor *, const physx::PxVec3 &, physx::PxRigidActor *, const physx::PxVec3 &, float, float, float, float, bool) = &physx::PxD6JointCreate_GenericCone;
physx::PxJoint * (*unused941)(physx::PxPhysics &, physx::PxRigidActor *, const physx::PxVec3 &, physx::PxRigidActor *, const physx::PxVec3 &, const physx::PxVec3 &, float, float, float, float) = &physx::PxD6JointCreate_Pyramid;
bool (*unused942)(const physx::PxVehicleWheelQueryResult &) = &physx::PxVehicleIsInAir;
void (*unused943)(const physx::PxDelayLoadHook *) = &physx::PxSetPhysXDelayLoadHook;
void (*unused944)(const physx::PxDelayLoadHook *) = &physx::PxSetPhysXCookingDelayLoadHook;
void (*unused945)(const physx::PxDelayLoadHook *) = &physx::PxSetPhysXCommonDelayLoadHook;
void (*unused946)(const physx::immediate::PxRigidBodyData *, physx::PxSolverBodyData *, const unsigned int, const physx::PxVec3 &, const float) = &physx::immediate::PxConstructSolverBodies;
void (*unused947)(const physx::PxTransform &, physx::PxSolverBodyData &) = &physx::immediate::PxConstructStaticSolverBody;
unsigned int (*unused948)(const physx::PxSolverConstraintDesc *, const unsigned int, physx::PxSolverBody *, const unsigned int, physx::PxConstraintBatchHeader *, physx::PxSolverConstraintDesc *, physx::Dy::ArticulationV **, const unsigned int) = &physx::immediate::PxBatchConstraints;
bool (*unused949)(physx::PxConstraintBatchHeader *, const unsigned int, physx::PxSolverContactDesc *, physx::PxConstraintAllocator &, const float, const float, const float, const float) = &physx::immediate::PxCreateContactConstraints;
bool (*unused950)(physx::PxConstraintBatchHeader *, const unsigned int, physx::PxSolverConstraintPrepDesc *, physx::PxConstraintAllocator &, const float, const float) = &physx::immediate::PxCreateJointConstraints;
bool (*unused951)(physx::PxConstraintBatchHeader *, const unsigned int, physx::PxConstraint **, physx::PxSolverConstraintPrepDesc *, physx::PxConstraintAllocator &, const float, const float) = &physx::immediate::PxCreateJointConstraintsWithShaders;
bool (*unused952)(physx::PxConstraintBatchHeader *, const unsigned int, physx::immediate::PxImmediateConstraint *, physx::PxSolverConstraintPrepDesc *, physx::PxConstraintAllocator &, const float, const float) = &physx::immediate::PxCreateJointConstraintsWithImmediateShaders;
void (*unused953)(const physx::PxConstraintBatchHeader *, const unsigned int, const physx::PxSolverConstraintDesc *, const physx::PxSolverBody *, physx::PxVec3 *, physx::PxVec3 *, const unsigned int, const unsigned int, const unsigned int, const float, const float, const unsigned int, physx::Dy::ArticulationV **) = &physx::immediate::PxSolveConstraints;
void (*unused954)(physx::PxSolverBodyData *, physx::PxSolverBody *, const physx::PxVec3 *, const physx::PxVec3 *, const unsigned int, const float) = &physx::immediate::PxIntegrateSolverBodies;
bool (*unused955)(const physx::PxGeometry *const *, const physx::PxGeometry *const *, const physx::PxTransform *, const physx::PxTransform *, physx::PxCache *, const unsigned int, physx::immediate::PxContactRecorder &, const float, const float, const float, physx::PxCacheAllocator &) = &physx::immediate::PxGenerateContacts;
void (*unused956)() = &physx::immediate::PxRegisterImmediateArticulations;
physx::Dy::ArticulationV * (*unused957)(const physx::immediate::PxFeatherstoneArticulationData &) = &physx::immediate::PxCreateFeatherstoneArticulation;
void (*unused958)(physx::Dy::ArticulationV *) = &physx::immediate::PxReleaseArticulation;
physx::PxArticulationCache * (*unused959)(physx::Dy::ArticulationV *) = &physx::immediate::PxCreateArticulationCache;
void (*unused960)(physx::Dy::ArticulationV *, physx::PxArticulationCache &, physx::PxFlags<physx::PxArticulationCache::Enum, unsigned char>) = &physx::immediate::PxCopyInternalStateToArticulationCache;
void (*unused961)(physx::Dy::ArticulationV *, physx::PxArticulationCache &, physx::PxFlags<physx::PxArticulationCache::Enum, unsigned char>) = &physx::immediate::PxApplyArticulationCache;
void (*unused962)(physx::PxArticulationCache &) = &physx::immediate::PxReleaseArticulationCache;
unsigned long long (*unused963)(physx::Dy::ArticulationV *, const physx::immediate::PxFeatherstoneArticulationLinkData &, bool) = &physx::immediate::PxAddArticulationLink;
physx::Dy::ArticulationV * (*unused964)(const unsigned long long) = &physx::immediate::PxGetLinkArticulation;
unsigned int (*unused965)(const unsigned long long) = &physx::immediate::PxGetLinkIndex;
bool (*unused966)(const unsigned long long, physx::immediate::PxLinkData &) = &physx::immediate::PxGetLinkData;
unsigned int (*unused967)(const physx::Dy::ArticulationV *, physx::immediate::PxLinkData *) = &physx::immediate::PxGetAllLinkData;
bool (*unused968)(const unsigned long long, physx::immediate::PxMutableLinkData &) = &physx::immediate::PxGetMutableLinkData;
bool (*unused969)(unsigned long long, const physx::immediate::PxMutableLinkData &) = &physx::immediate::PxSetMutableLinkData;
bool (*unused970)(const unsigned long long, physx::immediate::PxFeatherstoneArticulationJointData &) = &physx::immediate::PxGetJointData;
bool (*unused971)(unsigned long long, const physx::immediate::PxFeatherstoneArticulationJointData &) = &physx::immediate::PxSetJointData;
void (*unused972)(physx::Dy::ArticulationV *, const physx::PxVec3 &, const float) = &physx::immediate::PxComputeUnconstrainedVelocities;
void (*unused973)(physx::Dy::ArticulationV *, const float) = &physx::immediate::PxUpdateArticulationBodies;
void (*unused974)(physx::Dy::ArticulationV *, const physx::PxVec3 &, const float, const float, const float, const float) = &physx::immediate::PxComputeUnconstrainedVelocitiesTGS;
void (*unused975)(physx::Dy::ArticulationV *, const float) = &physx::immediate::PxUpdateArticulationBodiesTGS;
void (*unused976)(const physx::immediate::PxRigidBodyData *, physx::PxTGSSolverBodyVel *, physx::PxTGSSolverBodyTxInertia *, physx::PxTGSSolverBodyData *, const unsigned int, const physx::PxVec3 &, const float) = &physx::immediate::PxConstructSolverBodiesTGS;
void (*unused977)(const physx::PxTransform &, physx::PxTGSSolverBodyVel &, physx::PxTGSSolverBodyTxInertia &, physx::PxTGSSolverBodyData &) = &physx::immediate::PxConstructStaticSolverBodyTGS;
unsigned int (*unused978)(const physx::PxSolverConstraintDesc *, const unsigned int, physx::PxTGSSolverBodyVel *, const unsigned int, physx::PxConstraintBatchHeader *, physx::PxSolverConstraintDesc *, physx::Dy::ArticulationV **, const unsigned int) = &physx::immediate::PxBatchConstraintsTGS;
bool (*unused979)(physx::PxConstraintBatchHeader *, const unsigned int, physx::PxTGSSolverContactDesc *, physx::PxConstraintAllocator &, const float, const float, const float, const float, const float) = &physx::immediate::PxCreateContactConstraintsTGS;
bool (*unused980)(physx::PxConstraintBatchHeader *, const unsigned int, physx::PxTGSSolverConstraintPrepDesc *, physx::PxConstraintAllocator &, const float, const float, const float, const float, const float) = &physx::immediate::PxCreateJointConstraintsTGS;
bool (*unused981)(physx::PxConstraintBatchHeader *, const unsigned int, physx::PxConstraint **, physx::PxTGSSolverConstraintPrepDesc *, physx::PxConstraintAllocator &, const float, const float, const float, const float, const float) = &physx::immediate::PxCreateJointConstraintsWithShadersTGS;
bool (*unused982)(physx::PxConstraintBatchHeader *, const unsigned int, physx::immediate::PxImmediateConstraint *, physx::PxTGSSolverConstraintPrepDesc *, physx::PxConstraintAllocator &, const float, const float, const float, const float, const float) = &physx::immediate::PxCreateJointConstraintsWithImmediateShadersTGS;
void (*unused983)(const physx::PxConstraintBatchHeader *, const unsigned int, const physx::PxSolverConstraintDesc *, physx::PxTGSSolverBodyVel *, physx::PxTGSSolverBodyTxInertia *, const unsigned int, const unsigned int, const unsigned int, const float, const float, const unsigned int, physx::Dy::ArticulationV **) = &physx::immediate::PxSolveConstraintsTGS;
void (*unused984)(physx::PxTGSSolverBodyVel *, physx::PxTGSSolverBodyTxInertia *, physx::PxTransform *, const unsigned int, const float) = &physx::immediate::PxIntegrateSolverBodiesTGS;
