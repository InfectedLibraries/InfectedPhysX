// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct PxController
{
    public unsafe PxControllerShapeType getType()
    {
        fixed (PxController* @this = &this)
        { return VirtualMethodTablePointer->getType(@this); }
    }

    public unsafe void release()
    {
        fixed (PxController* @this = &this)
        { VirtualMethodTablePointer->release(@this); }
    }

    public unsafe PxControllerCollisionFlags move(PxVec3* disp, float minDist, float elapsedTime, PxControllerFilters* filters, PxObstacleContext* obstacles = null)
    {
        fixed (PxController* @this = &this)
        { return VirtualMethodTablePointer->move(@this, disp, minDist, elapsedTime, filters, obstacles); }
    }

    public unsafe bool setPosition(PxExtendedVec3* position)
    {
        fixed (PxController* @this = &this)
        { return VirtualMethodTablePointer->setPosition(@this, position); }
    }

    public unsafe PxExtendedVec3* getPosition()
    {
        fixed (PxController* @this = &this)
        { return VirtualMethodTablePointer->getPosition(@this); }
    }

    public unsafe bool setFootPosition(PxExtendedVec3* position)
    {
        fixed (PxController* @this = &this)
        { return VirtualMethodTablePointer->setFootPosition(@this, position); }
    }

    public unsafe PxExtendedVec3 getFootPosition()
    {
        fixed (PxController* @this = &this)
        {
            PxExtendedVec3 __returnBuffer;
            VirtualMethodTablePointer->getFootPosition(@this, out __returnBuffer);
            return __returnBuffer;
        }
    }

    public unsafe PxRigidDynamic* getActor()
    {
        fixed (PxController* @this = &this)
        { return VirtualMethodTablePointer->getActor(@this); }
    }

    public unsafe void setStepOffset(float offset)
    {
        fixed (PxController* @this = &this)
        { VirtualMethodTablePointer->setStepOffset(@this, offset); }
    }

    public unsafe float getStepOffset()
    {
        fixed (PxController* @this = &this)
        { return VirtualMethodTablePointer->getStepOffset(@this); }
    }

    public unsafe void setNonWalkableMode(PxControllerNonWalkableMode flag)
    {
        fixed (PxController* @this = &this)
        { VirtualMethodTablePointer->setNonWalkableMode(@this, flag); }
    }

    public unsafe PxControllerNonWalkableMode getNonWalkableMode()
    {
        fixed (PxController* @this = &this)
        { return VirtualMethodTablePointer->getNonWalkableMode(@this); }
    }

    public unsafe float getContactOffset()
    {
        fixed (PxController* @this = &this)
        { return VirtualMethodTablePointer->getContactOffset(@this); }
    }

    public unsafe void setContactOffset(float offset)
    {
        fixed (PxController* @this = &this)
        { VirtualMethodTablePointer->setContactOffset(@this, offset); }
    }

    public unsafe PxVec3 getUpDirection()
    {
        fixed (PxController* @this = &this)
        {
            PxVec3 __returnBuffer;
            VirtualMethodTablePointer->getUpDirection(@this, out __returnBuffer);
            return __returnBuffer;
        }
    }

    public unsafe void setUpDirection(PxVec3* up)
    {
        fixed (PxController* @this = &this)
        { VirtualMethodTablePointer->setUpDirection(@this, up); }
    }

    public unsafe float getSlopeLimit()
    {
        fixed (PxController* @this = &this)
        { return VirtualMethodTablePointer->getSlopeLimit(@this); }
    }

    public unsafe void setSlopeLimit(float slopeLimit)
    {
        fixed (PxController* @this = &this)
        { VirtualMethodTablePointer->setSlopeLimit(@this, slopeLimit); }
    }

    public unsafe void invalidateCache()
    {
        fixed (PxController* @this = &this)
        { VirtualMethodTablePointer->invalidateCache(@this); }
    }

    public unsafe PxScene* getScene()
    {
        fixed (PxController* @this = &this)
        { return VirtualMethodTablePointer->getScene(@this); }
    }

    public unsafe void* getUserData()
    {
        fixed (PxController* @this = &this)
        { return VirtualMethodTablePointer->getUserData(@this); }
    }

    public unsafe void setUserData(void* userData)
    {
        fixed (PxController* @this = &this)
        { VirtualMethodTablePointer->setUserData(@this, userData); }
    }

    public unsafe void getState(PxControllerState* state)
    {
        fixed (PxController* @this = &this)
        { VirtualMethodTablePointer->getState(@this, state); }
    }

    public unsafe void getStats(PxControllerStats* stats)
    {
        fixed (PxController* @this = &this)
        { VirtualMethodTablePointer->getStats(@this, stats); }
    }

    public unsafe void resize(float height)
    {
        fixed (PxController* @this = &this)
        { VirtualMethodTablePointer->resize(@this, height); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxController@physx@@IEAA@XZ", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxController* @this);

    public unsafe void Constructor()
    {
        fixed (PxController* @this = &this)
        { Constructor_PInvoke(@this); }
    }

    public unsafe void Destructor()
    {
        fixed (PxController* @this = &this)
        { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
    }


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `getType`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, PxControllerShapeType> getType;
        /// <summary>Virtual method pointer for `release`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, void> release;
        /// <summary>Virtual method pointer for `move`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, PxVec3*, float, float, PxControllerFilters*, PxObstacleContext*, PxControllerCollisionFlags> move;
        /// <summary>Virtual method pointer for `setPosition`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, PxExtendedVec3*, NativeBoolean> setPosition;
        /// <summary>Virtual method pointer for `getPosition`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, PxExtendedVec3*> getPosition;
        /// <summary>Virtual method pointer for `setFootPosition`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, PxExtendedVec3*, NativeBoolean> setFootPosition;
        /// <summary>Virtual method pointer for `getFootPosition`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, out PxExtendedVec3, void> getFootPosition;
        /// <summary>Virtual method pointer for `getActor`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, PxRigidDynamic*> getActor;
        /// <summary>Virtual method pointer for `setStepOffset`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, float, void> setStepOffset;
        /// <summary>Virtual method pointer for `getStepOffset`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, float> getStepOffset;
        /// <summary>Virtual method pointer for `setNonWalkableMode`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, PxControllerNonWalkableMode, void> setNonWalkableMode;
        /// <summary>Virtual method pointer for `getNonWalkableMode`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, PxControllerNonWalkableMode> getNonWalkableMode;
        /// <summary>Virtual method pointer for `getContactOffset`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, float> getContactOffset;
        /// <summary>Virtual method pointer for `setContactOffset`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, float, void> setContactOffset;
        /// <summary>Virtual method pointer for `getUpDirection`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, out PxVec3, void> getUpDirection;
        /// <summary>Virtual method pointer for `setUpDirection`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, PxVec3*, void> setUpDirection;
        /// <summary>Virtual method pointer for `getSlopeLimit`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, float> getSlopeLimit;
        /// <summary>Virtual method pointer for `setSlopeLimit`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, float, void> setSlopeLimit;
        /// <summary>Virtual method pointer for `invalidateCache`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, void> invalidateCache;
        /// <summary>Virtual method pointer for `getScene`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, PxScene*> getScene;
        /// <summary>Virtual method pointer for `getUserData`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, void*> getUserData;
        /// <summary>Virtual method pointer for `setUserData`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, void*, void> setUserData;
        /// <summary>Virtual method pointer for `getState`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, PxControllerState*, void> getState;
        /// <summary>Virtual method pointer for `getStats`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, PxControllerStats*, void> getStats;
        /// <summary>Virtual method pointer for `resize`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, float, void> resize;
        /// <summary>Virtual method pointer for `~PxController`</summary>
        public delegate* unmanaged[Cdecl]<PxController*, void> __DeletingDestructorPointer;
    }
}
