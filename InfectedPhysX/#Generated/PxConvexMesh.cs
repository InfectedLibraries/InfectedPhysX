// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 16)]
public unsafe partial struct PxConvexMesh
{
    [FieldOffset(0)] public PxBase Base;

    public unsafe uint getNbVertices()
    {
        fixed (PxConvexMesh* @this = &this)
        { return VirtualMethodTablePointer->getNbVertices(@this); }
    }

    public unsafe PxVec3* getVertices()
    {
        fixed (PxConvexMesh* @this = &this)
        { return VirtualMethodTablePointer->getVertices(@this); }
    }

    public unsafe byte* getIndexBuffer()
    {
        fixed (PxConvexMesh* @this = &this)
        { return VirtualMethodTablePointer->getIndexBuffer(@this); }
    }

    public unsafe uint getNbPolygons()
    {
        fixed (PxConvexMesh* @this = &this)
        { return VirtualMethodTablePointer->getNbPolygons(@this); }
    }

    public unsafe bool getPolygonData(uint index, PxHullPolygon* data)
    {
        fixed (PxConvexMesh* @this = &this)
        { return VirtualMethodTablePointer->getPolygonData(@this, index, data); }
    }

    public unsafe void release()
    {
        fixed (PxConvexMesh* @this = &this)
        { VirtualMethodTablePointer->release(@this); }
    }

    public unsafe uint getReferenceCount()
    {
        fixed (PxConvexMesh* @this = &this)
        { return VirtualMethodTablePointer->getReferenceCount(@this); }
    }

    public unsafe void acquireReference()
    {
        fixed (PxConvexMesh* @this = &this)
        { VirtualMethodTablePointer->acquireReference(@this); }
    }

    public unsafe void getMassInformation(float* mass, PxMat33* localInertia, PxVec3* localCenterOfMass)
    {
        fixed (PxConvexMesh* @this = &this)
        { VirtualMethodTablePointer->getMassInformation(@this, mass, localInertia, localCenterOfMass); }
    }

    public unsafe PxBounds3 getLocalBounds()
    {
        fixed (PxConvexMesh* @this = &this)
        {
            PxBounds3 __returnBuffer;
            VirtualMethodTablePointer->getLocalBounds(@this, out __returnBuffer);
            return __returnBuffer;
        }
    }

    public unsafe byte* getConcreteTypeName()
    {
        fixed (PxConvexMesh* @this = &this)
        { return VirtualMethodTablePointer->getConcreteTypeName(@this); }
    }

    public unsafe bool isGpuCompatible()
    {
        fixed (PxConvexMesh* @this = &this)
        { return VirtualMethodTablePointer->isGpuCompatible(@this); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxConvexMesh@physx@@IEAA@GV?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxConvexMesh* @this, ushort concreteType, PxBaseFlags baseFlags);

    public unsafe void Constructor(ushort concreteType, PxBaseFlags baseFlags)
    {
        fixed (PxConvexMesh* @this = &this)
        { Constructor_PInvoke(@this, concreteType, baseFlags); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxConvexMesh@physx@@IEAA@V?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxConvexMesh* @this, PxBaseFlags baseFlags);

    public unsafe void Constructor(PxBaseFlags baseFlags)
    {
        fixed (PxConvexMesh* @this = &this)
        { Constructor_PInvoke(@this, baseFlags); }
    }

    public unsafe void Destructor()
    {
        fixed (PxConvexMesh* @this = &this)
        { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
    }

    public unsafe bool isKindOf(byte* name)
    {
        fixed (PxConvexMesh* @this = &this)
        { return VirtualMethodTablePointer->isKindOf(@this, name); }
    }


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `release`</summary>
        public delegate* unmanaged[Cdecl]<PxConvexMesh*, void> release;
        /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
        public delegate* unmanaged[Cdecl]<PxConvexMesh*, byte*> getConcreteTypeName;
        /// <summary>Virtual method pointer for `isReleasable`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, bool> isReleasable;
        /// <summary>Virtual method pointer for `~PxConvexMesh`</summary>
        public delegate* unmanaged[Cdecl]<PxConvexMesh*, void> __DeletingDestructorPointer;
        /// <summary>Virtual method pointer for `isKindOf`</summary>
        public delegate* unmanaged[Cdecl]<PxConvexMesh*, byte*, bool> isKindOf;
        /// <summary>Virtual method pointer for `getNbVertices`</summary>
        public delegate* unmanaged[Cdecl]<PxConvexMesh*, uint> getNbVertices;
        /// <summary>Virtual method pointer for `getVertices`</summary>
        public delegate* unmanaged[Cdecl]<PxConvexMesh*, PxVec3*> getVertices;
        /// <summary>Virtual method pointer for `getIndexBuffer`</summary>
        public delegate* unmanaged[Cdecl]<PxConvexMesh*, byte*> getIndexBuffer;
        /// <summary>Virtual method pointer for `getNbPolygons`</summary>
        public delegate* unmanaged[Cdecl]<PxConvexMesh*, uint> getNbPolygons;
        /// <summary>Virtual method pointer for `getPolygonData`</summary>
        public delegate* unmanaged[Cdecl]<PxConvexMesh*, uint, PxHullPolygon*, bool> getPolygonData;
        /// <summary>Virtual method pointer for `getReferenceCount`</summary>
        public delegate* unmanaged[Cdecl]<PxConvexMesh*, uint> getReferenceCount;
        /// <summary>Virtual method pointer for `acquireReference`</summary>
        public delegate* unmanaged[Cdecl]<PxConvexMesh*, void> acquireReference;
        /// <summary>Virtual method pointer for `getMassInformation`</summary>
        public delegate* unmanaged[Cdecl]<PxConvexMesh*, float*, PxMat33*, PxVec3*, void> getMassInformation;
        /// <summary>Virtual method pointer for `getLocalBounds`</summary>
        public delegate* unmanaged[Cdecl]<PxConvexMesh*, out PxBounds3, void> getLocalBounds;
        /// <summary>Virtual method pointer for `isGpuCompatible`</summary>
        public delegate* unmanaged[Cdecl]<PxConvexMesh*, bool> isGpuCompatible;
    }
}
