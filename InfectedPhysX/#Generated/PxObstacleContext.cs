// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct PxObstacleContext
{
    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxObstacleContext@physx@@QEAA@XZ", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxObstacleContext* @this);

    public unsafe void Constructor()
    {
        fixed (PxObstacleContext* @this = &this)
        { Constructor_PInvoke(@this); }
    }

    public unsafe void Destructor()
    {
        fixed (PxObstacleContext* @this = &this)
        { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
    }

    public unsafe void release()
    {
        fixed (PxObstacleContext* @this = &this)
        { VirtualMethodTablePointer->release(@this); }
    }

    public unsafe PxControllerManager* getControllerManager()
    {
        fixed (PxObstacleContext* @this = &this)
        { return VirtualMethodTablePointer->getControllerManager(@this); }
    }

    public unsafe uint addObstacle(PxObstacle* obstacle)
    {
        fixed (PxObstacleContext* @this = &this)
        { return VirtualMethodTablePointer->addObstacle(@this, obstacle); }
    }

    public unsafe bool removeObstacle(uint handle)
    {
        fixed (PxObstacleContext* @this = &this)
        { return VirtualMethodTablePointer->removeObstacle(@this, handle); }
    }

    public unsafe bool updateObstacle(uint handle, PxObstacle* obstacle)
    {
        fixed (PxObstacleContext* @this = &this)
        { return VirtualMethodTablePointer->updateObstacle(@this, handle, obstacle); }
    }

    public unsafe uint getNbObstacles()
    {
        fixed (PxObstacleContext* @this = &this)
        { return VirtualMethodTablePointer->getNbObstacles(@this); }
    }

    public unsafe PxObstacle* getObstacle(uint i)
    {
        fixed (PxObstacleContext* @this = &this)
        { return VirtualMethodTablePointer->getObstacle(@this, i); }
    }

    public unsafe PxObstacle* getObstacleByHandle(uint handle)
    {
        fixed (PxObstacleContext* @this = &this)
        { return VirtualMethodTablePointer->getObstacleByHandle(@this, handle); }
    }


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `~PxObstacleContext`</summary>
        public delegate* unmanaged[Cdecl]<PxObstacleContext*, void> __DeletingDestructorPointer;
        /// <summary>Virtual method pointer for `release`</summary>
        public delegate* unmanaged[Cdecl]<PxObstacleContext*, void> release;
        /// <summary>Virtual method pointer for `getControllerManager`</summary>
        public delegate* unmanaged[Cdecl]<PxObstacleContext*, PxControllerManager*> getControllerManager;
        /// <summary>Virtual method pointer for `addObstacle`</summary>
        public delegate* unmanaged[Cdecl]<PxObstacleContext*, PxObstacle*, uint> addObstacle;
        /// <summary>Virtual method pointer for `removeObstacle`</summary>
        public delegate* unmanaged[Cdecl]<PxObstacleContext*, uint, bool> removeObstacle;
        /// <summary>Virtual method pointer for `updateObstacle`</summary>
        public delegate* unmanaged[Cdecl]<PxObstacleContext*, uint, PxObstacle*, bool> updateObstacle;
        /// <summary>Virtual method pointer for `getNbObstacles`</summary>
        public delegate* unmanaged[Cdecl]<PxObstacleContext*, uint> getNbObstacles;
        /// <summary>Virtual method pointer for `getObstacle`</summary>
        public delegate* unmanaged[Cdecl]<PxObstacleContext*, uint, PxObstacle*> getObstacle;
        /// <summary>Virtual method pointer for `getObstacleByHandle`</summary>
        public delegate* unmanaged[Cdecl]<PxObstacleContext*, uint, PxObstacle*> getObstacleByHandle;
    }
}
