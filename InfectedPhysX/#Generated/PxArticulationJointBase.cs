// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.ComponentModel;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 16)]
public unsafe partial struct PxArticulationJointBase
{
    [FieldOffset(0)] public PxBase Base;

    public unsafe PxArticulationLink* getParentArticulationLink()
    {
        fixed (PxArticulationJointBase* @this = &this)
        { return VirtualMethodTablePointer->getParentArticulationLink(@this); }
    }

    public unsafe void setParentPose(PxTransform* pose)
    {
        fixed (PxArticulationJointBase* @this = &this)
        { VirtualMethodTablePointer->setParentPose(@this, pose); }
    }

    public unsafe PxTransform getParentPose()
    {
        fixed (PxArticulationJointBase* @this = &this)
        {
            PxTransform __returnBuffer;
            VirtualMethodTablePointer->getParentPose(@this, out __returnBuffer);
            return __returnBuffer;
        }
    }

    public unsafe PxArticulationLink* getChildArticulationLink()
    {
        fixed (PxArticulationJointBase* @this = &this)
        { return VirtualMethodTablePointer->getChildArticulationLink(@this); }
    }

    public unsafe void setChildPose(PxTransform* pose)
    {
        fixed (PxArticulationJointBase* @this = &this)
        { VirtualMethodTablePointer->setChildPose(@this, pose); }
    }

    public unsafe PxTransform getChildPose()
    {
        fixed (PxArticulationJointBase* @this = &this)
        {
            PxTransform __returnBuffer;
            VirtualMethodTablePointer->getChildPose(@this, out __returnBuffer);
            return __returnBuffer;
        }
    }

    public unsafe PxArticulationJointImpl* getImpl()
    {
        fixed (PxArticulationJointBase* @this = &this)
        { return VirtualMethodTablePointer->getImpl_1(@this); }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public unsafe PxArticulationJointImpl* getImpl_Const()
    {
        fixed (PxArticulationJointBase* @this = &this)
        { return VirtualMethodTablePointer->getImpl_0(@this); }
    }

    public unsafe void Destructor()
    {
        fixed (PxArticulationJointBase* @this = &this)
        { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxArticulationJointBase@physx@@IEAA@GV?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxArticulationJointBase* @this, ushort concreteType, PxBaseFlags baseFlags);

    public unsafe void Constructor(ushort concreteType, PxBaseFlags baseFlags)
    {
        fixed (PxArticulationJointBase* @this = &this)
        { Constructor_PInvoke(@this, concreteType, baseFlags); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxArticulationJointBase@physx@@IEAA@V?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxArticulationJointBase* @this, PxBaseFlags baseFlags);

    public unsafe void Constructor(PxBaseFlags baseFlags)
    {
        fixed (PxArticulationJointBase* @this = &this)
        { Constructor_PInvoke(@this, baseFlags); }
    }

    public unsafe bool isKindOf(byte* name)
    {
        fixed (PxArticulationJointBase* @this = &this)
        { return VirtualMethodTablePointer->isKindOf(@this, name); }
    }


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `release`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, void> release;
        /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, byte*> getConcreteTypeName;
        /// <summary>Virtual method pointer for `isReleasable`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, NativeBoolean> isReleasable;
        /// <summary>Virtual method pointer for `~PxArticulationJointBase`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, void> __DeletingDestructorPointer;
        /// <summary>Virtual method pointer for `isKindOf`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, byte*, NativeBoolean> isKindOf;
        /// <summary>Virtual method pointer for `getParentArticulationLink`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, PxArticulationLink*> getParentArticulationLink;
        /// <summary>Virtual method pointer for `setParentPose`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, PxTransform*, void> setParentPose;
        /// <summary>Virtual method pointer for `getParentPose`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, out PxTransform, void> getParentPose;
        /// <summary>Virtual method pointer for `getChildArticulationLink`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, PxArticulationLink*> getChildArticulationLink;
        /// <summary>Virtual method pointer for `setChildPose`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, PxTransform*, void> setChildPose;
        /// <summary>Virtual method pointer for `getChildPose`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, out PxTransform, void> getChildPose;
        /// <summary>Virtual method pointer for `getImpl`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, PxArticulationJointImpl*> getImpl_0;
        /// <summary>Virtual method pointer for `getImpl`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationJointBase*, PxArticulationJointImpl*> getImpl_1;
    }
}
