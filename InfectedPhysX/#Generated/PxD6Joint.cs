// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 24)]
public unsafe partial struct PxD6Joint
{
    [FieldOffset(0)] public PxJoint Base;

    public unsafe void setMotion(PxD6Axis axis, PxD6Motion type)
    {
        fixed (PxD6Joint* @this = &this)
        { VirtualMethodTablePointer->setMotion(@this, axis, type); }
    }

    public unsafe PxD6Motion getMotion(PxD6Axis axis)
    {
        fixed (PxD6Joint* @this = &this)
        { return VirtualMethodTablePointer->getMotion(@this, axis); }
    }

    public unsafe float getTwistAngle()
    {
        fixed (PxD6Joint* @this = &this)
        { return VirtualMethodTablePointer->getTwistAngle(@this); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getTwist@PxD6Joint@physx@@QEBAMXZ", ExactSpelling = true)]
    private static extern float getTwist_PInvoke(PxD6Joint* @this);

    public unsafe float getTwist()
    {
        fixed (PxD6Joint* @this = &this)
        { return getTwist_PInvoke(@this); }
    }

    public unsafe float getSwingYAngle()
    {
        fixed (PxD6Joint* @this = &this)
        { return VirtualMethodTablePointer->getSwingYAngle(@this); }
    }

    public unsafe float getSwingZAngle()
    {
        fixed (PxD6Joint* @this = &this)
        { return VirtualMethodTablePointer->getSwingZAngle(@this); }
    }

    public unsafe void setDistanceLimit(PxJointLinearLimit* limit)
    {
        fixed (PxD6Joint* @this = &this)
        { VirtualMethodTablePointer->setDistanceLimit(@this, limit); }
    }

    public unsafe PxJointLinearLimit getDistanceLimit()
    {
        fixed (PxD6Joint* @this = &this)
        {
            PxJointLinearLimit __returnBuffer;
            VirtualMethodTablePointer->getDistanceLimit(@this, out __returnBuffer);
            return __returnBuffer;
        }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setLinearLimit@PxD6Joint@physx@@QEAAXAEBVPxJointLinearLimit@2@@Z", ExactSpelling = true)]
    private static extern void setLinearLimit_PInvoke(PxD6Joint* @this, PxJointLinearLimit* limit);

    public unsafe void setLinearLimit(PxJointLinearLimit* limit)
    {
        fixed (PxD6Joint* @this = &this)
        { setLinearLimit_PInvoke(@this, limit); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getLinearLimit@PxD6Joint@physx@@QEBA?AVPxJointLinearLimit@2@XZ", ExactSpelling = true)]
    private static extern void getLinearLimit_PInvoke(PxD6Joint* @this, out PxJointLinearLimit __returnBuffer);

    public unsafe PxJointLinearLimit getLinearLimit()
    {
        fixed (PxD6Joint* @this = &this)
        {
            PxJointLinearLimit __returnBuffer;
            getLinearLimit_PInvoke(@this, out __returnBuffer);
            return __returnBuffer;
        }
    }

    public unsafe void setLinearLimit(PxD6Axis axis, PxJointLinearLimitPair* limit)
    {
        fixed (PxD6Joint* @this = &this)
        { VirtualMethodTablePointer->setLinearLimit(@this, axis, limit); }
    }

    public unsafe PxJointLinearLimitPair getLinearLimit(PxD6Axis axis)
    {
        fixed (PxD6Joint* @this = &this)
        {
            PxJointLinearLimitPair __returnBuffer;
            VirtualMethodTablePointer->getLinearLimit(@this, out __returnBuffer, axis);
            return __returnBuffer;
        }
    }

    public unsafe void setTwistLimit(PxJointAngularLimitPair* limit)
    {
        fixed (PxD6Joint* @this = &this)
        { VirtualMethodTablePointer->setTwistLimit(@this, limit); }
    }

    public unsafe PxJointAngularLimitPair getTwistLimit()
    {
        fixed (PxD6Joint* @this = &this)
        {
            PxJointAngularLimitPair __returnBuffer;
            VirtualMethodTablePointer->getTwistLimit(@this, out __returnBuffer);
            return __returnBuffer;
        }
    }

    public unsafe void setSwingLimit(PxJointLimitCone* limit)
    {
        fixed (PxD6Joint* @this = &this)
        { VirtualMethodTablePointer->setSwingLimit(@this, limit); }
    }

    public unsafe PxJointLimitCone getSwingLimit()
    {
        fixed (PxD6Joint* @this = &this)
        {
            PxJointLimitCone __returnBuffer;
            VirtualMethodTablePointer->getSwingLimit(@this, out __returnBuffer);
            return __returnBuffer;
        }
    }

    public unsafe void setPyramidSwingLimit(PxJointLimitPyramid* limit)
    {
        fixed (PxD6Joint* @this = &this)
        { VirtualMethodTablePointer->setPyramidSwingLimit(@this, limit); }
    }

    public unsafe PxJointLimitPyramid getPyramidSwingLimit()
    {
        fixed (PxD6Joint* @this = &this)
        {
            PxJointLimitPyramid __returnBuffer;
            VirtualMethodTablePointer->getPyramidSwingLimit(@this, out __returnBuffer);
            return __returnBuffer;
        }
    }

    public unsafe void setDrive(PxD6Drive index, PxD6JointDrive* drive)
    {
        fixed (PxD6Joint* @this = &this)
        { VirtualMethodTablePointer->setDrive(@this, index, drive); }
    }

    public unsafe PxD6JointDrive getDrive(PxD6Drive index)
    {
        fixed (PxD6Joint* @this = &this)
        {
            PxD6JointDrive __returnBuffer;
            VirtualMethodTablePointer->getDrive(@this, out __returnBuffer, index);
            return __returnBuffer;
        }
    }

    public unsafe void setDrivePosition(PxTransform* pose, bool autowake = true)
    {
        fixed (PxD6Joint* @this = &this)
        { VirtualMethodTablePointer->setDrivePosition(@this, pose, autowake); }
    }

    public unsafe PxTransform getDrivePosition()
    {
        fixed (PxD6Joint* @this = &this)
        {
            PxTransform __returnBuffer;
            VirtualMethodTablePointer->getDrivePosition(@this, out __returnBuffer);
            return __returnBuffer;
        }
    }

    public unsafe void setDriveVelocity(PxVec3* linear, PxVec3* angular, bool autowake = true)
    {
        fixed (PxD6Joint* @this = &this)
        { VirtualMethodTablePointer->setDriveVelocity(@this, linear, angular, autowake); }
    }

    public unsafe void getDriveVelocity(PxVec3* linear, PxVec3* angular)
    {
        fixed (PxD6Joint* @this = &this)
        { VirtualMethodTablePointer->getDriveVelocity(@this, linear, angular); }
    }

    public unsafe void setProjectionLinearTolerance(float tolerance)
    {
        fixed (PxD6Joint* @this = &this)
        { VirtualMethodTablePointer->setProjectionLinearTolerance(@this, tolerance); }
    }

    public unsafe float getProjectionLinearTolerance()
    {
        fixed (PxD6Joint* @this = &this)
        { return VirtualMethodTablePointer->getProjectionLinearTolerance(@this); }
    }

    public unsafe void setProjectionAngularTolerance(float tolerance)
    {
        fixed (PxD6Joint* @this = &this)
        { VirtualMethodTablePointer->setProjectionAngularTolerance(@this, tolerance); }
    }

    public unsafe float getProjectionAngularTolerance()
    {
        fixed (PxD6Joint* @this = &this)
        { return VirtualMethodTablePointer->getProjectionAngularTolerance(@this); }
    }

    public unsafe byte* getConcreteTypeName()
    {
        fixed (PxD6Joint* @this = &this)
        { return VirtualMethodTablePointer->getConcreteTypeName(@this); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxD6Joint@physx@@IEAA@GV?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxD6Joint* @this, ushort concreteType, PxBaseFlags baseFlags);

    public unsafe void Constructor(ushort concreteType, PxBaseFlags baseFlags)
    {
        fixed (PxD6Joint* @this = &this)
        { Constructor_PInvoke(@this, concreteType, baseFlags); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxD6Joint@physx@@IEAA@V?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxD6Joint* @this, PxBaseFlags baseFlags);

    public unsafe void Constructor(PxBaseFlags baseFlags)
    {
        fixed (PxD6Joint* @this = &this)
        { Constructor_PInvoke(@this, baseFlags); }
    }

    public unsafe bool isKindOf(byte* name)
    {
        fixed (PxD6Joint* @this = &this)
        { return VirtualMethodTablePointer->isKindOf(@this, name); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PxD6JointCreate@physx@@YAPEAVPxD6Joint@1@AEAVPxPhysics@1@PEAVPxRigidActor@1@AEBVPxTransform@1@12@Z", ExactSpelling = true)]
    public static extern PxD6Joint* PxD6JointCreate(PxPhysics* physics, PxRigidActor* actor0, PxTransform* localFrame0, PxRigidActor* actor1, PxTransform* localFrame1);


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `release`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, void> release;
        /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, byte*> getConcreteTypeName;
        /// <summary>Virtual method pointer for `isReleasable`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, NativeBoolean> isReleasable;
        /// <summary>Virtual method pointer for `~PxD6Joint`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, void> __DeletingDestructorPointer;
        /// <summary>Virtual method pointer for `isKindOf`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, byte*, NativeBoolean> isKindOf;
        /// <summary>Virtual method pointer for `setActors`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxRigidActor*, PxRigidActor*, void> setActors;
        /// <summary>Virtual method pointer for `getActors`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxRigidActor**, PxRigidActor**, void> getActors;
        /// <summary>Virtual method pointer for `setLocalPose`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxJointActorIndex, PxTransform*, void> setLocalPose;
        /// <summary>Virtual method pointer for `getLocalPose`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, out PxTransform, PxJointActorIndex, void> getLocalPose;
        /// <summary>Virtual method pointer for `getRelativeTransform`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, out PxTransform, void> getRelativeTransform;
        /// <summary>Virtual method pointer for `getRelativeLinearVelocity`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, out PxVec3, void> getRelativeLinearVelocity;
        /// <summary>Virtual method pointer for `getRelativeAngularVelocity`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, out PxVec3, void> getRelativeAngularVelocity;
        /// <summary>Virtual method pointer for `setBreakForce`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float, float, void> setBreakForce;
        /// <summary>Virtual method pointer for `getBreakForce`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float*, float*, void> getBreakForce;
        /// <summary>Virtual method pointer for `setConstraintFlags`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxConstraintFlags, void> setConstraintFlags;
        /// <summary>Virtual method pointer for `setConstraintFlag`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxConstraintFlags, NativeBoolean, void> setConstraintFlag;
        /// <summary>Virtual method pointer for `getConstraintFlags`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxConstraintFlags> getConstraintFlags;
        /// <summary>Virtual method pointer for `setInvMassScale0`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float, void> setInvMassScale0;
        /// <summary>Virtual method pointer for `getInvMassScale0`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float> getInvMassScale0;
        /// <summary>Virtual method pointer for `setInvInertiaScale0`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float, void> setInvInertiaScale0;
        /// <summary>Virtual method pointer for `getInvInertiaScale0`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float> getInvInertiaScale0;
        /// <summary>Virtual method pointer for `setInvMassScale1`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float, void> setInvMassScale1;
        /// <summary>Virtual method pointer for `getInvMassScale1`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float> getInvMassScale1;
        /// <summary>Virtual method pointer for `setInvInertiaScale1`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float, void> setInvInertiaScale1;
        /// <summary>Virtual method pointer for `getInvInertiaScale1`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, float> getInvInertiaScale1;
        /// <summary>Virtual method pointer for `getConstraint`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxConstraint*> getConstraint;
        /// <summary>Virtual method pointer for `setName`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, byte*, void> setName;
        /// <summary>Virtual method pointer for `getName`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, byte*> getName;
        /// <summary>Virtual method pointer for `getScene`</summary>
        public delegate* unmanaged[Cdecl]<PxJoint*, PxScene*> getScene;
        /// <summary>Virtual method pointer for `setMotion`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, PxD6Axis, PxD6Motion, void> setMotion;
        /// <summary>Virtual method pointer for `getMotion`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, PxD6Axis, PxD6Motion> getMotion;
        /// <summary>Virtual method pointer for `getTwistAngle`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, float> getTwistAngle;
        /// <summary>Virtual method pointer for `getSwingYAngle`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, float> getSwingYAngle;
        /// <summary>Virtual method pointer for `getSwingZAngle`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, float> getSwingZAngle;
        /// <summary>Virtual method pointer for `setDistanceLimit`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, PxJointLinearLimit*, void> setDistanceLimit;
        /// <summary>Virtual method pointer for `getDistanceLimit`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, out PxJointLinearLimit, void> getDistanceLimit;
        /// <summary>Virtual method pointer for `setLinearLimit`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, PxD6Axis, PxJointLinearLimitPair*, void> setLinearLimit;
        /// <summary>Virtual method pointer for `getLinearLimit`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, out PxJointLinearLimitPair, PxD6Axis, void> getLinearLimit;
        /// <summary>Virtual method pointer for `setTwistLimit`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, PxJointAngularLimitPair*, void> setTwistLimit;
        /// <summary>Virtual method pointer for `getTwistLimit`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, out PxJointAngularLimitPair, void> getTwistLimit;
        /// <summary>Virtual method pointer for `setSwingLimit`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, PxJointLimitCone*, void> setSwingLimit;
        /// <summary>Virtual method pointer for `getSwingLimit`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, out PxJointLimitCone, void> getSwingLimit;
        /// <summary>Virtual method pointer for `setPyramidSwingLimit`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, PxJointLimitPyramid*, void> setPyramidSwingLimit;
        /// <summary>Virtual method pointer for `getPyramidSwingLimit`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, out PxJointLimitPyramid, void> getPyramidSwingLimit;
        /// <summary>Virtual method pointer for `setDrive`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, PxD6Drive, PxD6JointDrive*, void> setDrive;
        /// <summary>Virtual method pointer for `getDrive`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, out PxD6JointDrive, PxD6Drive, void> getDrive;
        /// <summary>Virtual method pointer for `setDrivePosition`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, PxTransform*, NativeBoolean, void> setDrivePosition;
        /// <summary>Virtual method pointer for `getDrivePosition`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, out PxTransform, void> getDrivePosition;
        /// <summary>Virtual method pointer for `setDriveVelocity`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, PxVec3*, PxVec3*, NativeBoolean, void> setDriveVelocity;
        /// <summary>Virtual method pointer for `getDriveVelocity`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, PxVec3*, PxVec3*, void> getDriveVelocity;
        /// <summary>Virtual method pointer for `setProjectionLinearTolerance`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, float, void> setProjectionLinearTolerance;
        /// <summary>Virtual method pointer for `getProjectionLinearTolerance`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, float> getProjectionLinearTolerance;
        /// <summary>Virtual method pointer for `setProjectionAngularTolerance`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, float, void> setProjectionAngularTolerance;
        /// <summary>Virtual method pointer for `getProjectionAngularTolerance`</summary>
        public delegate* unmanaged[Cdecl]<PxD6Joint*, float> getProjectionAngularTolerance;
    }
}
