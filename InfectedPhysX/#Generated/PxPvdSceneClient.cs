// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct PxPvdSceneClient
{
    public unsafe void setScenePvdFlag(PxPvdSceneFlags flag, bool value)
    {
        fixed (PxPvdSceneClient* @this = &this)
        { VirtualMethodTablePointer->setScenePvdFlag(@this, flag, value); }
    }

    public unsafe void setScenePvdFlags(PxPvdSceneFlags flags)
    {
        fixed (PxPvdSceneClient* @this = &this)
        { VirtualMethodTablePointer->setScenePvdFlags(@this, flags); }
    }

    public unsafe PxPvdSceneFlags getScenePvdFlags()
    {
        fixed (PxPvdSceneClient* @this = &this)
        { return VirtualMethodTablePointer->getScenePvdFlags(@this); }
    }

    public unsafe void updateCamera(byte* name, PxVec3* origin, PxVec3* up, PxVec3* target)
    {
        fixed (PxPvdSceneClient* @this = &this)
        { VirtualMethodTablePointer->updateCamera(@this, name, origin, up, target); }
    }

    public unsafe void drawPoints(PvdDebugPoint* points, uint count)
    {
        fixed (PxPvdSceneClient* @this = &this)
        { VirtualMethodTablePointer->drawPoints(@this, points, count); }
    }

    public unsafe void drawLines(PvdDebugLine* lines, uint count)
    {
        fixed (PxPvdSceneClient* @this = &this)
        { VirtualMethodTablePointer->drawLines(@this, lines, count); }
    }

    public unsafe void drawTriangles(PvdDebugTriangle* triangles, uint count)
    {
        fixed (PxPvdSceneClient* @this = &this)
        { VirtualMethodTablePointer->drawTriangles(@this, triangles, count); }
    }

    public unsafe void drawText(PvdDebugText* text)
    {
        fixed (PxPvdSceneClient* @this = &this)
        { VirtualMethodTablePointer->drawText(@this, text); }
    }

    public unsafe PvdClient* getClientInternal()
    {
        fixed (PxPvdSceneClient* @this = &this)
        { return VirtualMethodTablePointer->getClientInternal(@this); }
    }

    public unsafe void Destructor()
    {
        fixed (PxPvdSceneClient* @this = &this)
        { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
    }


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `setScenePvdFlag`</summary>
        public delegate* unmanaged[Cdecl]<PxPvdSceneClient*, PxPvdSceneFlags, NativeBoolean, void> setScenePvdFlag;
        /// <summary>Virtual method pointer for `setScenePvdFlags`</summary>
        public delegate* unmanaged[Cdecl]<PxPvdSceneClient*, PxPvdSceneFlags, void> setScenePvdFlags;
        /// <summary>Virtual method pointer for `getScenePvdFlags`</summary>
        public delegate* unmanaged[Cdecl]<PxPvdSceneClient*, PxPvdSceneFlags> getScenePvdFlags;
        /// <summary>Virtual method pointer for `updateCamera`</summary>
        public delegate* unmanaged[Cdecl]<PxPvdSceneClient*, byte*, PxVec3*, PxVec3*, PxVec3*, void> updateCamera;
        /// <summary>Virtual method pointer for `drawPoints`</summary>
        public delegate* unmanaged[Cdecl]<PxPvdSceneClient*, PvdDebugPoint*, uint, void> drawPoints;
        /// <summary>Virtual method pointer for `drawLines`</summary>
        public delegate* unmanaged[Cdecl]<PxPvdSceneClient*, PvdDebugLine*, uint, void> drawLines;
        /// <summary>Virtual method pointer for `drawTriangles`</summary>
        public delegate* unmanaged[Cdecl]<PxPvdSceneClient*, PvdDebugTriangle*, uint, void> drawTriangles;
        /// <summary>Virtual method pointer for `drawText`</summary>
        public delegate* unmanaged[Cdecl]<PxPvdSceneClient*, PvdDebugText*, void> drawText;
        /// <summary>Virtual method pointer for `getClientInternal`</summary>
        public delegate* unmanaged[Cdecl]<PxPvdSceneClient*, PvdClient*> getClientInternal;
        /// <summary>Virtual method pointer for `~PxPvdSceneClient`</summary>
        public delegate* unmanaged[Cdecl]<PxPvdSceneClient*, void> __DeletingDestructorPointer;
    }
}
