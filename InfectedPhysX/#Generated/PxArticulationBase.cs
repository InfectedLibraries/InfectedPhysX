// This file was automatically generated by Biohazrd and should not be modified by hand!
using System.ComponentModel;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 24)]
public unsafe partial struct PxArticulationBase
{
    [FieldOffset(0)] public PxBase Base;

    public unsafe PxScene* getScene()
    {
        fixed (PxArticulationBase* @this = &this)
        { return VirtualMethodTablePointer->getScene(@this); }
    }

    public unsafe void setSolverIterationCounts(uint minPositionIters, uint minVelocityIters = 1)
    {
        fixed (PxArticulationBase* @this = &this)
        { VirtualMethodTablePointer->setSolverIterationCounts(@this, minPositionIters, minVelocityIters); }
    }

    public unsafe void getSolverIterationCounts(uint* minPositionIters, uint* minVelocityIters)
    {
        fixed (PxArticulationBase* @this = &this)
        { VirtualMethodTablePointer->getSolverIterationCounts(@this, minPositionIters, minVelocityIters); }
    }

    public unsafe bool isSleeping()
    {
        fixed (PxArticulationBase* @this = &this)
        { return VirtualMethodTablePointer->isSleeping(@this); }
    }

    public unsafe void setSleepThreshold(float threshold)
    {
        fixed (PxArticulationBase* @this = &this)
        { VirtualMethodTablePointer->setSleepThreshold(@this, threshold); }
    }

    public unsafe float getSleepThreshold()
    {
        fixed (PxArticulationBase* @this = &this)
        { return VirtualMethodTablePointer->getSleepThreshold(@this); }
    }

    public unsafe void setStabilizationThreshold(float threshold)
    {
        fixed (PxArticulationBase* @this = &this)
        { VirtualMethodTablePointer->setStabilizationThreshold(@this, threshold); }
    }

    public unsafe float getStabilizationThreshold()
    {
        fixed (PxArticulationBase* @this = &this)
        { return VirtualMethodTablePointer->getStabilizationThreshold(@this); }
    }

    public unsafe void setWakeCounter(float wakeCounterValue)
    {
        fixed (PxArticulationBase* @this = &this)
        { VirtualMethodTablePointer->setWakeCounter(@this, wakeCounterValue); }
    }

    public unsafe float getWakeCounter()
    {
        fixed (PxArticulationBase* @this = &this)
        { return VirtualMethodTablePointer->getWakeCounter(@this); }
    }

    public unsafe void wakeUp()
    {
        fixed (PxArticulationBase* @this = &this)
        { VirtualMethodTablePointer->wakeUp(@this); }
    }

    public unsafe void putToSleep()
    {
        fixed (PxArticulationBase* @this = &this)
        { VirtualMethodTablePointer->putToSleep(@this); }
    }

    public unsafe PxArticulationLink* createLink(PxArticulationLink* parent, PxTransform* pose)
    {
        fixed (PxArticulationBase* @this = &this)
        { return VirtualMethodTablePointer->createLink(@this, parent, pose); }
    }

    public unsafe uint getNbLinks()
    {
        fixed (PxArticulationBase* @this = &this)
        { return VirtualMethodTablePointer->getNbLinks(@this); }
    }

    public unsafe uint getLinks(PxArticulationLink** userBuffer, uint bufferSize, uint startIndex = 0)
    {
        fixed (PxArticulationBase* @this = &this)
        { return VirtualMethodTablePointer->getLinks(@this, userBuffer, bufferSize, startIndex); }
    }

    public unsafe void setName(byte* name)
    {
        fixed (PxArticulationBase* @this = &this)
        { VirtualMethodTablePointer->setName(@this, name); }
    }

    public unsafe byte* getName()
    {
        fixed (PxArticulationBase* @this = &this)
        { return VirtualMethodTablePointer->getName(@this); }
    }

    public unsafe PxBounds3 getWorldBounds(float inflation = 1.00999999f)
    {
        fixed (PxArticulationBase* @this = &this)
        {
            PxBounds3 __returnBuffer;
            VirtualMethodTablePointer->getWorldBounds(@this, out __returnBuffer, inflation);
            return __returnBuffer;
        }
    }

    public unsafe PxAggregate* getAggregate()
    {
        fixed (PxArticulationBase* @this = &this)
        { return VirtualMethodTablePointer->getAggregate(@this); }
    }

    public unsafe PxArticulationImpl* getImpl()
    {
        fixed (PxArticulationBase* @this = &this)
        { return VirtualMethodTablePointer->getImpl_1(@this); }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public unsafe PxArticulationImpl* getImpl_Const()
    {
        fixed (PxArticulationBase* @this = &this)
        { return VirtualMethodTablePointer->getImpl_0(@this); }
    }

    [FieldOffset(16)] public void* userData;

    public unsafe void Destructor()
    {
        fixed (PxArticulationBase* @this = &this)
        { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxArticulationBase@physx@@IEAA@GV?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxArticulationBase* @this, ushort concreteType, PxBaseFlags baseFlags);

    public unsafe void Constructor(ushort concreteType, PxBaseFlags baseFlags)
    {
        fixed (PxArticulationBase* @this = &this)
        { Constructor_PInvoke(@this, concreteType, baseFlags); }
    }

    [DllImport("TODO.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0PxArticulationBase@physx@@IEAA@V?$PxFlags@W4Enum@PxBaseFlag@physx@@G@1@@Z", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(PxArticulationBase* @this, PxBaseFlags baseFlags);

    public unsafe void Constructor(PxBaseFlags baseFlags)
    {
        fixed (PxArticulationBase* @this = &this)
        { Constructor_PInvoke(@this, baseFlags); }
    }

    public unsafe PxArticulationJointBase* createArticulationJoint(PxArticulationLink* parent, PxTransform* parentFrame, PxArticulationLink* child, PxTransform* childFrame)
    {
        fixed (PxArticulationBase* @this = &this)
        { return VirtualMethodTablePointer->createArticulationJoint(@this, parent, parentFrame, child, childFrame); }
    }

    public unsafe void releaseArticulationJoint(PxArticulationJointBase* joint)
    {
        fixed (PxArticulationBase* @this = &this)
        { VirtualMethodTablePointer->releaseArticulationJoint(@this, joint); }
    }


    [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct VirtualMethodTable
    {
        /// <summary>Virtual method pointer for `release`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, void> release;
        /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, byte*> getConcreteTypeName;
        /// <summary>Virtual method pointer for `isReleasable`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, NativeBoolean> isReleasable;
        /// <summary>Virtual method pointer for `~PxArticulationBase`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, void> __DeletingDestructorPointer;
        /// <summary>Virtual method pointer for `isKindOf`</summary>
        public delegate* unmanaged[Cdecl]<PxBase*, byte*, NativeBoolean> isKindOf;
        /// <summary>Virtual method pointer for `getScene`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxScene*> getScene;
        /// <summary>Virtual method pointer for `setSolverIterationCounts`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, uint, uint, void> setSolverIterationCounts;
        /// <summary>Virtual method pointer for `getSolverIterationCounts`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, uint*, uint*, void> getSolverIterationCounts;
        /// <summary>Virtual method pointer for `isSleeping`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, NativeBoolean> isSleeping;
        /// <summary>Virtual method pointer for `setSleepThreshold`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, float, void> setSleepThreshold;
        /// <summary>Virtual method pointer for `getSleepThreshold`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, float> getSleepThreshold;
        /// <summary>Virtual method pointer for `setStabilizationThreshold`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, float, void> setStabilizationThreshold;
        /// <summary>Virtual method pointer for `getStabilizationThreshold`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, float> getStabilizationThreshold;
        /// <summary>Virtual method pointer for `setWakeCounter`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, float, void> setWakeCounter;
        /// <summary>Virtual method pointer for `getWakeCounter`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, float> getWakeCounter;
        /// <summary>Virtual method pointer for `wakeUp`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, void> wakeUp;
        /// <summary>Virtual method pointer for `putToSleep`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, void> putToSleep;
        /// <summary>Virtual method pointer for `createLink`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxArticulationLink*, PxTransform*, PxArticulationLink*> createLink;
        /// <summary>Virtual method pointer for `getNbLinks`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, uint> getNbLinks;
        /// <summary>Virtual method pointer for `getLinks`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxArticulationLink**, uint, uint, uint> getLinks;
        /// <summary>Virtual method pointer for `setName`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, byte*, void> setName;
        /// <summary>Virtual method pointer for `getName`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, byte*> getName;
        /// <summary>Virtual method pointer for `getWorldBounds`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, out PxBounds3, float, void> getWorldBounds;
        /// <summary>Virtual method pointer for `getAggregate`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxAggregate*> getAggregate;
        /// <summary>Virtual method pointer for `getImpl`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxArticulationImpl*> getImpl_0;
        /// <summary>Virtual method pointer for `getImpl`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxArticulationImpl*> getImpl_1;
        /// <summary>Virtual method pointer for `createArticulationJoint`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxArticulationLink*, PxTransform*, PxArticulationLink*, PxTransform*, PxArticulationJointBase*> createArticulationJoint;
        /// <summary>Virtual method pointer for `releaseArticulationJoint`</summary>
        public delegate* unmanaged[Cdecl]<PxArticulationBase*, PxArticulationJointBase*, void> releaseArticulationJoint;
    }
}
